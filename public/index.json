[{"categories":null,"content":"The accountant export lists all successful incoming and outgoing transactions, including the amount, payment method, and current transaction status.\n  Formats    CAMT053 CODA CSV MT940 XLS XLSX      Report contents      Headers Description     Report created The date the report was generated   Merchant ID Your MultiSafepay account number   Date from The start date of the reporting period   Date till The end date of the reporting period   Currency The currency of transactions   Opening balance The balance at the start date   Total credit The amount credited in the report period   Total debit The amount debited in the report period   Closing balance The balance at the end date   Columns Description   Completed date/time The date and time the transaction was completed   Amount The transaction amount   Creditdebit C means credit, D means debit   Typetransaction See N-codes for identifying payment methods   Paymenttype A MultiSafepay fee, or the payment method   Description 2-4 Descriptions of the order   Tr status The transaction status   Ms description The website name   Mt merchanttransactionid Your unique identifier for the order   Mt cust firstname The customer’s first name   Mt cust lastname The customer’s last name   Mt cust city The customer\u0026rsquo;s city   Mt cust country The customer\u0026rsquo;s country   Invoice ID Your internal invoice ID      Generating the report   Generating accountant exports    Sign in to your live or test dashboard. Go to Reports \u0026gt; Accountant export. From the Date selection list, select the relevant timeframe (last 2 years only), and then click Apply. From the Currency list, select the relevant currency. From the Report type list, select the relevant export format. Group costs in 1 record toggle:  Yes: Show only the total of all MultiSafepay transaction fees for the selected timeframe. No: List each MultiSafepay fee below the matching transaction.   Click Generate report.    Automating the report   Requesting automated exports   To request automated accountant exports, email the following information to integration@multisafepay.com:\n Your account ID: Top-right corner of your MultiSafepay dashboard Method: SFTP Pull or Push request Frequency: Daily, weekly, or monthly File format: CAMT053, CODA, CSV, MT940, XLS, or XLSX Desired time: Based on Central European (Summer) Time (CET/CEST) MultiSafepay transaction fees: Total or listed separately  To view the autogenerated reports in your MultiSafepay dashboard, click the Messages icon in the top-right corner.\n    SFTP requests and requirements     SFTP:\n Pull request: We give you access to a MultiSafepay SFTP server. Push request: You give us access to your SFTP server.    We support SFTP with username/password and username/SSH keys.\n  For SFTP connections, we only support ports 22 and 2222.\n  Make sure our IP address is on your allow list. For a list of MultiSafepay IP addresses, email integration@multisafepay.com\n  To deliver the report using SFTP Push requests, you must support the following protocol on your SFTP server:\nsh-ed25519, rsa-sha2-512, rsa-sha2-256, ecdsa-sha2-nistp521, ecdsa-sha2-nistp384, ecdsa-sha2-nistp256, ssh-rsa\n    Filtering by payment method   Filtering using N-Codes   To identify transactions in reports by payment method, use the following N-codes:\n   N-Code Transaction type     N001 MASTERCARD   N002 VISA   N003 MAESTRO   N004 WALLET   N006 DANKORT   N016 ALIPAY   N017 DOTPAY   N018 POSTEPAY   N021 IDEAL   N031 GIROPAY   N081 BANKTRANS   N085 AMEX   N086 KLARNA   N088 PAYAFTER   N089 SANTANDER   N090 in3   N092 DIRECTBANK   N093 CURRENCY CONVERSION   N094 MISTERCASH   N095 CHARGEBACK   N096 WITHDRAWAL   N097 Refund   N098 COUPON   N101 DIRDEB   N102 iDEAL QR   N102 BELFIUS   N103 EPS   N104 EINVOICE   N105 AFTERPAY   N107 FERBUY   N108 TRUSTLY   N109 KBC   N913 FEE      Importing into accounting platforms You can import accountant exports into a range of third-party accounting platforms.\nIncluding PayPal transactions   Including PayPal transactions    MultiSafepay does not collect funds for PayPal, therefore these transactions don\u0026rsquo;t automatically appear in the report.\nTo include them, in your dashboard or backend, set the transaction status to Completed.\n   Support Email support@multisafepay.com   ","tags":null,"title":"Accountant export","uri":"https://docs.multisafepay.com/reports/accountant-export/"},{"categories":null,"content":"MultiSafepay uses a webhook to send updates about orders and other notifications to your web server.\nYou can configure the webhook at website level or at order level.\nRequirements You must set a webhook endpoint, which is a URL that:\n Doesn\u0026rsquo;t include port numbers. Is publicly accessible, or has MultiSafepay on your allow list. Uses HTTPS - We don\u0026rsquo;t accept HTTP for security reasons.  For a list of MultiSafepay IP addresses, email integration@multisafepay.com\nWebsite level To configure the webhook endpoint at website level:\n Sign in to your MultiSafepay account. Go to Settings \u0026gt; Website settings. Select the relevant website. In the Notification URL field, set your webhook endpoint.  Order level To configure the webhook endpoint at order level:\n  Create an order via our API.\n  In the request body, set:\n payment_options.notification_url to your webhook endpoint payment_options.notification_method to POST  Note We do support GET as a notification_method, but we strongly recommend to use POST, which is the most efficient.    Example:\ncurl -X POST \\ \u0026quot;https://api.multisafepay.com/v1/json/orders?api_key={your-api-key}\u0026quot; -d '{ \u0026quot;type\u0026quot;: \u0026quot;redirect\u0026quot;, \u0026quot;order_id\u0026quot;: \u0026quot;my-order-id-1\u0026quot;, \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot;: 1000, \u0026quot;description\u0026quot;: \u0026quot;product description\u0026quot;, \u0026quot;payment_options\u0026quot;: { \u0026quot;notification_url\u0026quot;: \u0026quot;https://www.example.com/paymentnotification\u0026quot;, \u0026quot;notification_method\u0026quot;: \u0026quot;POST\u0026quot; } }' Now that you have configured your webhook endpoint, you need to configure your web server to handle notifications correctly.\nNext steps  Previous\nManage orders\n  Next\nHandle notifications\n     ","tags":null,"title":"Configure your webhook endpoint","uri":"https://docs.multisafepay.com/integrations/self-made/configure-your-webhook/"},{"categories":null,"content":"When there is an update to your order, we notify your web server at the following URL through a POST request:\n{your-webhook-endpoint}?transactionid=12345\u0026amp;timestamp=140292929\nThis URL is your webhook endpoint combined with two additional parameters:\n transactionid: Your unique identifier for the order, previously set as order_id in your API request. timestamp: The time the notification was triggered.  The updated order details make up the payload of the request.\nCheck the status Check the order status in the status field. If necessary, update your backend.\nNote: You can ignore notifications that:\n Don\u0026rsquo;t have the timestamp parameter in the URL Have the same order status  Validate the request Every POST notification request includes an HMAC signature that you must use to validate its authenticity. To validate the request, you can either:\nUse our PHP SDK\nUse the notification function from our PHP SDK.\n     Validate with your own solution\nCreate your own solution to validate HMAC signatures.\n     Acknowledge the notification Acknowledge that you have successfully received a valid notification by returning:\n HTTP status code 200 with OK at the start or end of the message body, or HTTP status code 200 with MULTISAFEPAY_OK anywhere in the message body.  Until we receive your acknowledgement, we resend the notification 4 times at 15 minute intervals, each with a new timestamp.\nTroubleshooting notifications If for some reason you don\u0026rsquo;t receive a notification:\n In your MultiSafepay test account, go to Transactions \u0026gt; Transaction overview \u0026gt; Transaction details. Scroll to the bottom to find Offline actions. Click and check that the URL displayed is the correct webhook endpoint. If the webhook endpoint is correct, click to resend the notification.  If you still don\u0026rsquo;t receive a notification, you may need to authorize MultiSafepay servers' IP addresses on your web server. For a list of MultiSafepay IP addresses, email integration@multisafepay.com\nYou have successfully configured your web server to handle notifications received from our webhook.\nNext steps  Previous\nConfigure your webhook endpoint\n  Next\nNext steps\n     ","tags":null,"title":"Handle notifications","uri":"https://docs.multisafepay.com/integrations/self-made/handle-notifications/"},{"categories":null,"content":" If you are still using the deprecated plugin, we recommend upgrading to the latest version as soon as possible.   This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with Magento 2.\n  Requirements    MultiSafepay account Magento Open Source version 2.3.x \u0026amp; 2.4.x or Adobe Commerce version 2.3.x \u0026amp; 2.4.x (For GraphQL, only Magento Open Source versions 2.4.x are supported) PHP 7.1+      Support   Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue Magento Slack channel #multisafepay-payments  Our plugin is supported by a certified Magento 2 Solution Specialist and receives regular updates for the latest features from Magento and MultiSafepay.\n  Modules   Magento modules   The plugin consists of several Magento modules:\n   Module Description     Multisafepay-magento2-core Provides core functionalities   Multisafepay-magento2-frontend Enables payment gateways in the Magento checkout   Multisafepay-magento2-adminhtml Enables/disables payment gateways, and changes settings in the Magento backend   Multisafepay-magento2-msi Handles stock when MSI is enabled   Multisafepay-magento2-catalog-inventory Handles stock when MSI is disabled   Multisafepay-magento2 Meta package that installs all the above   Multisafepay-magento2-graphql For GraphQL support, extends and adds GraphQL queries and mutations        Module dependencies   The meta-package has a dependency on MSI. This means the MSI modules must be available (but not necessarily enabled) in your store.\nIf you have removed MSI (e.g. with a composer-replace trick like yireo/magento2-replace-inventory), you can\u0026rsquo;t install the meta-package. To integrate with MultiSafepay, instead of installing the meta-package, install the magento2-frontend module and the magento2-catalog-inventory module.\nThe magento2-frontend module has a dependency on the magento2-core and magento2-adminhtml modules, so they are all installed together. In some cases, you also then need a stock-handling module. Since MSI is not available, you can install the magento2-catalog-inventory module instead.\nThe installation process is the same for the Adobe Commerce version.\n  Installation 1. We recommend installing the meta-package using Composer:\ncomposer require multisafepay/magento2 php bin/magento setup:upgrade php bin/magento setup:di:compile php bin/magento setup:static-content:deploy 2. To enable all modules, run in the Magento 2 root directory:\n./bin/magento module:enable `./bin/magento module:status | grep MultiSafepay_` Stock handling When you disable MSI in Magento 2, you must also disable the MultiSafepay MSI module by running:\nphp bin/magento module:disable MultiSafepay_ConnectMSI If you have enabled MSI in Magento 2, to disable the MultiSafepay CatalogInventory module, run:\nphp bin/magento module:disable MultiSafepay_ConnectCatalogInventory Configuration  Sign in to your Magento 2 backend. Go to Stores \u0026gt; Configuration \u0026gt; MultiSafepay.    Specific settings    General information: Contains all the main support information. We recommend reading this first. General settings: Contains all main settings.  Here you can configure all gateways and gift cards. Enter your account ID, site ID, site secure code.   Payment methods: Contains the configuration options for all MultiSafepay payment methods.  Make sure you have activated your selected payment methods in your MultiSafepay dashboard.   Gift cards: Contains the configuration options for all gift cards supported by MultiSafepay.  Make sure you have activated your selected gift cards in your MultiSafepay dashboard. For more information, see Gift cards.      User guide Checkouts The plugin is compatible with most Magento checkouts.\n  Supported checkouts    Amasty One Step Checkout Hyvä: Compatible with Hyvä\u0026rsquo;s themes and checkout Magento 2 core checkout: Works out of the box, based on the Luma theme MagePlaza One Step Checkout OneStepCheckout.com: MultiSafepay is an official partner, and the plugin is compatible with the latest version of the OneStepCheckout extension. Always test first to check compatibility with your configuration.  For support, email integration@multisafepay.com   Custom totals From version 1.9.0 and higher, all order totals from shopping cards are automatically read and displayed on MultiSafepay payment pages.\nSometimes this results in unwanted custom totals appearing on payment pages.\n  Excluding custom totals from payment pages    Sign in to your Magento 2 backend. Go to Stores \u0026gt; Configuration \u0026gt; MultiSafepay. Select General settings \u0026gt; Advanced settings \u0026gt; Exclude custom totals.  If you have included a custom total and it is not being read, make sure it implements the following methods:\n getCode() getTitle() or getLabel() getValue() or getAmount() and getBaseAmount() getTaxRate() or getBaseTaxRate() getTaxAmount() or getBaseTaxAmount()  The base values are required if you have enabled the use base currency setting under MultiSafepay \u0026gt; General settings.\n  Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways    Sign in to your Magento 2 backend. Go to Stores \u0026gt; Configuration \u0026gt; MultiSafepay \u0026gt; Payment methods \u0026gt; Generic gateway. Set the relevant payment method gateway IDs and upload a custom gateway image. For pay later methods, specify whether to include a shopping cart.  Generic gateways support:\n All payment methods (filter by country, and minimum/maximum amount) Split payments, Second Chance reminders and virtual IBANs Redirect requests only  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Logs   Downloading MultiSafepay logs    Sign in to your Magento backend. Go to Stores \u0026gt; Configuration \u0026gt; MultiSafepay \u0026gt; General settings \u0026gt; MultiSafepay payment logs. Click Download.  You receive a ZIP package containing a system report file and any MultiSafepay log(s) stored in the /var/log directory.   Magento Vault and Instant Purchase Magento Vault enables you to use Instant purchase, a feature that helps make repeat payments faster and easier, increasing your conversion.\n  How it works    After filling out their credit card number, CVC, and expiry date at checkout, customers can give permission to store these details for future payments. MultiSafepay encrypts the sensitive payment details and stores the encrypted version on our secure, GDPR compliant servers. We return a non-sensitive identifier for the payment details, known as a token, which can only be used in your Magento webshop. The token is automatically stored in your Magento Vault. For subsequent payments, the customer can simply click Instant purchase at checkout. They don\u0026rsquo;t need to re-provide any details.      Mastercard and Visa requirements   You must:\n Include a checkbox at checkout for customers to give permission to tokenize their payment details (provided as standard by Magento Vault). Explain in your terms and conditions how you use and store their details. Inform customers how they can delete stored payment details.      Activating Magento Vault   To activate Magento Vault, email a request to enable recurring payments to sales@multisafepay.com     Vault security   If you host Magento yourself, the security of the vault depends on the security of your server.\nHowever, the vault only contains tokens valid in your webshop. If your server is compromised, no actual payment details are at risk, only stored customer data.\n  Order lifetimes The default lifetime of Pending payment orders in Magento 2 is 480 minutes (8 hours). For payment methods with a longer authorization period, the order status changes to Cancelled after 8 hours.\n  Extending order lifetimes   To extend the lifetime of pending payments orders, increase the Order Cron settings value to longer than the validation period.\nFor instructions, see Magento – Pending payment order lifetime.\nERP systems\nFor ERP systems, if the order status is Declined, successful payments often fail to process for orders with Cancelled status.\nThe lifetime of bank transfers is 86400 minutes (60 days).\nThe order status in Magento 2 changes to Cancelled before the payment can be matched to the order.\n  Payment components The plugin supports Payment Components, which:\n Provide a seamless checkout experience to increase conversion. Encrypt customer payment details for secure processing. Shift responsibility for PCI DSS compliance to MultiSafepay.    Activating the payment component in your backend    Sign in to your Magento 2 backend. Go to Configuration \u0026gt; Credit card, and then click Configure. Click Payment type and select Credit card component. Click Save config.  For questions, email integration@multisafepay.com\nNote: If you have a custom checkout and encounter a conflict with the payment component, the Integration Team will do their best to provide support, but we can\u0026rsquo;t guarantee compatibility in all cases.\n  Payment links From version 2.0 and higher, payment links are automatically generated for every order.\n  Getting payment links   To get a payment link for a customer, follow these steps:\n Sign in to your Magento 2 backend. Go to Sales \u0026gt; Orders \u0026gt; Create new order, and then create an order. Go to the Orders overview, and then select the newly created order. Go to Comments history. Under Notes for this order, copy the payment link. Send the payment link to the customer.      Adding payment links to order confirmation emails    Sign in to your Magento 2 backend. Go to Marketing \u0026gt; Email templates. Under New order, import a template. Add the following code snippet to the template:  {{depend order.getPayment().getAdditionalInformation('payment_link')}} \u0026lt;a href=\u0026quot;{{var order.getPayment().getAdditionalInformation('payment_link')}}\u0026quot;\u0026gt;Pay now with {{var order.getPayment().getAdditionalInformation('method_title')}}\u0026lt;/a\u0026gt; {{/depend}} Magento 2.3.4+\nThe email template syntax is different for Magento 2.3.4+. Add this code snippet instead:\n{{depend order.payment.additional_information.payment_link}} \u0026lt;a href=\u0026quot;{{var order.payment.additional_information.payment_link}}\u0026quot;\u0026gt;Pay now with {{var order.payment.additional_information.method_title}}\u0026lt;/a\u0026gt; {{/depend}} Backend emails\nTo add payment links to order confirmation emails from your Magento backend, you can use the payment_link variable and an if/else statement in the template.\nFrontend emails\nYou cannot add payment links to order confirmation emails created in your frontend, but you can display the name of the payment method:\n{{if payment_link}} \u0026lt;a href=\u0026quot;{{var payment_link}}\u0026quot;\u0026gt;Pay now with {{var order.payment.additional_information.method_title}}\u0026lt;/a\u0026gt; {{else}} \u0026lt;p\u0026gt;{{var order.payment.additional_information.method_title}}\u0026lt;/p\u0026gt; {{/if}}\n Go to Stores \u0026gt; Configuration \u0026gt; Sales \u0026gt; Sales emails. Replace the New order confirmation template with your template. Test the template to confirm it is working.  Note: You can also implement this directly in the email template files.\n  Payment methods   Supported payment methods    Cards: All Banking methods: All Pay later methods: All Wallets: All Prepaid cards:  Baby gift card Beauty and Wellness gift card Boekenbon Edenred Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Givacard Good4fun Goodcard Nationale tuinbon Paysafecard Parfumcadeaukaart Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Progressive web apps The plugin is compatible with GraphQL queries and can be integrated into PWA stores using an additional GraphQL support module.\nWe also offer full extensions for ScandiPWA and Vue Storefront.\nRefunds   Refund rules            MultiSafepay dashboard - Full and partial refunds - Orders with Fooman surcharges - Orders from the deprecated plugin   Backend - Full and partial refunds, and credit memos - You can\u0026rsquo;t refund more than the original amount in your backend   API - See Refund order \u0026gt; Pay later refund - PATCH requests not supported        Processing backend refunds    Sign in to your Magento 2 backend. On the Invoices tab, click the invoice created by MultiSafepay, and then click Credit memo. Click the relevant refund button:  Offline refund: Doesn\u0026rsquo;t send a refund request to MultiSafepay. Refund: Sends a refund request to MultiSafepay.      Second Chance Second Chance emails are sent 1 hour and 24 hours after orders are created. By default, the order status changes from Pending payment to Cancelled after 8 hours (480 minutes).\nIf the customer pays via the second email (24 hours later), the payment is processed but the transaction update may not be handled correctly in Magento 2 because the order has expired. This may cause issues with external services, e.g. ERP/inventory management, if items are low in stock, or for one-off products like antiques.\nTo avoid this, match the order lifetime to the payment link lifetime.\nSee Setting order lifetimes above.\nNote: We recommend setting order lifetimes to 2 days (2880 minutes) to allow enough time for the customer to pay, but avoid issues with external services.\n  Setting payment link lifetimes    Sign in to your Magento 2 backend. Go to Stores \u0026gt; Configuration \u0026gt; MultiSafepay \u0026gt; Payment gateways, and select the relevant gateway Go to Custom payment link lifetime, select Pending payment order lifetime, and set to 2880 minutes.    Shipping orders When you ship pay later orders, you need to change the order status from Completed to Shipped. This prevents the order expiring and triggers invoicing.\nIf you do so in your Magento 2 backend, the updated status is passed to your MultiSafepay dashboard automatically.\nSurcharges The plugin does not support surcharges, but you can use third-party service Fooman to apply them.\n  Using Fooman for surcharges   To apply a surcharge or payment fee to a payment method, you can use the third-party Fooman package.\nRefunds\nYou can refund orders with a Fooman surcharge applied in your MultiSafepay dashboard, but not from your Magento 2 backend.\nPay later methods\nFor Dutch merchants, We strongly recommend not applying surcharges to pay later methods. This is now considered providing credit under the Wet op het consumentenkrediet and article 7:57 of the Burgerlijk Wetboek, and requires a permit from the Authority for Financial Markets (AFM).\nSupport\nThe Integration Team will do their best to support you with installing Fooman, but bear in mind that it is a third-party package. We can\u0026rsquo;t guarantee perfect compatibility.\n  Tax settings   Configuring Magento tax settings   To configure tax settings in Magento, go to Stores \u0026gt; Configuration \u0026gt; Sales \u0026gt; Tax \u0026gt; Calculation settings.\nRecommended tax settings\nTo avoid discrepancies between item amounts in MultiSafepay transactions and Magento orders, we recommend using the following tax settings in Magento.\nTo show prices excluding tax, use the following settings:\n Tax calculation method based on: Row total Catalog prices: Excluding tax Apply customer tax: After discount Apply discount on prices: Excluding tax  To show prices including tax, use the following settings:\n Tax calculation method based on: Row total Catalog prices: Including tax Apply customer tax: After discount Apply discount on prices: Including tax  These recommended settings are based on Magento\u0026rsquo;s standards. For more information, see Magento – Warning messages.\n  Updates You can also update the plugin via Composer or in your Magento 2 backend.\n  Backend updates    Make sure you have a backup of your production environment, and that you test the plugin in a staging environment. Sign in to your Magento 2 backend. Run the following commands via the CLI:  composer update multisafepay/magento2 --with-all-dependencies php bin/magento setup:upgrade php bin/magento setup:di:compile Depending on your webserver/webshop configuration, you may also need to:  Check the \u0026lsquo;rights\u0026rsquo; on files are correct. For the MultiSafepay files, see vendor/multisafepay. Empty static files when running in production mode. Clear your cache.      Upgrading If you are still using the deprecated plugin, we recommend upgrading to the latest version as soon as possible.\n  Why upgrade?   The new plugin features code improvements, and unit and integration testing. It is built on top of the Magento payment provider gateway structure. Some payment methods now skip the MultiSafepay payment page, which increases conversion.\nWe support most Magento functionalities. For any questions, email integration@multisafepay.com\nNew features\n Improved:  Magento backend configuration, including support information Translations Error handling, and event and error logs   Documentation for payment methods Modular setup for greater installation flexibility PWA (GraphQL) endpoints Support for Magento Vault and Instant Purchase (replace recurring payments)  Configuration fields\nWe have removed or altered the following configuration fields:\nEmailing invoices to customers\nThis feature now uses a Magento core configuration field: Sales \u0026gt; Sales emails \u0026gt; Invoice \u0026gt; Enabled.\nOrder statuses and flow\nAs of version 2.16, you can assign the following MultiSafepay statuses to a Magento order status:\n Cancelled Chargeback Declined Expired Initialized Partial refunded Refunded Reserved Uncleared Void  We have updated the order status flow from version 2.5.0:\n All new orders first receive Pending status. When redirecting the customer, the status changes to Pending payment, until the customer reaches your success page. If the payment is succesfully received at this point, the status changes to Processing. Around the same time, the webhook is triggered and the invoice is created. The webhook changes the status to Processing (if it isn\u0026rsquo;t already). For bank transfers, the status doesn\u0026rsquo;t change to Pending payment, therefore the order isn\u0026rsquo;t automatically cancelled after a set period of time to give the customer more time to pay.  Payment links\nPayment links are now generated automatically.\nReset gateway\nWhen creating an order in your Magento 2 backend, you can now select the MultiSafepay payment gateway instead. The payment gateway displays all active payment gateways to the customer based on the site settings in your MultiSafepay account.\nTo enable or disable the gateway on your checkout page, we have added a Can use checkout configuration field.\nKeep cart alive\nThe cart is now always kept alive when the customer clicks Back on the MultiSafepay payment page.\nCheckout\nWe have changed the default payment flow from redirect to direct for:\n AfterPay, E-Invoicing, in3, Pay After Delivery Direct Debit, Request to Pay  We have included extra fields in the checkout for these payment methods. If you use a custom checkout, you must account for the iDEAL issuers checkout field and the new checkout fields for these payment methods.\nAlternatively, you can disable additional checkout fields for these payment methods and change the flow back to redirect. Go to Stores \u0026gt; Configuration \u0026gt; MultiSafepay \u0026gt; Payment gateways \u0026gt; Gateway \u0026gt; Additional checkout fields.\n    Deleting the deprecated plugin   Make sure you finish processing all orders created in the deprecated plugin before you delete it. The deprecated payment gateways are no longer available in Magento after deletion.\nYou can refund transactions processed through the deprecated plugin in your MultiSafepay dashboard, but not from your Magento 2 backend.\nThe way you delete the deprecated plugin depends on the way you installed it:\nComposer\nThere are two options:\nOption 1: Remove the code base\ncomposer remove multisafepay/magento2msp php bin/magento setup:upgrade Option 2: Do a complete uninstall\nThis includes removing database entries and configuration.\nbin/magento module:uninstall MultiSafepay_Connect --remove-data --clear-static-content php bin/magento setup:upgrade Backups\nYou can back up certain parts of the plugin by adding the following parameters:\n --backup-code --backup-media --backup-db  For information about all parameters, see Magento - Uninstall modules. If you want a field from the deprecated plugin back, email integration@multisafepay.com\napp/code\n1. Disable the plugin:\nphp bin/magento module:disable --clear-static-content php bin/magento setup:upgrade 2. To remove the code base, delete the app/code/MultiSafepay/Connect directory:\ncd app/code/MultiSafepay rm -rf Connect Marketplace\nIf you installed the plugin via the Magento Marketplace, go to System \u0026gt; Web setup wizard \u0026gt; Extension manager \u0026gt; Update / uninstall.\n  ","tags":null,"title":"Magento 2 plugin","uri":"https://docs.multisafepay.com/magento-2/"},{"categories":null,"content":"MultiSafepay provides a RESTful API that can be accessed by HTTP requests to manage your data. We support data in JSON format only.\nThe most important data element in our API is the order. Orders contain all information related to a single instance of products and/or services sold to a customer.\nOrders can be linked to multiple transactions. A transaction represents an instance of funds being transferred.\nThe most common operation to perform with our API is creating an order. To specify which payment flow the customer experiences for that order, set the order type to direct or redirect.\n          Direct The customer selects their payment method in your embedded checkout.    Redirect The customer is redirected first to a payment page to select their payment method.     Prerequisites Before making any API requests, you must:\n Have a site API key. Choose the test or live environment.  You must include your API key in the request URL as a query parameter to be able to authenticate your request.\nWhile building your integration we recommend using the test environment: https://testapi.multisafepay.com/v1/json.\nCreate an order The first operation to test when building your integration, is to create an order. Here is a sample request to create a redirect order:\ncurl -X POST \u0026quot;https://testapi.multisafepay.com/v1/json/orders?api_key={your-test-api-key}\u0026quot; \\ -H 'Content-Type: application/json' \\ -H 'accept: application/json' \\ -d '{ \u0026quot;type\u0026quot;: \u0026quot;redirect\u0026quot;, \u0026quot;order_id\u0026quot;: \u0026quot;my-order-id-1\u0026quot;, \u0026quot;gateway\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot;: 1000, \u0026quot;description\u0026quot;: \u0026quot;Test order description\u0026quot;, \u0026quot;payment_options\u0026quot;: { \u0026quot;notification_url\u0026quot;: \u0026quot;https://www.example.com/client/notification?type=notification\u0026quot;, \u0026quot;notification_method\u0026quot;: \u0026quot;POST\u0026quot;, \u0026quot;redirect_url\u0026quot;: \u0026quot;https://www.example.com/client/notification?type=redirect\u0026quot;, \u0026quot;cancel_url\u0026quot;: \u0026quot;https://www.example.com/client/notification?type=cancel\u0026quot;, \u0026quot;close_window\u0026quot;: true }, \u0026quot;customer\u0026quot;: { \u0026quot;locale\u0026quot;: \u0026quot;nl_NL\u0026quot;, \u0026quot;ip_address\u0026quot;: \u0026quot;123.123.123.123\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Doe\u0026quot;, \u0026quot;company_name\u0026quot;: \u0026quot;Test Company Name\u0026quot;, \u0026quot;address1\u0026quot;: \u0026quot;Kraanspoor\u0026quot;, \u0026quot;house_number\u0026quot;: \u0026quot;39C\u0026quot;, \u0026quot;zip_code\u0026quot;: \u0026quot;1033SC\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Amsterdam\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;phone\u0026quot;: \u0026quot;0208500500\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;jdoe@example.com\u0026quot;, \u0026quot;referrer\u0026quot;: \u0026quot;https://example.com\u0026quot;, \u0026quot;user_agent\u0026quot;: \u0026quot;Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36\u0026quot; } }' Check that you receive a response with success set to true:\n{ \u0026quot;success\u0026quot;: true, \u0026quot;data\u0026quot;: { \u0026quot;order_id\u0026quot;: \u0026quot;my-order-id-1\u0026quot;, \u0026quot;payment_url\u0026quot;: \u0026quot;https://example.com/?lang=nl_NL\u0026quot; } } If you receive an error in the response, see Handling errors.\nOtherwise, open the payment_url to complete the payment on the payment page.\nFor further details on how to test each payment method, see Test payment details. If this is your first time, we recommend following the steps for iDEAL.\nGet order details To familiarize yourself with what an order looks like in our system, try making a Get order request for the order you just created, using the order_id.\ncurl -X GET 'https://testapi.multisafepay.com/v1/json/orders/my-order-id-1?api_key={your-test-api-key}' \\ -H 'accept: application/json' You should receive a response like this:\n{ \u0026quot;success\u0026quot;: true, \u0026quot;data\u0026quot;: { \u0026quot;amount\u0026quot;: 100, \u0026quot;amount_refunded\u0026quot;: 0, \u0026quot;costs\u0026quot;: [ { \u0026quot;amount\u0026quot;: 0.00, \u0026quot;description\u0026quot;: \u0026quot;0.00 For iDEAL Transactions\u0026quot;, \u0026quot;transaction_id\u0026quot;: 1234567, \u0026quot;type\u0026quot;: \u0026quot;SYSTEM\u0026quot; } ], \u0026quot;created\u0026quot;: \u0026quot;2021-12-07T15:56:32\u0026quot;, \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;custom_info\u0026quot;: { \u0026quot;custom_1\u0026quot;: null, \u0026quot;custom_2\u0026quot;: null, \u0026quot;custom_3\u0026quot;: null }, \u0026quot;customer\u0026quot;: { \u0026quot;address1\u0026quot;: \u0026quot;Kraanspoor\u0026quot;, \u0026quot;address2\u0026quot;: null, \u0026quot;city\u0026quot;: \u0026quot;Amsterdam\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;country_name\u0026quot;: null, \u0026quot;email\u0026quot;: \u0026quot;jdoe@example.com\u0026quot;, \u0026quot;first_name\u0026quot;: \u0026quot;John\u0026quot;, \u0026quot;house_number\u0026quot;: \u0026quot;39C\u0026quot;, \u0026quot;last_name\u0026quot;: \u0026quot;Doe\u0026quot;, \u0026quot;locale\u0026quot;: \u0026quot;nl_NL\u0026quot;, \u0026quot;phone1\u0026quot;: \u0026quot;0208500500\u0026quot;, \u0026quot;phone2\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;state\u0026quot;: null, \u0026quot;zip_code\u0026quot;: \u0026quot;1033SC\u0026quot; }, \u0026quot;description\u0026quot;: \u0026quot;Test Order Description\u0026quot;, \u0026quot;fastcheckout\u0026quot;: \u0026quot;NO\u0026quot;, \u0026quot;financial_status\u0026quot;: \u0026quot;completed\u0026quot;, \u0026quot;items\u0026quot;: null, \u0026quot;modified\u0026quot;: \u0026quot;2021-12-07T15:56:40\u0026quot;, \u0026quot;order_id\u0026quot;: \u0026quot;my-order-id-1\u0026quot;, \u0026quot;payment_details\u0026quot;: { \u0026quot;account_bic\u0026quot;: \u0026quot;INGBNL2A\u0026quot;, \u0026quot;account_holder_name\u0026quot;: \u0026quot;Jan Jansen\u0026quot;, \u0026quot;account_iban\u0026quot;: \u0026quot;NL87ABNA0000000001\u0026quot;, \u0026quot;account_id\u0026quot;: 1, \u0026quot;external_transaction_id\u0026quot;: \u0026quot;3749936454986553\u0026quot;, \u0026quot;issuer_id\u0026quot;: \u0026quot;0031\u0026quot;, \u0026quot;recurring_flow\u0026quot;: null, \u0026quot;recurring_id\u0026quot;: \u0026quot;998107705729622024\u0026quot;, \u0026quot;recurring_model\u0026quot;: null, \u0026quot;type\u0026quot;: \u0026quot;IDEAL\u0026quot; }, \u0026quot;payment_methods\u0026quot;: [ { \u0026quot;account_bic\u0026quot;: \u0026quot;INGBNL2A\u0026quot;, \u0026quot;account_holder_name\u0026quot;: \u0026quot;Jan Jansen\u0026quot;, \u0026quot;account_iban\u0026quot;: \u0026quot;NL87ABNA0000000001\u0026quot;, \u0026quot;account_id\u0026quot;: 1, \u0026quot;amount\u0026quot;: 100, \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;Test Order Description\u0026quot;, \u0026quot;external_transaction_id\u0026quot;: \u0026quot;3749936454986553\u0026quot;, \u0026quot;payment_description\u0026quot;: \u0026quot;iDEAL\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;completed\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;IDEAL\u0026quot; } ], \u0026quot;reason\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;reason_code\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;related_transactions\u0026quot;: null, \u0026quot;status\u0026quot;: \u0026quot;completed\u0026quot;, \u0026quot;transaction_id\u0026quot;: 2345678, \u0026quot;var1\u0026quot;: null, \u0026quot;var2\u0026quot;: null, \u0026quot;var3\u0026quot;: null } } The most important parameter is status, which represents the status of the order, i.e. the progression of the customer’s order with you.\nThe second most important parameter is financial_status, which represents the status of the transaction, i.e. the progression towards settling the funds in your MultiSafepay balance.\nWe recommend that you track the status parameter in your integration to understand how your order is progressing. For a detailed overview of the possible statuses, see Status meanings.\nIn this example, the status is Completed. This means that the customer has completed payment and settlement is guaranteed. The financial_status is also Completed. This means that the funds have been settled in your MultiSafepay balance.\nNow that you know how to create an order and check its details, and know what is important to look for, it\u0026rsquo;s the perfect time to introduce you to our webhook.\nSo that you don\u0026rsquo;t have to continually poll our server to see if there are updates to your orders, we provide a webhook to send you notifications automatically. In the next section we explain what you need to do to configure this to work with your web server.\nNext steps  Overview\nSelf-made integrations\n  Next\nConfigure your webhook endpoint\n     ","tags":null,"title":"Manage orders","uri":"https://docs.multisafepay.com/integrations/self-made/manage-orders/"},{"categories":null,"content":"Congratulations! You\u0026rsquo;ve successfully created an order, configured your webhook endpoint, and set up your web server to handle notifications.\nFor next steps:\nPayment methods and features\nCheck out our range of payment methods and features.\n     API reference\nLearn how to use our API to update an order, process a refund, or apply a discount.\n     Test your integration\nTest payments and resolve common issues.\n     Affiliate onboarding via API\nOnboard affiliated merchant accounts via our API.\n       Previous\nHandle notifications\n    ","tags":null,"title":"Next steps","uri":"https://docs.multisafepay.com/integrations/self-made/next-steps/"},{"categories":null,"content":"To validate the HMAC signature of POST notification requests in your own solution, follow these steps:\n  Base64 decode the Auth header value of the request.   Example   Before: MTY0MTIxODg4NDowNmNiZjIyNmU3Yzg3M2VmZjk2OTIxZDdmZGUzOTk4ZWI2YmUwZGU3OTE1ZWUxYzFiNTE0OTUxMWZjYTgyZTI2YmIwYWIyZTZkMGUwYWQ5OTdjYmFiMTUxZTRiYTU2MTU0MThkOGUxMjUyODMwMTcyNjE0M2VkMTE0NjI4N2Y5Mw==\nAfter: 1641218884:06cbf226e7c873eff96921d7fde3998eb6be0de7915ee1c1b5149511fca82e26bb0ab2e6d0e0ad997cbab151e4ba5615418d8e12528301726143ed1146287f93\n    Split the decoded Auth header value using the colon (:) as separator.\n The first string is the timestamp. The second string is the HMAC signature.    Example   Timestamp: 1641218884\nHMAC signature: 06cbf226e7c873eff96921d7fde3998eb6be0de7915ee1c1b5149511fca82e26bb0ab2e6d0e0ad997cbab151e4ba5615418d8e12528301726143ed1146287f93     Concatenate the:\n Timestamp Colon (:) Payload of the request    Example   1641218884:{\u0026quot;amount\u0026quot;:1000,\u0026quot;amount_refunded\u0026quot;:0,\u0026quot;costs\u0026quot;:[{\u0026quot;amount\u0026quot;:0.49,\u0026quot;description\u0026quot;:\u0026quot;0.49 For iDEAL Transactions\u0026quot;,\u0026quot;transaction_id\u0026quot;:\u0026quot;123456789\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;SYSTEM\u0026quot;}],\u0026quot;created\u0026quot;:\u0026quot;2022-01-03T15:08:02\u0026quot;,\u0026quot;currency\u0026quot;:\u0026quot;EUR\u0026quot;,\u0026quot;custom_info\u0026quot;:{\u0026quot;custom_1\u0026quot;:null,\u0026quot;custom_2\u0026quot;:null,\u0026quot;custom_3\u0026quot;:null},\u0026quot;customer\u0026quot;:{\u0026quot;address1\u0026quot;:null,\u0026quot;address2\u0026quot;:null,\u0026quot;city\u0026quot;:null,\u0026quot;country\u0026quot;:null,\u0026quot;country_name\u0026quot;:null,\u0026quot;email\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;first_name\u0026quot;:null,\u0026quot;house_number\u0026quot;:null,\u0026quot;last_name\u0026quot;:null,\u0026quot;locale\u0026quot;:\u0026quot;en_US\u0026quot;,\u0026quot;phone1\u0026quot;:null,\u0026quot;phone2\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;state\u0026quot;:null,\u0026quot;zip_code\u0026quot;:null},\u0026quot;description\u0026quot;:\u0026quot;product description\u0026quot;,\u0026quot;fastcheckout\u0026quot;:\u0026quot;NO\u0026quot;,\u0026quot;financial_status\u0026quot;:\u0026quot;initialized\u0026quot;,\u0026quot;items\u0026quot;:null,\u0026quot;modified\u0026quot;:\u0026quot;2022-01-03T15:08:02\u0026quot;,\u0026quot;order_id\u0026quot;:\u0026quot;my-order-id\u0026quot;, \u0026quot;payment_details\u0026quot;:{\u0026quot;account_holder_name\u0026quot;:null,\u0026quot;account_iban\u0026quot;:\u0026quot;https://example.com\u0026quot;,\u0026quot;account_id\u0026quot;:null,\u0026quot;external_transaction_id\u0026quot;:\u0026quot;123456789\u0026quot;,\u0026quot;issuer_id\u0026quot;:\u0026quot;3151\u0026quot;,\u0026quot;recurring_flow\u0026quot;:null,\u0026quot;recurring_id\u0026quot;:null,\u0026quot;recurring_model\u0026quot;:null,\u0026quot;type\u0026quot;:\u0026quot;IDEAL\u0026quot;},\u0026quot;payment_methods\u0026quot;:[{\u0026quot;amount\u0026quot;:1000,\u0026quot;currency\u0026quot;:\u0026quot;EUR\u0026quot;,\u0026quot;description\u0026quot;:\u0026quot;product description\u0026quot;,\u0026quot;external_transaction_id\u0026quot;:\u0026quot;123456789\u0026quot;,\u0026quot;payment_description\u0026quot;:\u0026quot;iDEAL\u0026quot;,\u0026quot;status\u0026quot;:\u0026quot;initialized\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;IDEAL\u0026quot;}],\u0026quot;reason\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;reason_code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;related_transactions\u0026quot;:null,\u0026quot;status\u0026quot;:\u0026quot;initialized\u0026quot;,\u0026quot;transaction_id\u0026quot;:\u0026quot;123456789\u0026quot;,\u0026quot;var1\u0026quot;:null,\u0026quot;var2\u0026quot;:null,\u0026quot;var3\u0026quot;:null}      SHA512 hash the concatenated string that resulted from step 3, using your API key as the HMAC key.\nIf the request is valid, the hashed value from step 4 matches the HMAC signature from step 2.\n  Example   HMAC key: 8HHhGgRWrA3O7NswjmgwyH7buPPCGnR5AkwAQyqI\nSHA512 hash: 06cbf226e7c873eff96921d7fde3998eb6be0de7915ee1c1b5149511fca82e26bb0ab2e6d0e0ad997cbab151e4ba5615418d8e12528301726143ed1146287f93\n  Additionally, check whether the timestamp is recent and the originating IP address is MultiSafepay\u0026rsquo;s. For a list of MultiSafepay\u0026rsquo;s IP addresses, email integration@multisafepay.com\n  Sample code We provide a code sample in Python for your reference.\n  Sample notification validation in Python   #!/usr/bin/python import argparse import base64 import hashlib import hmac import sys # Parse the command-line arguments parser = argparse.ArgumentParser() parser.add_argument(\u0026#34;-k\u0026#34;, \u0026#34;--apikey\u0026#34;, help=\u0026#34;API key\u0026#34;, required=True) parser.add_argument(\u0026#34;-p\u0026#34;, \u0026#34;--payload\u0026#34;, help=\u0026#34;Payload\u0026#34;, required=True) parser.add_argument(\u0026#34;-a\u0026#34;, \u0026#34;--authheader\u0026#34;, help=\u0026#34;Auth header\u0026#34;, required=True) args = parser.parse_args() # Step 1: Base64 decode the auth header encoded_auth_bytes = args.authheader.encode(\u0026#34;ascii\u0026#34;) decoded_auth_bytes = base64.b64decode(encoded_auth_bytes) decoded_auth = decoded_auth_bytes.decode(\u0026#34;ascii\u0026#34;) # Step 2: Split the decoded auth header timestamp = decoded_auth.split(\u0026#39;:\u0026#39;)[0] signature = decoded_auth.split(\u0026#39;:\u0026#39;)[1] # Step 3: Concatenate the timestamp, colon, and payload concatenated_string = timestamp + \u0026#34;:\u0026#34; + args.payload # Step 4: SHA512 hash the concatenated string hashed_value = hmac.new(args.apikey.encode(), concatenated_string.encode(), hashlib.sha512).hexdigest() # Step 5: Compare the hashed value with the signature if hashed_value == signature: print(\u0026#34;The notification is authentic\u0026#34;) sys.exit(0) else: print(\u0026#34;Error: The notification is not authentic\u0026#34;) sys.exit(1)    ","tags":null,"title":"Validate HMAC signatures","uri":"https://docs.multisafepay.com/integrations/self-made/handle-notifications/validate-hmac-signatures/"},{"categories":null,"content":"To set up your account, you must add at least one website, for which we generate an API key.\nYou can add an unlimited number of websites to your MultiSafepay account, but they must all be operated by the same legal entity linked to that account.\nTo process payments from a website operated by a separate legal entity, you must sign up for an additional MultiSafepay account.\nAdding websites   Sign in to your MultiSafepay dashboard.\n  Go to Settings \u0026gt; Website settings.\n  Click either:\n  Quick add website    From the Category list, select what type of products or services your website sells. In the Description field, enter the website name.\nNote: If relevant, this is displayed on MultiSafepay payment pages and the customer’s bank statement. In the Base URL field, add the website’s URL. This must be the URL where you receive payments. If you want to receive status updates via webhook, in the Notification URL field, enter a URL for us to send them to. Click Save.    Or, for more advanced configuration:   Website wizard    Enter the website URL in the Full website URL field, or select it from the Select existing site list, and then click Continue. From the Website platform list, select your ecommerce platform.\nYou are prompted to install the MultiSafepay ready-made integration for your ecommerce platform in your website. From the Category list, select the type of products and/or services you sell from this website, and then click Continue. If you want to receive status updates via webhook, in the Notification URL field, enter a URL for us to send them to. In the Description field, enter your company name, and then click Continue.\nNote: If relevant, this is displayed on MultiSafepay payment pages and the customer’s bank statement.\nA template of your payment page is generated. Customize the template as required.  To toggle the view of the payment page, click:  List view to see all payment methods in a list Detail view to display one detailed box for entering payment details and collapse all other payment methods API view code to view the code   To replace the MultiSafepay logo in the top-left corner, after completing the wizard, upload your own logo under Settings \u0026gt; Payment page templates. To hide the MultiSafepay logo in the top-left corner, on the lefthand side under Settings, select the Hide main logo checkbox. On the lefthand side, under Header, Body, Container, Cart, Payment form, and Buttons, you can change the color of the background, text, lines, and links in different parts of the payment page. To clear your changes and start again, click Reset style.   To set this payment page as your default template, select the Set as default template checkbox. In the Save template as field, enter a name for this template.  Your account is now linked to your website.     The Website settings page contains your:\n Site ID Secure code API key    Copy the API key to start building your integration. The API key also lets you monitor transactions, configure payouts, generate reports, and more.\n  Note: Website names are displayed on MultiSafepay payment pages and, for some payment methods, on the customer’s bank statement (if supported by their bank).\nViewing the site ID, API key, and secure code To view the site ID, API key, and secure code for a website:\n  Sign in to your live or test MultiSafepay dashboard.\n  Go to Settings \u0026gt; Website settings.\n  Click on the relevant website to view the Website details page.\n  Connecting websites to your backend To connect a website to your backend, enter the required details:\n  Most ready-made integrations: Your site ID, API key, and secure code, and account ID (top-right corner of your dashboard)\n  Self-made integrations: The API key under Website settings in your account\n  The connection is finalized. To validate the connection, place a test order.\nDisplaying your company name You can specify how your company name appears on customer bank or credit card statements and on MultiSafepay payment pages, or choose to display an alias instead. Customers may prefer this if you offer adult products.\nTo set how your company name displays, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Website settings. In the Name field, enter the name to display (maximum 35 characters). Click Save.  Deleting websites To delete a website from your account, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Website settings. For the website you want to delete, click the green Enabled button in the right most column. In the Disable payments dialog, click Delete.  ","tags":null,"title":"Websites","uri":"https://docs.multisafepay.com/account/websites/"},{"categories":null,"content":"Your MultiSafepay account can have an unlimited number of authorized users. All users on one account share the same secure code. You can disable but not delete users.\n  User permission profiles      User Permissions     Administrator Access all functionalities   Basic View all transactions Generate payment links   DisableBalance Cannot view the account balance   Refund Create refunds View all transactions Generate payment links   Reporting View all transactions and the account balance Create and download reports Generate payment links   Technical View all transactions Add and edit websites and payment pages Edit email templates Resend offline actions   Uncleared View all transactions Accept or decline uncleared transactions      Adding users   Adding users to your account    Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; User management. Click Add new user in the top right corner. Enter the new user\u0026rsquo;s:  User name Full name Password Email address   From the Status list, select Active. Under Rights on the right side of the page, select the appropriate user permissions check boxes. See User permissions overview below. Click Add user in the top-right corner.    Two-factor authentication Two-factor authentication (2FA) is an optional, additional layer of security for data in your MultiSafepay account. It is supported in every country.\nWhen enabled, users must verify their identity with a password, and a 6-digit token generated in the user\u0026rsquo;s MultiSafepay mobile app for every sign in.\n You can only connect a mobile device to one user, and each user to only one mobile device. After 5 unsuccessful token inputs, the user\u0026rsquo;s account is blocked and can only be unblocked by an administrator. If a user loses their 2FA device, disable and re-enable 2FA on their account.   Download the MultiSafepay app for:\n Android devices from Google Play Apple iOS devices from the App Store    Enabling 2FA Only administrators can enable 2FA.\n  Enabling 2FA    Sign in to your MultiSafepay dashboard. Go to User management. Click the name of the user you want to enable 2FA for. On the User details page, from the Two-factor list, select Enable. Click Save changes.    Configuring 2FA Users must then configure 2FA the first time they sign in to the dashboard after 2FA is enabled.\n  Configuring 2FA    Sign in to your MultiSafepay dashboard on your laptop or PC.\nA dialog requesting a 6-digit token appears. In the MultiSafepay app, tap More in the bottom-right corner. Tap Authenticator. Copy the 6-digit token (remains visible for 30 seconds) from your mobile device to the 2FA dialog on your computer or laptop.     Support Email support@multisafepay.com   ","tags":null,"title":"Account users","uri":"https://docs.multisafepay.com/account/users/"},{"categories":null,"content":" Magento 1 is end-of-life. We recommend upgrading as soon as possible.   This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with Magento 1.\nMultiSafepay supports most Magento functionalities. For any questions, email integration@multisafepay.com\n  Requirements    MultiSafepay account Magento Open Source 1.7 - 1.9 Tested on PHP 7.0      Support    Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue Magento Slack channel #multisafepay-payments  Our Magento 1 plugin is professionally supported by a certified Magento 1 Solution Specialist and receives regular updates to support the latest features provided by Magento and MultiSafepay.\n  Installation These instructions are for SFTP upload. You can also install via .ZIP file upload in Connect.\n Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.    Unpack the content of the .ZIP file in the root of your webshop. Sign in to your Magento 1 backend. Go to System \u0026gt; Configuration \u0026gt; Cache, and clear your invalid cache. Move all files and folders from Plugin_Magento_x.x.x to the root. Add the content of the app, lib, and media folders to the existing folders with the same name. Sign out.  Configuration  Sign in to your Magento 1 backend. Go to System \u0026gt; Configuration \u0026gt; MultiSafepay x.x.x \u0026gt; Connect settings.\nThis page contains all main settings and is used for all gateways and gift cards.\nTo find your API key, see API key.\nFrom version 3.0.0, the plugin only needs your API key. Your account ID, site ID, and site secure code are no longer needed. To configure your selected payment methods, go to System \u0026gt; Configuration \u0026gt; MultiSafepay x.x.x:  Connect MultiSafepay gateways MultiSafepay gift cards\nMake sure you have activated the payment methods in your MultiSafepay dashboard.    User guide Checkouts The plugin is compatible with most Magento 1 checkouts. However, we cannot guarantee that all checkout features will function properly.\nWe test the plugin with Magento 1 core checkout and OneStepCheckout.com (Idev).\nNote: Always test OneStepCheckout to make sure it is compatible with your configuration of the plugin.\nCurrencies The default currency is EUR.\n  Changing the default currency    Sign in to your Magento 1 backend. Go to System \u0026gt; Configuration \u0026gt; MultiSafepay x.x.x \u0026gt; Connect settings. Under Allow currency conversion to Euro, change to No.    Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways    Sign in to your Magento 1 backend. Go to System \u0026gt; Configuration \u0026gt; MultiSafepay \u0026gt; Connect gateways \u0026gt; Generic 1/2/3. Set the relevant payment method gateway IDs and the gateway label. Set how to display the payment method logos. For pay later methods, set whether to include the shopping cart.  Generic gateways support:\n All payment methods (filter by country, and minimum/maximum amount) Split payments, Second Chance reminders and virtual IBANs Refunds Backend orders Redirect requests only  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Pay later orders The status of all complete orders automatically changes to Shipped in order to collect funds from pay later payment methods.\n  Disabling Klarna checkout fields   Klarna requires the customer\u0026rsquo;s gender and date of birth. By default, the customer enters their birthday in the Magento checkout in the Klarna payment method fields, and their gender is automatically populated by the core Magento field.\nYou can disable both fields in the checkout. The customer enters this information on the MultiSafepay payment page instead.\nDisabling Klarna checkout fields\nThis change is only for Magento developers. We recommend testing the change and placing it in your local folder.\n Open app\\code\\community\\MultiSafepay\\Msp\\Model\\Gateway\\Klarna.php. Comment this line protected $_formBlockType = 'msp/klarna'; Save the file. Clear your cache. Test the change.    Payment methods   Payment methods    Cards: All except V Pay Banking methods: All, except TrustPay Pay later methods: All Wallets: Alipay, Apple Pay, PayPal Prepaid cards:  Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Good4fun Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Picquer   Enabling compatibility with Picquer   To make the MultiSafepay Magento 1 plugin compatible with Picqer, follow two additional steps, because orders must not receive Cancelled status.\n In your Magento 1 backend, go to the MultiSafepay Connect settings. Link Expired status to Waiting status. Open app\\code\\community\\MultiSafepay\\Msp\\Model\\Base.php, and then copy the file to the local folder in the Magento structure. Find the line $order \u0026gt; cancel(); at the expired signal and remove it.  All expired orders retain Waiting status until you cancel them:\n Manually With a custom cronjob Using a plugin    Recurring payments   Enabling recurring payments    Sign in to your Magento 1 backend. Go to Stores \u0026gt; Configuration \u0026gt; MultiSafepay \u0026gt; MultiSafepay settings.  For more information, see Recurring Payments.\nCredit cards Recurring Payments are not available for the generic credit card gateway. You must enable the Visa, Mastercard, and/or Maestro gateways separately. This displays the Save card option at checkout.\n  Refunds   Refund rules            MultiSafepay dashboard Full refunds (may not appear in your backend)   Backend - Full refunds and credit memos - You can\u0026rsquo;t refund more than the original amount   Pay later methods You can only refund a selected item from the order, not a set amount. If you enter an amount instead of selecting an item, the entire order is refunded.        Processing backend refunds    Sign in to your Magento 1 backend. Go to System \u0026gt; Configuration \u0026gt; MultiSafepay \u0026gt; Connect settings. Check that you have:  Entered an API key Enabled the Credit Memo option   Search for and open the order you want to refund. Click the Invoices tab on the left of the Order overview. Open the invoice, and click Credit memo at the top right of the overview. Enter the refund amount, and then click Refund online to send the request to MultiSafepay.    Surcharges You can:\n Apply surcharges of a percentage or a fixed amount to transactions for every payment method. Set the tax class for surcharges. Show transaction amounts excluding the surcharge at checkout. Surcharges are always included at checkout. Show surcharges with our without VAT at checkout.    Applying surcharges in your backend    Sign in to your Magento 1 backend. Select systems and configuration. In the MultiSafepay module, select the Option connect gateway. Select the relevant payment method. Under Payment fee amount, enter a surcharge percentage or fixed amount. Place a test order to verify whether the fee has been correctly processed.     Attention Dutch merchants We strongly recommend not applying surcharges to pay later methods. This is now considered providing credit under the Wet op het consumentenkrediet and article 7:57 of the Burgerlijk Wetboek, and requires a permit from the Authority for Financial Markets (AFM).   Updates You can update the plugin in your Magento 1 backend or the CMS marketplace, or via SFTP.\n  Updating via SFTP    Make sure you have a backup of your production environment, and that you test the plugin in a staging environment. Download the plugin again above. Follow the Installation and configuration instructions from step 2.    Upgrading Magento 1 is end-of-life. If you are still running Magento 1, action is required. MultiSafepay has partnered with Mage One to continue supporting Magento 1.\nFor more information and instructions, see MultiSafepay blog – Magento 1: The final weeks.\n","tags":null,"title":"Magento 1 plugin","uri":"https://docs.multisafepay.com/magento-1/"},{"categories":null,"content":"This report provides an overview (in Excel or PDF format) of all transactions within a specific timeframe, including:\n Fees Amount and currency Websites    Generating transaction summaries    Sign in to your MultiSafepay dashboard. Go to Reports \u0026gt; Transaction summary. Under Report settings \u0026gt; in the From and To fields, enter the start and end dates of the period you want the report to cover. Under Extra, specify any other relevant parameters:  Currency field: Select the relevant currency. Status field: Select the order or transaction status, if relevant Payment method field: Select the relevant payment method. Website field: Select the relevant website. Group field: Specify if you want to group costs by Site, Payment method, or Country. To group all transactions and only show the daily total, select the Show per day checkbox.   Click Generate report.    ","tags":null,"title":"Transaction summary","uri":"https://docs.multisafepay.com/reports/transaction-summary/"},{"categories":null,"content":"After integrating the payment component, the default user interface (UI) styling is applied.\nYou can customize the styling to match your brand\u0026rsquo;s visual identity, including fonts, colors, and layout.\nCustomizing the UI To edit the default styling of the component:\n Select each CSS class you want to edit. Add the relevant CSS properties and set the values.  CSS class selectors   CSS class selectors      CSS class What it does     .msp-container-ui Selects the payment component   .msp-ui-payment-form Selects the payment form   .msp-ui-method-header Selects the payment .msp-ui-method-image and heading   .msp-ui-method-image Selects the payment method logo   .msp-ui-form-group Contains the .msp-ui-form-control and .msp-ui-form-label   .msp-ui-form-label Selects the field labels in the payment form   .msp-ui-form-control Selects the fields in the payment form   .msp-ui-row Contains two .msp-ui-col-2 elements   .msp-ui-col-2 Contains .msp-ui-form-group   .msp-ui-separator Selects the space before and after the form fields       Example Add the following to your CSS to edit the payment component to add a:\n 5-pixel border-radius to the form fields Shadow to the fields on focus 10-pixel border-radius to the component container Light grey background-color to the component container  .msp-ui-form-control { border-radius: 5px } .msp-ui-form-control:focus { box-shadow: 0 7px 7px rgba(0, 15, 45, 0.2) } .msp-container-ui { border-radius: 10px; background-color: #f8f9fa; } \nThe payment component now looks like this:\n  Overview\nPayment components\n    ","tags":null,"title":"Customizing payment components","uri":"https://docs.multisafepay.com/payment-components/customization/"},{"categories":null,"content":"This page describes the financial report and financial summary.\nFinancial report This report provides an overview (in Excel or CSV format) of:\n Paid/unpaid transactions within a specific timeframe and transaction fees Refunds, chargebacks, reversals Payouts Currency conversions    Report contents      Columns Description     ID MultiSafepay\u0026rsquo;s transaction reference number   Merchant ref Your transaction reference number   Created The date the transaction was initiated   Completed The date the funds were settled in your MultiSafepay balance   Site The website where the customer placed the order   First name The customer\u0026rsquo;s first name   Last name The customer\u0026rsquo;s last name   Description A description of the order   Currency The currency of the transaction   Amount The amount of the transaction   Payment type A MultiSafepay fee, or the payment method   Payment status The transaction status        Generating financial reports    Sign in to your MultiSafepay dashboard. Go to Reports \u0026gt; Financial report. In the Between and And fields, enter the start and end dates of the period you want the report to cover. In the Cost grouping list:  No grouping: Show only the total of all MultiSafepay transaction fees for the selected timeframe. Single entry for all costs: List each MultiSafepay fee below the matching transaction.   Click Generate report.    Financial summary This report provides an overview (in Excel or PDF format) of revenue and fees for:\n Payment methods Refunds, chargebacks, reversals Transactions    Report contents      Headers Description     Report created The date the report was generated   Merchant ID Your MultiSafepay account number and merchant name   Currency The currency of transactions   Date from The start date of the period the report covers   Date till The end date of the report period   Group refunds Whether you have grouped refunds together   Columns Description   Description Payment method/refunds/chargebacks/reversals/transaction fees, broken down by revenue and cost   Column 1 The transaction fee   Number The number of transactions   Debit The total amount debited   Credit The total amount credited   Net income The total revenue minus costs        Exclusions   The report does not include:\n Payouts (see payout report) Monthly transaction fees VAT (see VAT invoices)      Generating financial summaries    Sign in to your MultiSafepay dashboard. Go to Reports \u0026gt; Financial summary. Under Options \u0026gt; in the Date field, enter the start and end dates of the period you want the report to cover. Under Currency, select the relevant currency. Click Generate report.    ","tags":null,"title":"Financial report and summary","uri":"https://docs.multisafepay.com/reports/financial-report-summary/"},{"categories":null,"content":"MultiSafepay offers a wide range of payment methods.\nYou can enable payment methods for your account yourself in your dashboard, but for some you need to apply to MultiSafepay first. Other methods with specific requirements follow their own activation flow.\n   Activation flow Payment methods     Apply to MultiSafepay Cards and wallets (except PayPal), Dotpay, in3, Pay After Delivery, SEPA Direct Debit   Enable in dashboard Banking methods, E-Invoicing   Own flow AfterPay, Betaal per Maand, Klarna, Edenred, gift cards, Paysafecard, PayPal     If you use a ready-made integration, first check that the payment method is supported. Once the method is activated, also enable it in your backend.   Apply to MultiSafepay  Email a request to risk@multisafepay.com   Cards, Apple Pay, and Google Pay   Include in the request your:\n Average, minimum, and maximum transaction amount Annual turnover      SEPA Direct Debit    Include in the request the following information:  Monthly and annual SEPA Direct Debit transaction volume Minimum and maximum transaction amount Type of products sold using this payment method Whether you want to accept recurring payments Whether any subscriptions are monthly, quarterly, or annual   Depending on the details provided, we may ask for additional information. We send you an agreement to sign and email back to us.     We check your eligibilty and if approved, activate the payment method for your account. Once approved, enable the method in your dashboard as below.  Enable in dashboard  Sign in to your MultiSafepay dashboard. Go to Settings. To enable the payment method for:  All sites, go to Payment methods. A specific site, go to Website settings, and click the relevant site.   Select the checkbox for the relevant payment method, and then click Save changes.  Note: If the payment method isn\u0026rsquo;t visible in your dashboard, email integration@multisafepay.com\nOwn flow AfterPay   AfterPay activation     To check you are eligible for AfterPay, email sales@multisafepay.com\n  For new AfterPay clients, apply directly to AfterPay:\n   The Netherlands: Offerte Belgium: Offerte aanvragen  For existing AfterPay clients, to activate AfterPay for your MultiSafepay account, email AfterPay Sales at sales@afterpay.nl    Betaal per Maand   Betaal per Maand activation   You must:\n Have a MultiSafepay account Be registered with a Dutch Chamber of Commerce (no exceptions) Have an annual turnover of more than 500,000 EUR (unless agreed otherwise with Betaal per Maand) Sell products or services to European citizens with a residential or delivery address in the Netherlands (no exceptions) Connect to MultiSafepay via our API or ready-made integrations   Email a request to sales@multisafepay.com In the request, let us know if you already have a Santander account. If you don\u0026rsquo;t, we\u0026rsquo;ll submit an application for you. We check your eligibility and type of connection. Once approved, we activate the payment method for your account.    Edenred   Edenred activation    Fill out the Edenred – Registreer mijn website form, selecting the relevant checkbox for each voucher you want to offer. Sign a contract with Edenred. They\u0026rsquo;ll give you an Edenred Merchant ID. Email your Edenred Merchant ID to sales@multisafepay.com We activate the payment method for your account.    Gift cards   Gift cards activation    To check your eligibility, email sales@multisafepay.com Send a request to the card issuer, providing your company details and MultiSafepay account ID. The issuer connects you to the card via either:   Intersolve (majority of gift cards) Fashioncheque 123TCS  The issuer sends us the connection details and we activate the card for your account.    Klarna   Klarna activation   Test account\n At Klarna.com, sign up for a test account, selecting the Playground environment. Under Settings, click Generate new Klarna API credentials to generate a user name and password. Email these credentials to sales@multisafepay.com MultiSafepay connects to Klarna.  We recommend testing Klarna payments via the Klarna Portal to experience the full functionality. You can also test from your test MultiSafepay dashboard with more limited functionality.\nLive account\n Sign up for a live Klarna account:   Via the Klarna website, selecting the Production environment, or Email your Klarna account manager or verkoop@klarna.com  Specify MultiSafepay as your payment service provider and the countries you want to activate Klarna for. Sign an agreement with Klarna, including pricing. We activate Klarna for your MultiSafepay account. If using a ready-made integration, activate Klarna in your backend.  For questions, see Klarna – Klantenservice.\nFor support, email integration@multisafepay.com\n  PayPal   PayPal activation   Configuring your PayPal account\nTo configure your PayPal account, follow these steps:\n Sign in to your business account at Paypal.com. Mouse over your account name in the top-right corner, and then select Account settings. On the Account access tab, under API access, click Update. Under Pre-built payment solution, click Grant API permission. In the Third-party permission username field, enter paypal_api1.multisafepay.com. Click Lookup. Select the checkboxes of the relevant permissions:  Use Express Checkout to process payments. Issue a refund for a specific transaction. Process your customers' credit or debit card payments. Obtain information about a single transaction.    To complete the configuration, change the language encoding setting of your PayPal account to UTF-8:\n Click PayPal – Profile language encoding. Next to Language coding for PayPal buttons, click Edit. From the list, select Western European languages (including English). Click More options. From the Encoding list, select UTF-8. Select the Yes checkbox, and then click Save.  Support\n Email integration@multisafepay.com PayPal – Contact us   Known issue: If your PayPal business account isn\u0026rsquo;t yet fully verified or approved, you might get a PayPal error 10002: Restricted account.   Configuring your MultiSafepay account\nTo configure your MultiSafepay account for PayPal, follow these steps:\n Sign in to your business account at Paypal.com. Mouse over your account name in the top-right corner, and then select Account settings. On the Business information tab, copy your PayPal Merchant ID. Sign in to your MultiSafepay dashboard, and then go to Settings. To activate PayPal for:    All your sites:\n Go to Payment methods, and then select PayPal. In the PayPal Merchant ID field, paste your ID, and click Save changes.    A specific site:\n Go to Website settings, and click the relevant site. Under Payment methods, select the PayPal checkbox, and click Save changes.    Notes:\n You can link each site to a separate PayPal business account, or all sites can use your main PayPal business account. If PayPal isn\u0026rsquo;t visible as a payment method in your dashboard, email integration@multisafepay.com  Your account is now configured!\nWe strongly recommend testing transactions before processing live payments.\n  Paysafecard   Paysafecard activation   Paysafecard doesn\u0026rsquo;t require activation.\nSearch for outlets that sell Paysafecard:\n English-language site: Find sales outlets Dutch-language site: Verkooppunten zoeken  For any questions, email sales@multisafepay.com\n  ","tags":null,"title":"Payment methods","uri":"https://docs.multisafepay.com/account/payment-methods/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with WooCommerce, a free, open-source ecommerce platform for Wordpress.\n  Requirements    MultiSafepay account Wordpress 5.0 PHP 7.2      Support   Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation  We recommend first installing the plugin in a test environment, following the WooCommerce installation procedure. Always make a backup.   There are two ways to install the plugin:\nManual installation\n Click the Download button above. Sign in to your WooCommerce backend. Go to Plugins \u0026gt; Add new. Click Browse file. Upload the Plugin_WooCommerce_x.x.x.zip file.  Wordpress installation\n Sign in to your WooCommerce backend. Go to Plugins \u0026gt; Add new. Search for MultiSafepay. For the MultiSafepay plugin for WooCommerce, click the Install now button.  Configuration  Sign in to your WooCommerce backend. Go to WooCommerce \u0026gt; MultiSafepay settings On the Account tab, enter your API key. On the Order status tab, confirm the match between WooCommerce order statuses and MultiSafepay order statuses, and then click Save changes. On the Options tab, confirm your settings, and then click Save changes. On the WooCommerce \u0026gt; Settings \u0026gt; Payments. Enable the relevant payment methods and confirm the settings.  User guide Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways    Sign in to your backend. Go to Settings \u0026gt; Payments tab \u0026gt; Generic gateway. Set the relevant payment method gateway IDs, and the gateway logo and label. For pay later methods, include the shopping cart in refunds.  Generic gateways support:\n All payment methods (filter by country, and minimum/maximum amount) Split payments, Second Chance reminders and virtual IBANs Redirect requests only Custom initial order statuses Full and partial refunds (except for pay later methods) Backend orders  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Languages MultiSafepay payment pages and messages to customers (e.g. Second Chance emails, links, order confirmations) are supported in several languages.\nHowever, WooCommerce only supports the language of your ecommerce platform, irrespective of the customer\u0026rsquo;s language or country, or the language of the webshop (if you use a third-party plugin for a multi-lingual webshop).\n  Changing language   The plugin sets the language for payment pages and messages based on the Wordpress locale code get_locale() function.\nTo change this behavior, use the multisafepay_customer_locale filter hook in our plugin.\nAsk your developer to read WordPress Developer Resources - Filters in Wordpress. Example implementation:\nadd_filter('multisafepay_customer_locale', 'return_my_own_locale'); function return_my_own_locale($locale) { // Your conditions and logic to return a valid locale code return $custom_locale; }    Notifications   MultiSafepay webhook   MultiSafepay uses a webhook to send you updates about orders and other notifications.\nThe webhook is triggered when the order or transaction status changes, e.g. when:\n A customer completes payment. A customer\u0026rsquo;s attempt to pay fails. You process a refund.  From WooCommerce version 4.7.0, notifications are sent via POST requests, instead of GET requests.\nHowever, sometimes the REST endpoint used to process notifications may be blocked by a firewall at server level, or by some WordPress plugins at application level. In this case, ensure you include MultiSafepay requests on your allow list.\nFor more information, see Webhook.\n  Order requests   Modifying order requests   To change something in an OrderRequest before a transaction is processed, use the multisafepay_order_request filter hook in the plugin.\nFirst, read the following:\n Wordpress – Filters in Wordpress MultiSafepay GitHub – MultiSafepay PHP-SDK  Example of how to implement and overwrite the shopping cart:\nadd_filter('multisafepay_order_request', 'return_my_multisafepay_order_request'); function return_my_own_locale( \\MultiSafepay\\Api\\Transactions\\OrderRequest $order_request) { // Your conditions and logic to return a valid order request // Register a CartItem $shopping_cart_items = array(); $cart_item = new \\MultiSafepay\\ValueObject\\CartItem(); $cart_item-\u0026gt;addName( 'The product name' ) -\u0026gt;addQuantity( (int) 1 ) -\u0026gt;addMerchantItemId( (string) 'SKU' ) -\u0026gt;addUnitPrice( \\MultiSafepay\\WooCommerce\\Utils\\MoneyUtil::create_money( (float) 10.00, (string) 'EUR' ) ) -\u0026gt;addTaxRate( '21' ); $shopping_cart_items[] = $cart_item; // Register the CartItem in the ShoppingCart $shopping_cart = new MultiSafepay\\Api\\Transactions\\OrderRequest\\Arguments\\ShoppingCart($shopping_cart_items); // Overwrite the ShoppingCart $order_request-\u0026gt;addShoppingCart( $shopping_cart ); // Overwrite the total amount of the transaction $order_request-\u0026gt;addMoney(\\MultiSafepay\\WooCommerce\\Utils\\MoneyUtil::create_money( 12.10, 'EUR' )); return $order_request; }    Payment components The plugin supports payment components, which:\n Provide a seamless checkout experience to increase conversion. Encrypt customer payment details for secure processing. Shift responsibility for PCI DSS compliance to MultiSafepay.    Activating payment components   If you\u0026rsquo;re new to accepting credit card payments, email a request to activate them to sales@multisafepay.com\n Sign in to your Wordpress backend. Go to WooCommerce \u0026gt; MultiSafepay settings \u0026gt; Payment methods \u0026gt; Credit card, and then click Manage. Select the Payment components checkbox. Click Save changes.  For questions, email integration@multisafepay.com\nNote: If you have a custom checkout and encounter a conflict with the payment component, the Integration Team will do their best to provide support, but we can\u0026rsquo;t guarantee compatibility in all cases.\n  Payment links   Generating payment links in your backend   To generate a payment link in your backend once an order is created, follow these steps:\n Sign in to your WooCommerce backend. Go to WooCommerce \u0026gt; Orders \u0026gt; Add order. For instructions to register the order details, see WooCommerce - Managing orders. In Order actions panel, select the Email invoice / order details to customer option. Click Create order.\nAn email is sent to the customer containing the order details and a payment link. The payment link is also available to the customer in their private account, under Orders.    Payment methods   Payment methods    Cards: All (The credit card number field automatically detects the type of card (e.g. Visa) as the customer enters their card number.) Banking methods: All, except TrustPay Pay later methods: All Wallets: Alipay, Apple Pay, PayPal Prepaid cards:  Baby Cadeaubon Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Good4fun Goodcard Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Recurring payments You need to enable recurring payments in your MultiSafepay dashboard and then in the plugin settings.\nRefunds You can process full and partial refunds for all payment methods, except pay later methods for which you can only process full refunds.\nShipping orders For pay later orders, after shipment, you must change the order status from Completed to Shipped. This prevents the order expiring and triggers invoicing.\nIf you change the order status to Shipped in your backend, the updated status is passed to your MultiSafepay dashboard automatically.\nSurcharges You can apply surcharges in the plugin when combined with a relevant third-party package.\n  Applying surcharges with third-party packages   Third-party packages must follow WooCommerce and Wordpress development guidelines.\nSupport\nThe Integration Team will do their best to help you install third-party packages, but we can\u0026rsquo;t guarantee perfect compatibility.\nAttention Dutch merchants\nWe strongly recommend not applying surcharges to pay later methods. This is now considered providing credit under the Wet op het consumentenkrediet and article 7:57 of the Burgerlijk Wetboek, and requires a permit from the Authority for Financial Markets (AFM).\n  Updates You can update the plugin in your backend and the CMS marketplace, or via SFTP.\n  Updating in your backend   Notes: Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.\n Download the plugin again above. Follow the Installation and configuration instructions from step 2.    ","tags":null,"title":"WooCommerce plugin","uri":"https://docs.multisafepay.com/woo-commerce/"},{"categories":null,"content":"This page describes how partner account holders can manage the accounts of affiliated merchants.\nCreating affiliate accounts To create a new affiliate account in your dashboard, follow these steps:\n Sign in to your partner/primary account. Go to the affiliate dashboard, and then click Affiliates. In the affiliate dashboard top-right corner, copy the Partnerlink and send it to your affiliates. To customize a welcome email, go to Settings \u0026gt; Email templates. Click Add new template. Click Load default template. Edit the template and fill out the fields as required.  Onboarding and go live All affiliates must onboard and sign an agreement with MultiSafepay, containing general terms and conditions.\nYou can also automate onboarding affiliates via our API.\nFor any questions, affiliates can email partner@multisafepay.com\nAccessing affiliated accounts To access an affiliate\u0026rsquo;s account:\n Sign in to your partner/primary account. Under the Action column for the relevant merchant, click Sign in.  Here you can manage:\n Account ID and settings Company name and business model Registration data Phone number, email address Screening status and actions Transactions, refunds, and balance Technical integrations, reports, and other tools  Charging affiliates You can charge affiliates at three levels.\n         Partner/primary level Set fixed or percentage-based transaction charges for all affiliated merchant accounts.   Affiliate level Set fixed or percentage-based transaction charges for a specific affiliated merchant account. This overrides the partner/primary-level settings.   Transaction level Split incoming payments between multiple merchant and/or partner accounts. You can use this feature for both partner/primary and affiliate-level charges.    ","tags":null,"title":"Affiliated merchants","uri":"https://docs.multisafepay.com/account/affiliates/"},{"categories":null,"content":" We recommend upgrading to the latest version as soon as possible.   This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free app for integrating with Lightspeed.\n  Requirements    MultiSafepay account A MultiSafepay API key The app only supports one account per webshop      Support   Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation  Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.    Sign in to your Lightspeed backend. Go to Apps on the left-hand side of the dashboard. Search for the MultiSafepay payments app. Click on the app, and then on Install app in the top-right corner. In the dialog, approve the permissions required for the app.\nYou are redirected to Lightspeed – MultiSafepay: How to log in. In the Setup page:  Enter your email address, account ID and site API key. Select Test or Live environment, and click Save and continue.\nYou are redirected to the Settings page.   We recommend enabling:  Refunds MultiSafepay checkout scripts – Creates a list of iDEAL issuers, and suppresses Apple Pay for non-Apple devices.   Verify the other settings, and then click Save.  User guide API keys and environments   Changing API keys and environments   To change your API key or environment (live or test) after installation, follow these steps:\n Sign in to the app. Tap the hamburger menu and go to Environment. Edit your API key and/or the Environment.    Checkouts This app is tested using the default 1-step and 1-page checkout using the default theme.\n  Ordering payment methods in your checkout   To change the order in which payment methods appear on your checkout page, follow these steps:\n Go to Settings \u0026gt; Payment method settings. Drag and drop the payment methods to the preferred order. Click Save.  Setting payment method order per language\nTo set the payment method order for different languages, under the Payment method settings select a country / store language and set the order per language.\nIf no specific rule is set for a country, the Default order is used.\n  Internationalization   Changing internationalization   When changing internationalization in your Lightspeed eCom backend, do not change the primary language setting while installing the app.\nLightspeed eCom requires a language, an API key, and a cluster to validate API requests.\nIf you remove the language used during installation instead of deactivating it, the app cannot communicate with Lightspeed eCom services.\n  Lightspeed shop ID   Viewing your shop ID   To view your shop ID, follow these steps:\n Sign in to the /admin area of your Lightspeed app. Click Help in the bottom-left corner. A popup appears containing your shop ID (also known as the store ID).    Order amounts   Setting maximum/minimum order amounts   Setting a maximum/minimum order amount per payment method\nTo set a maximum/minimum order amount for a payment method to display on your checkout page, follow these steps:\n In the Payment methods ordering list, click the + button to open the relevant payment method. Enter an amount in EUR cents in the:  Maximum field, e.g. A maximum value of 1500 cents means the payment method only appears on the checkout page if the total order amount is less then 15 EUR. If you don\u0026rsquo;t want a maximum amount, enter -1. OR Minimum field, e.g. A minimum value of 1500 cents means the payment method only appears on the checkout page if the total order amount is more then 15 EUR.    Setting a maximum/minimum order amount per language\nTo set different maximum/minimum order amounts for different languages, under the Payment methods ordering header \u0026gt; Country list, select a country and set the maximum/minimum amount per language.\nIf no specific rule is set for a language, Default language is used.\n  Payment links When you generate a payment link in your MultiSafepay dashboard, you cannot update the transaction status or link it to a transaction in Lightspeed via our app. This is by design in Lightspeed.\nPayment methods   Payment methods    Cards: All Banking methods: All, except iDEAL QR and TrustPay Pay later methods: All Wallets: All Prepaid cards:  Baby gift card Beauty and Wellness gift card Bloemencadeaukaart Boekenbon Degrotespeelgoedwinkel Fashion Cheque Fashion gift card Fietsenbon Gezondheidsbon Goodcard Nationale bioscoopbon Nationale tuinbon Parfumcadeaukaart Sport en Fit VVV gift card Webshop gift card Wijncadeau Winkelcheque Yourgift    To use MultiSafepay payment method icons, see GitHub MultiSafepay icons.     Payment methods logos in your website footer   By default, the app does not support adding payment methods logos to your website footer. We provide a script for this, or you can ask your developer to add the logos to your theme. Themes can differ and you may need to make some changes for it to function.\nAdding logos via our script\n Sign in to your Lightspeed app. Go to Settings \u0026gt; Storefront payment icons. Click Copy to clipboard. In your Lightspeed admin area, go to Settings \u0026gt; Web extras and custom Javascript. Paste the script into the Javascript textbox, and set the status to Enable. Click Save. The logos appear in the footer.  Display order\nDepending on the storefront, the display order of the logos is determined by the settings at the time of generation. If you update these settings, you must update the script as well.\nSize\nBy default the logos are 16 px high. In most themes, footer logos are found in the \u0026ldquo;div.payment-methods p\u0026rdquo;. If needed, you can change the selector based on the theme.\nResizing logos\n In the JavaScript for displaying the logos, locate the following img element near the end of the script: \u0026lt;img src=\u0026quot;${msplt[e]}\u0026quot; alt=\u0026quot;${e}\u0026quot; /\u0026gt; Specify the height and width in pixels as required, e.g.: \u0026lt;img height=\u0026quot;16\u0026quot; width=\u0026quot;37\u0026quot; src=\u0026quot;${msplt[e]}\u0026quot; alt=\u0026quot;${e}\u0026quot; /\u0026gt;  Adding missing logos\nLogos may be missing due to your website theme settings.\nTo add missing payment method logos, follow these steps:\n Download the logos from our Github repo. Rename the file with upper case formatting, e.g applepay.png \u0026gt; APPLEPAY.png. Sign in to your Lightspeed app. Go to Design \u0026gt; Theme editor \u0026gt; Advanced \u0026gt; Edit code \u0026gt; Assets, and drop in the logos.  The logos won\u0026rsquo;t appear instantly. It takes a little time.\nJavaScript\nFor the best user experience, we provide some Javascript and images, e.g. to add a dropdown for iDEAL and MultiSafepay icons for other payment methods.\nSome user-added themes or scripts may cause issues, e.g. missing images for payment methods.\nFor assistance, ask your developer.\nAll payment methods still work if you don\u0026rsquo;t use the Javascript files.\n    Ordering payment methods in your checkout   To change the order in which payment methods appear on your checkout page, follow these steps:\n Go to Settings \u0026gt; Payment method settings. Drag and drop the payment methods to the preferred order. Click Save.  Setting payment method order per language\nTo set the payment method order for different languages, under the Payment method settings select a country / store language and set the order per language.\nIf no specific rule is set for a country, the Default order is used.\n    Disabling payment methods   You can disable payment methods in the Payment method settings list. The dot next to the payment methods is green when enabled, and grey when disabled.\nTo disable payment methods for specific languages, follow these steps:\n Sign in to your Lightspeed app. Select the relevant storefont. For each language, disable the relevant payment methods.  If no specific language rule-set is found, Default is used.\nMissing payment methods\nBy default, newly activated payment methods for your MultiSafepay account are disabled in the Lightspeed app\u0026rsquo;s MultiSafepay payments settings. You need to enable them in both environments.\nIf a payment method is missing:\n Sign in to your MultiSafepay dashboard and check that the payment method is enabled. Sign in to your Lightspeed app, go to Settings, and then enable the payment method again.      Removing payment methods   After terminating your contract with MultiSafepay, our payment methods may still be visible in your checkout.\n Sign in to your Lightspeed app. Go to Apps \u0026gt; Purchased apps \u0026gt; MultiSafepay payments. Click Go to app. Sign in to the MultiSafepay app. Click Disable all payment methods.    Payment reminders The Lightspeed app doesn\u0026rsquo;t support Second Chance emails because Lightspeed orders expire after 12 hours.\nLightspeed offers a functionality that lets you configure payment reminders and emails for orders with Pending status. For more information and instructions, see Lightspeed - Configuring payment reminders\nRefunds Full and partial refunds and credit notes are supported in your MultiSafepay dashboard and backend.\nYou can\u0026rsquo;t refund more than the original amount in your backend.\n  Enabling refunds in your backend    Sign in to your Lightspeed app. Go to Settings. In the sidebar, click Enable refunds. Select the relevant setting:  Refunds disabled (default) Refunds enabled:  Create a refund when the credit memo status is Unpaid (default when refunds are enabled). Always create a refund, no matter the credit memo status.      Notes\n  If you use Lightspeed eCom linked to Lightspeed Retail to process refunds via MultiSafepay, you must enable the Always create a refund, no matter the status setting.\n  When creating a credit memo, set the status to Not paid. If the Always create a refund, no matter the status setting is not enabled, MultiSafepay ignores Paid status.\n  Known issues\n  For refunds created in your Lightspeed backend, a short message appears in the Notes section of the order where any errors are explained.\n  Refunds created in your MultiSafepay dashboard are not reported back to Lightspeed. Under Offline actions, an error appears: \u0026ldquo;Already a completed transaction\u0026rdquo;.\n  Some pay later methods:\n Require product IDs for each refunded item. When using product variants, make sure each variant has a unique identifier. If you provide duplicate IDs, we cannot distinguish which items to refund. Do not let you refund a partial amount and a full item in a single request, e.g. a shopping cart contains 3 items for a total of 1.70 EUR. If you refund 1 item and 0.40 EUR, it fails. Make sure you refund items and amounts separately.    You cannot issue multiple refunds for the same amount within 5 minutes of each other, even for different items.\n  For any questions, email integration@multisafepay.com\n  Single sign-on Lightspeed single sign-on lets you sign in to the app\u0026rsquo;s Settings directly from the Lightspeed eCom store. You don\u0026rsquo;t need to click or tap the Login button.\n  Signing in with Lightspeed single sign-on    Sign in to the Admin section of your Lightspeed store. In the sidebar, click Apps. Click Purchased apps. In the sidebar, click Apps. Click MultiSafepay Payments, or to take you straight to the store page, paste /admin/store/apps/1517 after the base URL of your store. On the store page, click Go to app / Ga naar app.    Surcharges   Applying surcharges    Sign in to your Lightspeed app. Go to App \u0026gt; Purchased app \u0026gt; MultiSafepay app. Select the payment method you want to apply a surcharge to. Enter the surcharge amount as a:  Fixed amount under Flat payment fee, or Percentage under Dynamic payment fee.   Click Save.  Attention Dutch merchants\nWe strongly recommend not applying surcharges to pay later methods. This is now considered providing credit under the Wet op het consumentenkrediet and article 7:57 of the Burgerlijk Wetboek, and requires a permit from the Authority for Financial Markets (AFM).\n  Updates You don\u0026rsquo;t need to manually update the app.\nUpgrading to the new app   Upgrading to the new app   Upgrading to the new app\nTo upgrade from our deprecated core integration to the Lightspeed app, follow these steps:\n In the Lightspeed app manual, follow the steps to install the app. Place a test order to make sure it\u0026rsquo;s working properly. Open the core integration, and then disable the payment provider.  To access the MultiSafepay Payments app Settings page:\n You are automatically redirected after installing the app, or Select the MultiSafepay Payments app, and then click Go to app.  Disabling the core integration\nTo disable the core integration after migrating to the new app, follow these steps:\n Sign in to your Lightspeed backend. Go to Settings \u0026gt; Payment providers \u0026gt; MultiSafepay. At the top of the screen, click Disable this payment provider.  For any questions about the app, email integration@multisafepay.com\n  ","tags":null,"title":"Lightspeed","uri":"https://docs.multisafepay.com/lightspeed/"},{"categories":null,"content":"There are two statuses for each payment that update as it is processed.\nIn your MultiSafepay dashboard, go to Transaction overview, and then select the relevant transaction to open the Transaction details page. Under Status history, you can see the order status and transaction status:\nOrder status Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment).\nAPI attribute: status\nTransaction status Changes as the funds progress towards settlement in your MultiSafepay balance.\nAPI attribute: financial_status\nStatus meanings The meaning of statuses (or combinations of statuses) varies per payment method. To check specific meanings, see the relevant payment method page.\nThe table below sets out possible order and transaction statuses and what they commonly mean.\n   Description Order status Transaction status     The customer has initiated a transaction. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The transaction has been cancelled. Void Cancelled   The customer has requested a chargeback. Void Void   The customer didn\u0026rsquo;t complete payment and the transaction expired. Transaction expiry times vary per payment method. Expired Expired   The issuer or acquirer has declined the transaction. See also Declined credit card payments. Declined Declined   Manually authorize or decline the transaction. Uncleared Uncleared   Manually change the order status to shipped. Shipped Uncleared    Refunds and chargebacks    Description Order status Transaction status     Refund initiated. Initialized/Reserved Initialized/Reserved   Refund/chargeback complete. Completed Completed   The refund has been processed successfully. Refunded Refunded   The partial refund has been processed successfully. Partial_refunded Partial_refunded   The refund was declined. Declined Declined    If the status of the refund is Reserved, it may mean:  The refund hasn\u0026rsquo;t been processed yet. Refunds are passed to the customer\u0026rsquo;s bank at midnight on the day they are initiated, and then the status changes to Completed. The bank is now responsible for processing the payment. Refunds may be delayed by the issuing bank. The refund cannot be processed due to insufficient funds in your MultiSafepay balance. To top up your balance, see Topping up your balance.  ","tags":null,"title":"Payment statuses","uri":"https://docs.multisafepay.com/payments/payment-statuses/"},{"categories":null,"content":"This report provides an overview (in Excel format) of the specific transactions and fees per payout. It is helpful for matching payouts to specific orders or invoices for accounting purposes.\n  Report contents      Headers Description     Report created The date the report was generated   Merchant ID Your MultiSafepay account number and merchant name   Payout ID The reference number for this payout   Logic What time the payout was made   Date from The start date of the reporting period   Date till The end date of the reporting period   Payout currency The currency the payout was paid in   Columns Description   Created date The date the transaction was initiated   Completed date/time The date and time the transaction was completed   Mt status The transaction status   Mt order status The order status   PSP ID MultiSafepay\u0026rsquo;s transaction reference number   Amount The transaction amount in whole currency   Amount cents The transaction amount in cents   Creditdebit C means credit, D means debit   N code See N-codes for identifying payment methods   Payment type A MultiSafepay fee, or the payment method   Mt description A description of the transaction   Sub description A description of a component of the transaction, e.g. an issuer fee or currency conversion cost   Sub status The transaction status   Sub ID MultiSafepay\u0026rsquo;s transaction reference number   Ms description website name   Order ID Your unique identifier for the order   Var1/Var2/Var3 Additional information      Generating payout reports   Generating payout reports   To generate a payout report, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Finance \u0026gt; Daily balance. In the Daily balance overview page, under Payout transaction for the relevant date, click the green Excel icon.  Note: You must have completed at least one payout to generate a payout report.\n  Automating payout reports   Requesting automated reports   To request automated reports, email the following information to integration@multisafepay.com:\n Your account ID (top-right corner of your MultiSafepay dashboard) Method: SFTP Pull or Push request Frequency: Daily, weekly, or monthly Preferred time after 5:29 (based on Central European (Summer) Time (CET/CEST))  To view the autogenerated reports in your MultiSafepay dashboard, click the Messages icon in the top-right corner.\n    SFTP requests and requirements     SFTP:\n Pull request: We give you access to a MultiSafepay SFTP server. Push request: You give us access to your SFTP server.    We support SFTP with username/password and username/SSH keys.\n  For SFTP connections, we only support ports 22 and 2222.\n  Make sure our IP address is on your allow list. For a list of MultiSafepay IP addresses, email integration@multisafepay.com\n  To deliver the report using SFTP Push requests, you must support at least one of the following encryption algorithms on your SFTP server:\n sh-ed25519 rsa-sha2-512 rsa-sha2-256 ecdsa-sha2-nistp521 ecdsa-sha2-nistp384 ecdsa-sha2-nistp256 ssh-rsa       Support Email support@multisafepay.com   ","tags":null,"title":"Payout report","uri":"https://docs.multisafepay.com/reports/payout-report/"},{"categories":null,"content":" Urgent action required: Migrate to our updated app before March 31, 2022.   This technical manual is for installing/migrating to MultiSafepay\u0026rsquo;s free app for integrating with Shopify. This new app leverages a single, powerful gateway for a faster, safer integration.\n  Requirements   You will need a MultiSafepay account.     Support    Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com    Installation To install or migrate, follow these steps:\n For increased security and stability, wait for off-peak hours and temporarily enable password protection for your webshop. From the Shopify app store, install the MultiSafepay Payments app. Check that the app is successfully added under Admin \u0026gt; Settings \u0026gt; Payments \u0026gt; Alternative payment methods. In your Shopify checkout, test the MultiSafepay Payments gateway.\nNote: If using a test API key, make sure you also enable Test mode. For existing merchants, you must disable the deprecated individual MultiSafepay payment method gateways under Admin \u0026gt; Settings \u0026gt; Payments \u0026gt; Third-party payment providers. Once testing is complete, disable password protection again.  User guide Abandoned checkouts MultiSafepay\u0026rsquo;s Second Chance feature is not supported because Shopify offers a similar native service.\nSee Shopify – Recovering abandoned checkouts.\nCancelling payments If a customer cancels a payment to use another payment method instead, they must complete payment within 2 hours to avoid errors.\nCountries The app is unavailable in Norway and Finland.\nFor more information, email integration@multisafepay.com\nCurrencies Payments are processed in the webshop\u0026rsquo;s default currency only.\nDeprecated version   Installation and configuration     To install payment methods, use the relevant links. For each, click the Install button on the bottom right:\n Alipay American Express Bancontact Bank Transfer Belfius CBC/KBC Dotpay EPS Giropay iDEAL, iDEAL QR Maestro Mastercard PayPal Paysafecard Request to Pay SEPA Direct Debit Sofort Trustly Visa (including Cartes Bancaires \u0026amp; Dankort)    Sign in to your Shopify backend.\n  Go to Settings \u0026gt; Payment providers \u0026gt; Alternative payments.\n  Search for and click on the payment methods you have installed.\n  Enter your site ID and secure code.\n  Activate the payment method.\n  Note: To bundle all payment methods under a single MultiSafepay payment gateway at checkout, under Alternative payments, activate the MultiSafepay payment method.\n  Payment methods   Payment methods    Cards: All Wallets: Alipay, PayPal Prepaid cards: Paysafecard Banking methods:  Bancontact Bank Transfer Belfius CBC/KBC Dotpay EPS Giropay iDEAL and iDEAL QR Request to Pay Sofort Trustly      Reconciliation To match orders in your accounting system with your MultiSafepay account, use the MultiSafepay order ID and the Shopify payment ID.\nRefunds Full and partial refunds are supported in your MultiSafepay dashboard and backend.\nYou can\u0026rsquo;t refund more than the original amount in your backend.\n","tags":null,"title":"Shopify app","uri":"https://docs.multisafepay.com/shopify/"},{"categories":null,"content":"You can process payments in a large number of currencies, provided that they are:\n Supported by the specific payment method Enabled in your dashboard and in the settings of any ready-made integrations Correctly processed in the create order API request.  Payment methods All payment methods support: EUR (Euro)\nCredit and debit cards support:\n         AED (United Arab Emirates dirham) KRW (South Korean won)   AUD (Australian dollar) MXN (Mexican peso)   BRL (Brazilian real) MYR (Malaysian ringgit)   CAD (Canadian dollar) NOK (Norwegian krone)   CHF (Swiss franc) NZD (New Zealand dollar)   CLP (Chilean peso) PEN (Peruvian Sol)   CNY (Chinese yuan) PHP (Philippine peso)   COP (Colombian peso) PLN (Polish złoty)   CZK (Czech koruna) RON (Romanian leu)   DKK (Danish krone) RUB (Russian ruble)   GBP (Pound Sterling) SEK (Swedish krona)   HKD (Hong Kong dollar) SGD (Singapore dollar)   HRK (Croatian kuna) THB (Thai baht)   HUF (Hungarian forint) TRY (Turkish lira)   ILS (Israeli new shekel) TWD (New Taiwan dollar)   INR (Indian rupee) USD (United States dollar)   ISK (Icelandic króna) VEF (Venezuelan bolívar)   JPY (Japanese yen) ZAR (South African rand)     Important: JPY is a zero-decimal currency.\nFor decimal currencies, you provide the amount in cents, e.g. value for 10 EUR = 1000.\nFor zero-decimal currencies, provide the whole value only, i.e. value for ¥10 = 10.   For credit and debit cards, we can potentially support additional currencies on request. Email support@multisafepay.com\nPayouts You can make payouts in:\n         AUD (Australian dollar) HKD (Hong Kong dollar)   CAD (Canadian dollar) NOK (Norwegian krone)   CHF (Swiss franc) PLN (Polish złoty)   DKK (Danish krone) SEK (Swedish krona)   EUR (Euro) USD (United States dollar)   GBP (Pound Sterling)     Enabling currencies To view the currencies currently enabled for your account, in your dashboard go to Finance \u0026gt; Balance.\nTo enable new currencies, email support@multisafepay.com\nYou must also add a business bank account that supports the currency. Follow these steps to ensure transactions can be processed in that currency and no conversion is required:\n Sign in to your MultiSafepay dashboard. Go to Finance \u0026gt; Balance \u0026gt; Add bank account. Process a bank transfer in the new currency to confirm the business bank account.  Once your new business bank account has been approved by the Risk Team, you can process payouts without currency conversion.\nConverting currencies To convert other currencies to Euros (EUR) in your MultiSafepay dashboard, go to Finance \u0026gt; Currency conversion.\nTake into account the exchange rate and/or any other costs.\nFor any questions, email support@multisafepay.com\n","tags":null,"title":"Currencies","uri":"https://docs.multisafepay.com/account/currencies/"},{"categories":null,"content":"This report provides an overview (in Excel format) of all transactions:\n By payment method or country Declined, retried and completed, retried and completed with a different payment method Completed with Second Chance  To request a Second Chance report, email sales@multisafepay.com\n  Report contents      Column Description     Report created The date the report was generated   Merchant ID Your MultiSafepay account number   Date from The start date of the reporting period   Date till The end date of the reporting period   By payment method or country    Paymentmethod The payment method   Country The country where the transaction took place   Completed The number of completed transactions   Declined The number of declined transactions   Retry completed The number of transactions that were completed after retrying   Retry completed diff paymentmethod The number of transactions completed after retrying with a different payment method   Perc completed The percentage of all transactions that were successfully completed   Other sections    Created The time the transaction was created   Maintransaction MultiSafepay\u0026rsquo;s transaction reference number   Paymenttype The payment method   Country The country where the transaction took place   Email The customer\u0026rsquo;s email address   Merchant ID Your unique identifier for the order   Declined:    Reason Any reason why the transaction was declined   Retried and completed:    Result Any additional information about the transaction   Different payment method:    Original The original payment method   Retry The payment method used to retry   Result Any additional information about the transaction   Completed with Second Chance:    Amount The amount paid   Totals The total number of transactions, and total amount paid      ","tags":null,"title":"Second Chance report","uri":"https://docs.multisafepay.com/reports/second-chance/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with Shopware 6.\n  Requirements    MultiSafepay account Shopware 6.3.x, 6.4.x (Starter Edition supported)* Tested on PHP 7.2.0      Support   Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue Join the official Shopware 6 Slack channel Join the private MultiSafepays Shopware 6 Slack channel  For support for Shopware 6 Professional/Enterprise, email sales@multisafepay.com\n  Installation and configuration  We recommend first installing the plugin in a test environment, following the Shopware 6 installation procedure. Always make a backup.    Navigate to our Shopware 6 GitHub repository. Under Assets, download the latest release, which starts with Plugin_Shopware6_x.x.x.zip. Sign in to your Shopware 6 backend. Go to Settings \u0026gt; System on the left hand side. Select Plugins. Click Upload plugin at the top of the page, and then select the file you downloaded in step 2. When the plugin appears, make sure the Activated button is toggled. Click the \u0026hellip; (more) button, and then select Config. In the drop-down menu, select Test. In the API key field, enter your API key. Fill out the other fields as required.  Marketplace installation Get the free MultiSafepay plugin from the Shopware 6 marketplace and connect your webshop with your Shopware account.\nComposer installation Run the following command in the root of your Shopware root directory. Make sure the composer is installed on your hosting server.\ncomposer require multisafepay/shopware6 User guide Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways    Sign in to your Shopware 6 backend. Go to MultiSafepay settings. Set the relevant payment method gateway IDs.  Generic gateways support:\n All payment methods (filter by country, and minimum/maximum amount) Split payments, Second Chance reminders and virtual IBANs Redirect requests only  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Payment methods   Payment methods    Cards: All Banking methods: All, except iDEAL QR Pay later methods: All Wallets: Alipay, Apple Pay, PayPal Prepaid cards:  Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Recurring payments You need to enable recurring payments in your MultiSafepay dashboard and then in the gateway settings.\nRefunds Full and partial refunds except for pay later methods are supported in your MultiSafepay dashboard and backend.\nYou cannot refund more than the original amount in your backend.\n  Processing backend refunds    In your Shopware 6 backend, go to the Order details page. In the Refund field, enter the refund amount.    Updates You can update the plugin in your backend and the CMS marketplace, or via using SFTP.\n  Updating in your backend   Note: Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.\n Download the plugin again above. Follow the Installation and configuration instructions from step 3.    ","tags":null,"title":"Shopware 6 plugin","uri":"https://docs.multisafepay.com/shopware-6/"},{"categories":null,"content":"A payout is when you transfer funds from your MultiSafepay balance to your business bank account.\nYou can make payouts any time for 0,50 EUR each.\nBusiness bank accounts As part of your onboarding, you specify a business bank account to pay out to.\n  Add additional bank accounts   To add additional bank accounts to your account (once fully onboarded), follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Finance \u0026gt; Bank accounts. Click Add new bank account. Fill in the:  Account holder name IBAN   From the Currency list, select the currency of the bank account. Click Save. To verify the account, on the Business bank account page either:  Make a payment of 1 EUR from the business bank account via iDEAL or Bank Transfer to your MultiSafepay balance, or Upload a copy of a bank statement. Select the file, and then click Upload. Note: The company name on the bank statement must exactly match one of the trade names on your Chamber of Commerce extract.    MultiSafepay verifies the bank account within 5 business days. We only accept business bank accounts (no private bank accounts) that are registered to your official company name.\n    Deactivate a bank account   To deactivate a business bank account, email your request and account ID to risk@multisafepay.com   Automated and manual payouts You can schedule automated payouts on specific day, or make them manually.\n  Set up an automated payout   To set up a new automatic payout, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Finance \u0026gt; Payouts. Under Automatic withdrawals, click + Add. In the Automatic withdrawals window:  Under Select days, select a specific day of the week, or the end of the month. From the Select currency list, select the currency. If you want to schedule withdrawals only when your balance exceeds a specified amount, in the Withdraw when balance exceeds fields, enter the amount. If you want to specify a minimum amount to retain in your balance, in the Reserve amount fields, enter an amount. From the Select the account number list, select the business bank account number you want to transfer the withdrawal to.   Click Schedule payments.  Note: To schedule payouts for different currencies, you must have a MultiSafepay balance and an active business bank account for each currency.\n    Make a payout manually   To make a payout manually, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Finance \u0026gt; Payouts. Under Withdraw funds:  Select the currency. Enter an amount. Click Withdraw funds.   Check the details of the payout, and then click Submit. From the Select bank account list, select the business bank account number you want to transfer the withdrawal to. Click Continue.    Payout currencies The standard currency for automatic payouts is euros (EUR). For manual payouts, you can process other currencies if you specify a business bank account that can receive funds in that currency.\n  Supported currencies   You can make payouts in:\n AUD (Australian dollar) CAD (Canadian dollar) CHF (Swiss franc) DKK (Danish krone) GBP (Pound Sterling) HKD (Hong Kong dollar) NOK (Norwegian krone) PLN (Polish złoty) SEK (Swedish krona) USD (United States dollar)    Payout processing times The time taken to process payouts is determined by the Risk Team. The default payout delay is 1 day. Payouts may take up to three business days to arrive in your business bank account.\nPayment batches are not processed on weekends. That is, payouts initiated on Fridays are processed on Monday morning.\nNot all banks have instant payments and therefore may take extra time to process payments.\n  Bank holidays   On some bank holidays, banks don\u0026rsquo;t process outgoing payments.\nMultiSafepay pays out every business day of the year, but not on bank holidays. Delayed payouts are made the next business day.\nCheck the dates of local bank holidays. They may change each year.\n    Processing time for automatic payouts   Assuming default settings, if you schedule a payout on Monday, the payout batch includes all payments up to 23:59 hours on the Monday night. The payout batch is sent to MultiSafepay\u0026rsquo;s bank on Tuesday morning. Our bank processes the batch and transfers the pay out to your business bank account. You should receive the payout on Tuesday afternoon.     Processing time for manual payouts   The status of the pay out is Reserved for 24 hours before it is added to our bank’s payout batch in the morning. Then, the payout is transferred to your business bank account. Manual payouts usually take longer to process than automatic ones.   Exclusions You cannot make payouts if:\n  Your MultiSafepay account is not yet fully activated   You can process payments immediately after creating a MultiSafepay test account and adding your website. But MultiSafepay holds your funds in your MultiSafepay balance until your account is fully activated.\nTo check if your account is fully activated, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Finance \u0026gt; Payouts. If your account is not fully activated, a red bar appears at the top of the screen with a link to the page where you can upload the documents required to approve your account.  The Risk Team then checks and approves your account details and the information on your website. Once approved, we will send you an email that your account is fully activated.\n    Your MultiSafepay balance is negative   If your MultiSafepay balance is negative (e.g. due to refunds, chargebacks, or fees), payouts are paused until enough funds are available. Always set a \u0026ldquo;reserved balance\u0026rdquo; in your payout settings to prevent payout and/or refund delays.     Your payouts are deactivated   To check why we have deactivated payouts for your account, email risk@multisafepay.com   ","tags":null,"title":"Payouts","uri":"https://docs.multisafepay.com/account/payouts/"},{"categories":null,"content":"The sales and conversion reports help you find out:\n Who your customers are and where they\u0026rsquo;re from What payment methods and devices they use Your conversion rate per website  Sales report This report provides an overview (in Excel format) of the total revenue and/or number of transactions per:\n Customer country and device Day Payment method Site    Generating sales reports    Sign in to your MultiSafepay dashboard. Go to Reports \u0026gt; Advanced reporting \u0026gt; Site. Under Date, select the date range you want the report to cover. If relevant, specify one or two websites under Site and Site 2. To download, click XLS or XLSX.    Conversion reports This report provides insight (in Excel format) into your conversion rate.\nYou can filter by:\n Customer country and device Day Payment method Website    Generating conversion reports    Sign in to your MultiSafepay dashboard. Go to Reports \u0026gt; Advanced reporting \u0026gt; Credit cards conversion.  Under Date, select the date range you want the report to cover. Under Currency, select the relevant currency. Under Site and Site 2, specify one or two websites (if relevant).   To download, click XLS or XLSX. Click Execute report.    ","tags":null,"title":"Sales and conversion reports","uri":"https://docs.multisafepay.com/reports/sales-conversion-reports/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with Shopware 5.\n  Requirements    MultiSafepay account Shopware 5.6.x or 5.5.7 and above. Tested on PHP 7.0      Support   Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation and configuration  We recommend first installing the plugin in a test environment, following the Shopware 5 installation procedure. Always make a backup.    Sign in to your Shopware 5 backend. Go to Configuration \u0026gt; Plugin manager. Search for the MultiSafepay plugin and click Download now. Go to Configuration \u0026gt; Plugin manager \u0026gt; Installed. Search for the installed MultiSafepay plugin and click on the pencil icon. In the API key field, enter your API key. Fill out the other fields as required. Go to Configuration and select the required payment methods.  User guide Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways    Sign in to your Shopware 5 backend. Go to MultiSafepay settings. Set the relevant payment method gateway IDs. Upload a custom gateway image, if relevant. For pay later methods, specify whether to include a shopping cart.  Generic gateways support:\n All payment methods (filter by country, and minimum/maximum amount) Split payments, Second Chance reminders and virtual IBANs Redirect requests only  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Payment methods   Payment methods    Cards: All Banking methods: All Pay later methods: All Wallets: Alipay, Apple Pay, PayPal Prepaid cards:  Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Good4fun Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Refunds You can process full refunds for all Shopware 5 payment methods except pay later methods from your MultiSafepay dashboard and backend.\nYou cannot refund more than the original amount in your backend.\nSession data   Missing session data   Shopware 5 can remove sessions before the order is created in the backend. To prevent this, we recommend making the following changes to the config.php.\n'session' =\u0026gt; [ 'save_handler' =\u0026gt; 'db', 'gc_probability' =\u0026gt; 0, 'gc_divisor' =\u0026gt; 1000 ], For more information, see Shopware – Blocking transactions.\n  Shipping orders For pay later orders, after shipment, you must change the order status from Completed to Shipped. This prevents the order expiring and triggers invoicing.\nIf you change the order status to Delivered in your backend, the updated status is passed to your MultiSafepay dashboard automatically.\nTransaction and order numbers Shopware 5 generates an order number and a transaction number.\nThe order number is generated after the payment is completed (unlike most ecommerce integrations where it is generated at the beginning of the order).\nThe transaction number is generated when the transaction is initialized. MultiSafepay uses this number as the order ID in transactions.\nUpdates You can update the plugin in your backend or the CMS marketplace, or via SFTP.\n  Updating in your backend   Note: Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.\n Download the plugin again above. Follow the Installation and configuration instructions from step 2.    Upgrading to Shopware 6   Upgrading to Shopware 6   About Shopware 6\nShopware 6 is the latest version of the Shopware ecommerce platform. It maintains simplicity, but features a great new interface and functionalities, including:\n Sales Channels function that links to social shopping platforms (e.g. Facebook, Instagram), and supports mobile apps and POS systems Rule Builder that lets you set price rules per country, and supports multi-currency options, VAT rules, and delivery options, e.g. free delivery for orders above a specified amount Content management function that uses stylized blocks on Experience and Storytelling pages Text editor that is easier and more user-friendly  Shopware 5 phase out\nSupport for Shopware 5 will be phased out as follows:\n General support until mid-2024 Regular functional releases until mid-2021 Bug fixes and small releases until mid-2023 Security updates until mid-2024  MultiSafepay will continue to support Shopware 5 as long as it remains in the market.\nMigrating to Shopware 6\nFor instructions, see the Shopware migration manual.\nFor questions, email integration@multisafepay.com\n  ","tags":null,"title":"Shopware 5 plugin","uri":"https://docs.multisafepay.com/shopware-5/"},{"categories":null,"content":"This page describes invoices MultiSafepay generates for your records at month end.\nYou do not need to pay them separately.\nMerchant/primary account VAT invoices Merchant and primary account holders receive a monthly invoice for the total amount of VAT we deduct from your MultiSafepay balance at the end of each month.\nFor payment methods where MultiSafepay collects, we are required to charge VAT on processing fees.\nFor payment methods for which we do not collect, VAT is applied via the scheme to avoid double taxation. These transactions are included in invoices with zero VAT value.\nTo view VAT invoices in your MultiSafepay dashboard, go to Finance \u0026gt; Invoices.\n  Fees we charge VAT for      Type of fee When charged     Bank fees At month end   Interchange++ At month end   Payout fees During processing   Refund fees (Separated into collecting and non-collecting orders) During processing   Transaction fees During processing    Note: The transaction fee total is the sum of all processed and completed transactions within a specified timeframe plus the universal transaction fee agreed when you created an account with MultiSafepay)   Non-Dutch merchants If you are not registered as a Dutch company, you can request to shift standard Dutch VAT of 21% so that it\u0026rsquo;s not charged to you.\nYou must provide us your local VAT registration number. Email invoice@multisafepay.com\nExchange rates We always use our bank\u0026rsquo;s closing exchange rate from the previous day.\nThe exchange rate is not displayed on the invoice.\nTo calculate the rate, simply divide the EUR amount by the foreign currency amount (or the other way around depending on your target currency).\nPartner invoices Partner account holders receive invoices for total monthly:\n Payout fees (0,50 EUR per payout) Commission fees from affiliated merchants VAT (21%) – This amount is refunded to your balance  To request an invoice, email partner@multisafepay.com\nReceiving invoices via email To specify an email address for MultiSafepay to send invoices to, follow these steps:\n Sign in to your MultiSafepay dashboard. From the list in the right hand corner of your screen, click Contact details. In the Financial email field, enter the email address. Click Save.  If you do not specify an email address, we use the main business email address provided in your account.\n","tags":null,"title":"Invoices","uri":"https://docs.multisafepay.com/account/invoices/"},{"categories":null,"content":"Your MultiSafepay balance is the balance of funds held in your MultiSafepay account.\nTopping up your balance To add funds to your balance, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Finance \u0026gt; Fund account. Select the currency and amount you want to add to your balance. Select the payment method you want to use for the transaction. Click Send.  Viewing your daily balance To view your daily balance in your MultiSafepay dashboard, go to Finance \u0026gt; Daily balance.\nThere you can see your:\n Balance and closing balance date Payout amounts, transactions, and status Payouts sent to the bank Bank description IBAN and Swift Uncleared balance – If activated, see below.  Viewing your uncleared balance You can set your daily balance report to include the balance of uncleared transactions. This is particularly useful if you offer pay later and/or credit card payment methods.\nTo activate this feature in your daily balance report, email a request to sales@multisafepay.com\n","tags":null,"title":"MultiSafepay balance","uri":"https://docs.multisafepay.com/account/balance/"},{"categories":null,"content":" We are phasing out support for this plugin. We recommend migrating to our Prestashop 1.7 plugin as soon as possible.   This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with Prestashop 1.6.\n  Requirements    MultiSafepay account PrestaShop 1.6 Tested on PHP 7.0      Support   Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation and configuration  We recommend first installing the plugin in a test environment, following the PrestaShop 1.6 installation procedure. Always make a backup.    Unpack the contents of the .zip archive and upload the Modules folder via SFTP to the PrestaShop root directoy, merging the two folders. Sign in to your PrestaShop 1.6 backend. Go to Modules and services \u0026gt; Payments and gateways.\nNote: You must install and configure the MultiSafepay Core Module (MultiSafepay) because all payment methods require certain settings and/or the API key in the core module. In the next screen, proceed with the installation. Enter your API key, and then click Save. On the Payments tab, enable the relevant payment methods.  User guide Confirmation page   Skipping the confirmation page   PrestaShop 1.6 version 3.1.7 lets you skip the extra confirmation page so that the customer is redirected straight to the MultiSafepay payment page.\nThis is no longer supported from version 3.2.0. If you want to skip the extra confirmation page, you can download version 3.1.7. New features might be lost when downgrading.\n  Payment methods   Payment methods    Cards: All Pay later methods: All, except Betaal per Maand Wallets: Alipay, Apple Pay, PayPal Banking methods:  Bancontact Bank Transfer Belfius CBC/KBC Dotpay EPS Giropay iDEAL Request to Pay SEPA Direct Debit Sofort   Prepaid cards:  Beauty and Wellness gift card Boekenbon Degrotespeelgoedwinkel Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Good4fun Parfumcadeaukaart Paysafecard Sport en Fit VVV gift card Webshop gift card Wijncadeau Yourgift      Matching orders In Prestashop 1.6, the order ID is generated after the payment, which causes a mismatch with the order ID in your MultiSafepay dashboard. You can match orders using the transaction ID.\n  Viewing transaction IDs    Sign in to your Prestashop 1.6 backend. Go to Payment \u0026gt; Order details.    Payment links Payment links generated manually in your MultiSafepay dashboard don\u0026rsquo;t automatically create or update orders in your PrestaShop 1.6 backend.\nRecurring payments   Enabling recurring payments   To enable recurring payments, follow these steps:\n Sign in to your PrestaShop 1.6 backend. Go to Modules and services \u0026gt; Modules and services \u0026gt; MultiSafepay. Click Configure. Set the Tokenization field to YES. Click Save.    Refunds You can process full and partial refunds from your MultiSafepay dashboard.\nBackend refunds are not supported.\nSurcharges Surcharges are not supported by default.\n  Applying surcharges with BVK   To apply a surcharge or payment fee to a payment method, you can use the third-party BVK package.\nThe Integration Team will do their best to support you with installing BVK, but bear in mind that it is a third-party package. We can\u0026rsquo;t guarantee perfect compatibility.\nAttention Dutch merchants\nWe strongly recommend not applying surcharges to pay later methods. This is now considered providing credit under the Wet op het consumentenkrediet and article 7:57 of the Burgerlijk Wetboek, and requires a permit from the Authority for Financial Markets (AFM).\n  Thirty Bees For support for the Prestashop Thirty Bees fork, email integration@multisafepay.com\nUpdates You can update the plugin in your backend and the CMS marketplace, or via SFTP.\n  Updating via SFTP    Make sure you have a backup of your production environment, and that you test the plugin in a staging environment. Download the plugin again above. Follow the Installation and configuration instructions from step 2.    ","tags":null,"title":"PrestaShop 1.6 plugin","uri":"https://docs.multisafepay.com/prestashop-1-6/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with Prestashop 1.7.\n If you are still using the deprecated plugin, we recommend upgrading to the latest version as soon as possible.     Requirements    MultiSafepay account PrestaShop version 1.7.6 or higher PHP version 7.2 or higher  If you\u0026rsquo;re on PrestaShop 1.7.5 or lower, consider updating PrestaShop or use an older version (4.x) of our plugin which can be found in our PrestaShop GitHub repository.     Support   We support versions 1.7.6, 1.7.7, 1.7.8.\nTo use an older version of the plugin, see MultiSafepay GitHub – PrestaShop releases.\nContact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation  We recommend first installing the plugin in a test environment, following the PrestaShop 1.7 installation procedure. Always make a backup.    Sign in to your PrestaShop 1.7 backend. Go to Modules \u0026gt; Module Manager \u0026gt; Upload a module. Select the Plugin_PrestaShop.zip file, and then click Configure. Clear your cache.  Configuration  Sign in to your PrestaShop 1.7 backend. Go to Improve \u0026gt; MultiSafepay, and enter your API key. On the Payment methods tab, enable the relevant payment methods. Click Save.  User guide Backend orders In the previous version of the plugin, PrestaShop backend orders were only created for MultiSafepay orders with Completed status. Now, a backend order is created for every order attempt, that is for MultiSafepay orders with Initialized status.\nCheckouts The plugin supports the PrestaShop core checkout and is compatible with most premium themes, unless you have a custom checkout.\n  Supported third-party modules   The following third-party modules are supported:\n One Page Checkout PS The Checkout – Payment options must be set on separate pages in the plugin settings page.  The Integration Team will do their best to provide support for third-party plugins and premium themes. Email integration@multisafepay.com\n  Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways    Sign in to your Prestashop 1.7 backend. Go to Improve \u0026gt; MultiSafepay \u0026gt; Payment methods \u0026gt; Generic gateway. Set the relevant payment method gateway IDs and the gateway icon.  The generic gateway supports:\n All payment methods (filter by country, currency, customer group, and minimum/maximum amount) Split payments, Second Chance reminders and virtual IBANs Redirect requests only  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Order flows The plugin supports two flows for creating orders: before or after the transaction is completed.\n  Before flow   By default, order confirmation emails are sent before the payment is finalized.\nYou can disable this feature.\nThe status of abandoned payments changes to Cancelled.\n    After flow   Orders are created via a MultiSafepay notification to PrestaShop using the cart ID. After completing payment, the customer is redirected to your order confirmation page.\nIf the notification hasn\u0026rsquo;t been processed yet, a waiting page with a loader displays while the order is created.     Switching order flows   To change the flow you are using, follow these steps:\n Sign in to your PrestaShop 1.7 backend. Go to Improve \u0026gt; Module manager \u0026gt; MultiSafepay. In the MultiSafepay module, go to the General settings tab. In the Create order before payment field, select the flow. Click Save.    Order flows The plugin supports two flows for creating orders: before or after the transaction is completed.\n  Before flow   By default, order confirmation emails are sent before the payment is finalized.\nYou can disable this feature.\nThe status of abandoned payments changes to Cancelled.\n    After flow   Orders are created via a MultiSafepay notification to PrestaShop using the cart ID. After completing payment, the customer is redirected to your order confirmation page.\nIf the notification hasn\u0026rsquo;t been processed yet, a waiting page with a loader displays while the order is created.     Switching order flows   To change the flow you are using, follow these steps:\n Sign in to your PrestaShop 1.7 backend. Go to Improve \u0026gt; Module manager \u0026gt; MultiSafepay. In the MultiSafepay module, go to the General settings tab. In the Create order before payment field, select the flow. Click Save.    Payment components The plugin supports payment components, which:\n Provide a seamless checkout experience to increase conversion. Encrypt customer payment details for secure processing. Shift responsibility for PCI DSS compliance to MultiSafepay.    Activating payment components   If you\u0026rsquo;re new to accepting credit card payments, email a request to activate them to sales@multisafepay.com\n Sign in to your PrestaShop 1.7 backend. Go to MultiSafepay module \u0026gt; Payment methods \u0026gt; Credit card. Slide the Enable payment component radio button to Enabled. Click Save config.  For support, email integration@multisafepay.com\nNote: If you have a custom checkout and encounter a conflict with the payment component, the Integration Team will do their best to provide support, but we can\u0026rsquo;t guarantee compatibility in all cases.\n  Payment methods   Payment methods    Cards: All Banking methods: All Pay later methods: All Wallets: All Prepaid cards:  Baby Giftcard Beauty and wellness Boekenbon Degrotespeelgoedwinkel Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Givacard Good4fun Goodcard Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Recurring payments   Enabling recurring payments   To enable Recurring Payments, follow these steps:\n Sign in to your PrestaShop 1.7 backend. Go to Improve \u0026gt; Module manager \u0026gt; MultiSafepay. In the MultiSafepay module, go to the Payment methods tab. Select either the bundled credit cards gateway, or select specific credit cards. Set the Enable tokenization toggle to Enabled. Click Save.    Refunds Full and partial refunds are supported in your MultiSafepay dashboard and backend.\nPay later refunds are only supported in your dashboard.\n  Disabling API refunds   By default, refunds initiated in your backend are automatically processed via our API, except for voucher refunds.\nTo disable this, follow these steps:\n Sign in to your PrestaShop 1.7 backend. Go to MultiSafepay module \u0026gt; Manage hooks. Select Display non-positionable hooks. For actionOrderSlipAdd, select the three dots, and then click Unhook.    Shopping carts If you notice errors in shopping cart calculations, email integration@multisafepay.com\nAs a temporary solution, you can disable sending the shopping cart with the payment request.\nNote: Pay later methods do not work if the shopping cart is disabled.\n  Disabling the shopping cart    Sign in to your PrestaShop 1.7 backend. Go to Improve \u0026gt; Module manager \u0026gt; MultiSafepay. In the MultiSafepay module, go to the General settings tab. Set the Disable Shopping Cart toggle to Enabled. Click Save.    Surcharges Surcharges are not supported by default.\n  Applying surcharges with third-party add-ons   There are several third-party add-ons available. However, we can\u0026rsquo;t guarantee compatibility with our plugin. Make sure that you test them carefully before installing.\nAttention Dutch merchants\nWe strongly recommend not applying surcharges to pay later methods. This is now considered providing credit under the Wet op het consumentenkrediet and article 7:57 of the Burgerlijk Wetboek, and requires a permit from the Authority for Financial Markets (AFM).\n  Translation   Translating the MultiSafepay module   To translate elements of the MultiSafepay module in the plugin, follow these steps:\n Sign in to your PrestaShop 1.7 backend. Go to Improve \u0026gt; International \u0026gt; Translations. On the Modify translations tab, from the Type of translation list, select Installed module translations. Select the MultiSafepay module and the Language, and then click Modify. Enter the required translations, and then click Save.  To translate the names of payment methods:\n Go to Improve \u0026gt; MultiSafepay \u0026gt; Payment methods. Select the payment method you want to translate. Make sure the Title field is empty.    Updates   Updating in your backend    Make sure you have a backup of your production environment, and that you test the plugin in a staging environment. Download the plugin again above. Follow the Installation instructions.    Upgrading from 4.x or lower   Upgrading to version 5.x   To upgrade to version 5.x from an older version, follow these steps:\n Go to Modules \u0026gt; Module manager \u0026gt; MultiSafepay \u0026gt; Configure. On the Payment methods tab, set all payment methods to Off. On the Gift cards tab, set all gift cards to Off. Install and configure the new plugin following the instructions below. Only uninstall the older plugin when you\u0026rsquo;re sure that orders created with the new plugin are being processed successfully.  If upgrading from 5.x to a newer version, see Updates.\n  ","tags":null,"title":"PrestaShop 1.7 plugin","uri":"https://docs.multisafepay.com/prestashop-1-7/"},{"categories":null,"content":" Oops! Looking for our API reference? It\u0026rsquo;s moved. And what\u0026rsquo;s more, it\u0026rsquo;s new and improved! Check it out!\n  ","tags":null,"title":"","uri":"https://docs.multisafepay.com/api/api-ref/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/developer/wrappers/php/"},{"categories":null,"content":"With direct integration, the  Pay button appears in your checkout page. Customers complete payment without being redirected to a payment page.\n Prerequisites Apple server requirements  All pages that include Apple Pay must be served over HTTPS. Your domain must have a valid SSL certificate. Your server must support the TLS protocol version 1.2 or later.  For more information, see Apple Developer – Setting up your server.\nValidate your domain 1. Download the Apple Pay domain validation file for:\n Test payments Live payments  2. Place the domain validation file at:\nhttps://{your-domain}/.well-known/apple-developer-merchantid-domain-association Request registration To request registration for Apple Pay direct, email the relevant site ID to sales@multisafepay.com\nCustomer device compatibility To see which Apple products are compatible with Apple Pay, see Apple Developer – Devices compatible with Apple Pay.\nCheck for Apple Pay support 1. From the customer\u0026rsquo;s device, check if Apple Pay is supported:\nif (window.ApplePaySession \u0026amp;\u0026amp; ApplePaySession.canMakePayments()) For more information, see Apple Developer – Checking for Apple Pay availability.\n2. If Apple Pay is supported, display the  Pay button in your checkout page.\nFor styling the button, see Apple Developer:\n Buttons and marks Displaying Apple Pay Buttons Using CSS  Create an Apple Pay session Client-side integration When the customer clicks or taps the  Pay button:\n1. Create a paymentRequest object containing details about the order.\nvar ApplePayRequest = { \u0026quot;countryCode\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;currencyCode\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;merchantCapabilities\u0026quot;: [ \u0026quot;supports3DS\u0026quot; ], \u0026quot;supportedNetworks\u0026quot;: [ \u0026quot;amex\u0026quot;, \u0026quot;maestro\u0026quot;, \u0026quot;masterCard\u0026quot;, \u0026quot;visa\u0026quot;, \u0026quot;vPay\u0026quot; ], \u0026quot;requiredBillingContactFields\u0026quot;:[ \u0026quot;postalAddress\u0026quot;, \u0026quot;billingAddress\u0026quot; ], \u0026quot;total\u0026quot;:{ \u0026quot;label\u0026quot;: \u0026quot;Your Merchant Name\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;final\u0026quot;, \u0026quot;amount\u0026quot;: 15.95 } };   Requesting shipping and billing details   You can use the requiredBillingContactFields to collect the customer\u0026rsquo;s billing and/or shipping details through Apple Pay. If the customer hasn\u0026rsquo;t previously provided their billing address to Apple Pay, they are prompted to do so.\nNote: The billing and shipping details aren\u0026rsquo;t required for creating Apple Pay direct orders with MultiSafepay. However, since the collected details are available to you in unencrypted form, you can use them to reduce checkout friction and manage orders.\n  Note: The total.amount is in euro\u0026rsquo;s, whereas the amount set in our order requests is in cents.\nFor more information about the ApplePayRequest object, see Apple Developer – ApplePayRequest.\n2. Create an Apple Pay session.\nvar session = new ApplePaySession(10, ApplePayRequest);  As the first argument, specify the Apple Pay version your website supports. As the second argument, pass the ApplePayRequest object.  For more information about Apple Pay versions, see Apple Developer – Apple Pay on the web version history.\nNote: You can only create a session within a user gesture handler. For example, you can create the session when the user taps the  Pay button.\nFor more information, see Apple Developer – Creating an Apple Pay session.\n3. Create an onvalidatemerchant event handler that is called once the Apple Pay payment form is displayed to the customer.\nsession.onvalidatemerchant = function (event) { var validationUrl = event.validationURL; var originDomain = window.location.hostname; // Request an Apple Pay merchant session from your server // The server-side request requires the validationUrl and originDomain values // If you succesfully create a session from your server session.completeMerchantValidation(\u0026lt;apple-pay-payment-session-data\u0026gt;); }; For more information, see Apple Developer:\n Providing merchant validation onvalidatemerchant  4. To begin the merchant validation process, call the session.begin() method.\nsession.begin(); This displays the Apple Pay payment sheet to the customer and triggers the onvalidatemerchant event handler.\nServer-side integration 1. With the validationUrl and originDomain from the client\u0026rsquo;s device, request an Apple Pay merchant session from MultiSafepay.\ncurl -X POST \u0026quot;https://api.multisafepay.com/v1/json/wallets/sessions/applepay\u0026quot; \\ -H \u0026quot;Authorization: Bearer \u0026lt;website-api-key\u0026gt;\u0026quot; \\ -d '{ \u0026quot;origin_domain\u0026quot;: \u0026quot;originDomain\u0026quot;, \u0026quot;validation_url\u0026quot;: \u0026quot;validationUrl\u0026quot;, }' Note: The code depends on your server-side framework.\nA successful response contains an Apple Pay merchant session, which expires after five minutes.\n2. Pass the session to the client\u0026rsquo;s device to use as an argument in the session.completeMerchantValidation() call.\nCreate an order Client-side integration 1. Create an onpaymentauthorized event handler that is called once the customer authorizes the payment with Touch ID, Face ID, or passcode.\nsession.onpaymentauthorized = function (event) { // Create a payment object var payment = event.payment; // With the payment object: // - Create an Apple Pay direct order from your server // - Return the success attribute of the response if (success == true) { session.completePayment(ApplePaySession.STATUS_SUCCESS); // Redirect the customer to your success page }; if (success == false) { session.completePayment(ApplePaySession.STATUS_FAILURE); }; }; The payment object contains the customer\u0026rsquo;s encrypted payment details (payment.token) and, if requested, the billingContact and shippingContact.\nFor more information about the payment object, see Apple Developer:\n payment ApplePayPayment  Server-side integration 1. From your server, create an order \u0026gt; Wallet order. See also Examples \u0026gt; Apple pay direct, using the payment.token property. To use the payment.token property in the order request, convert it to an escaped JSON string.\n2. The billing and shipping details are not required for Apple Pay direct orders.\n To access the shipping and/or billing details from the payment object, use the payment.billingContact and payment.shippingContact properties. To add the details to the order request, format them in accordance with create order requests.  Note: Billing and shipping data are not encrypted.\nFor more information about the payment object and its properties, see Apple Developer – ApplePayPayment.\nTest your integration To test your Apple Pay direct integration, you need to:\n Meet the testing prerequisites Have an Apple Developer account, configured for Apple Pay, with at least one Apple Pay test card in your wallet  To test, follow these steps:\n In your integration, click the Apple Pay button.\nYou can ignore the \u0026ldquo;This device is not supported\u0026rdquo; error. Sign in to your Apple Developer account and select your test card. Authorize the payment. The transaction is completed.  ","tags":null,"title":"Apple Pay direct integration","uri":"https://docs.multisafepay.com/apple-pay/direct/"},{"categories":null,"content":"","tags":null,"title":"Banking methods","uri":"https://docs.multisafepay.com/payment-methods/banks/"},{"categories":null,"content":"MultiSafepay supports the following credit and debit cards:\n American Express (Amex) Mastercard (credit card) and Maestro (debit card) Postepay Visa and co-branded cards Cartes Bancaires, Dankort, V Pay (debit card)    About credit and debit cards   Credit and debit cards are plastic cards issued by a bank, building society, or card scheme that let the cardholder pay for products or services at a point of sale, online, or on a mobile app. Cardholders can also withdraw cash, or link their card to digital wallets or other local payment methods.\nCredit cards are a very common payment method in many countries. Their widespread acceptance, ease of use, and ability to process payments in multiple currencies make them the ideal choice for many customers.\nCards may feature:\n A card number to uniquely identify the card A 3-4 digit card verification code (CVC) for additional security An expiry date The cardholder\u0026rsquo;s name    Overview          Countries Amex, Maestro, Mastercard, Visa: Worldwide Cartes Bancaires: France Dankort: Denmark Postepay: Italy V Pay: Europe   Currencies Multiple (Amex: EUR, GBP, USD only) To support additional currencies, email support@multisafepay.com   Chargebacks Yes, except Postepay   Refunds Full and partial   Transactions expire after 1 hour   Supports 3D Secure Handling cardholder data Manual Capture MOTO Recurring Payments Second Chance Zero Authorization, except Amex      Amex merchant account number   If you use your Amex merchant account number:\n Amex settles the funds directly in your business bank account. You are automatically added to the Safekey directory. All currencies are supported.  For more information, email support@multisafepay.com\n  Interchange++ pricing model Banks and card schemes all charge different fees to cover the operational costs of managing their network and processing credit card payments. When you create a MultiSafepay account, we provide an estimate of these fees.\n  Interchange\u0026#43;\u0026#43; fees   There are three sub-fees:\n The Interchange fee that is paid to the issuing bank The scheme fee charged by Visa or Mastercard The acquirer fee  These fees vary considerably depending on a range of factors, e.g.:\n Merchant\u0026rsquo;s country Issuer Cardholder Merchant segment Monthly transaction volume  Specific transaction fees\nThe actual fee for a specific transaction is difficult to predict and varies depending on the:\n Country where the card was issued Country where the transaction is processed Type of card, e.g. corporate or customer card Way the card is processed, e.g. level of security Amount of the transaction  To ensure transparency, payment service providers can choose the Interchange++ pricing model, which breaks down the fees per transaction. There are no preset prices, instead fees are calculated based on the total cost of all transactions processed.\n  Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant CS as Card scheme participant Me as Merchant participant CB as Customer's bank C-Mu: Selects the card at checkout Mu-C: Redirects to payment page C-CS: Enters payment details, authenticates, and completes payment Mu-Me: Runs fraud filter and provides risk report Me-Mu: Authorizes transaction alt MultiSafepay collects CB-Mu: Transfers funds Mu-Me: Settles funds else With Amex MID CB-CS: Transfers funds CS-Me: Settles funds end    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected for 3D Secure authentication, or the card scheme is authorizing the transaction. Initialized Initialized   The card scheme authorized the transaction, but we\u0026rsquo;ve flagged it as potentially fraudulent. Review it and then manually capture or decline. Uncleared Uncleared   MultiSafepay has collected payment. Completed Completed   (Amex MID flow) American Express has collected payment. Completed Initialized   Payment wasn\u0026rsquo;t captured manually or within 5 days. Void Void/Cancelled   The customer didn\u0026rsquo;t complete 3D Secure authentication. Expired Expired   The customer failed 3D Secure authentication or cancelled payment. See Card errors. Declined Declined   Refunds/chargebacks     Refund/chargeback initiated. Reserved Reserved   Refund/chargeback complete. Completed Completed      Activation and integration          Activation Apply to MultiSafepay   API Create order \u0026gt; Card order See Examples and select the relevant card scheme example. Co-branded cards Co-branded cards are processed through the VISA gateway. Set the locale parameter: - Cartes Bancaires: fr_FR (France) - Dankort: da_DK (Denmark) - Postepay: it_IT (Italy) Generic gateway The generic CREDITCARD gateway saves space in your checkout and the payment page detects the card scheme based on the first 4 digits of the card number. See Examples \u0026gt; Credit card redirect.   Ready-made integrations All our ready-made integrations support: - Amex, Maestro, Mastercard (redirect) - Visa (including Cartes Bancaires, Dankort, Postepay, V Pay) (redirect)   Checkout options Payment components Payment pages (current and deprecated)   Testing Test payment details    ","tags":null,"title":"Cards overview","uri":"https://docs.multisafepay.com/payment-methods/cards/"},{"categories":null,"content":"This page describes MultiSafepay account types and how to create test and live accounts.\nAccount types There are three types of account: merchant, partner, and primary accounts.\nAll account types represent a single legal entity, but can support multiple bank accounts and users with their own login credentials and permissions.\nCheck which type of account best fits your company:\nflowchart TD id1(Do you work with other companies that you charge fees to?)-- id2 \u0026 id3 id2(No= Merchant account) id3(Yes. Do you receive part of the MultiSafepay transaction fee from your affiliated companies?)-- id4 \u0026 id5 id4(No= Primary account, e.g. marketplaces, franchises, crowdfunding) id5(Yes= Partner account, e.g. digital agencies, SaaS companies)  Test accounts You may want to start with a test account. This is a free account where you can build and test your integration, explore payment features, and process test transactions. You can then create a live account and onboard to start processing real payments.\nTo create a free test account:\n Fill out the signup form. Sign in to your test dashboard using the security code we email you.  Live accounts To create and onboard a live account and start processing real payments, follow these steps:\n1. Fill out the relevant signup form:\n          Merchant account Live signup form Test signup form   Partner/primary account Live signup form Test signup form    You receive an email containing your security code.\n2. Use your security code to sign in to your account:\n Live account Test account  3. Live accounts open by default to the onboarding steps page. You can navigate away from this page, and return to it via the button under Alert.\n4. For partner/primary accounts, an account manager contacts you to confirm the appropriate account structure for your needs, and guide you through the onboarding process.\nFor any questions, email support@multisafepay.com\nSwitching to MultiSafepay from another PSP You can sign up for a MultiSafepay account while still using another PSP without incurring any costs. A test account lets you process test payments and gives access to all features. MultiSafepay only starts charging monthly fees when you onboard, go live, and begin processing real payments.\nTransferring tokens In collaboration with your current PSP, we can securely transfer tokenized credit card details. This is especially useful if you process recurring payments or want to offer existing customers the option of reusing their credit card details.\nFor more information, email sales@multisafepay.com\n","tags":null,"title":"Creating accounts","uri":"https://docs.multisafepay.com/account/create-account/"},{"categories":null,"content":"E-Invoicing is a MultiSafepay pay later method with automation tools that gives you full control of credit management, the payment process, and customer communications.\nSee how E-Invoicing can benefit your business!\nOverview           Countries Worldwide    Currencies EUR    Chargebacks No    Refunds Full, partial, and API refunds, discounts    Supports Second Chance    Transactions expire after Doesn\u0026rsquo;t apply    Addresses Different billing and shipping addresses are supported. Email a request to sales@multisafepay.com    Shipping policies Shipping Policy Nederland Herinnering aan onze shipping policy     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant MF as MultiFactor\rparticipant Me as Merchant\rC-Mu: Selects E-Invoicing at checkout\ralt Redirect flow\rMu-C: Redirects to payment page to provide birth date, bank account, email address, and phone number, then redirects to your success page\relse Direct flow\rMu-MF: Sends order details\rend\rMF-Mu: Authorizes the payment\rMu-MF: Captures the funds\rMe-C: Ships the order\rNote over Me,C: Manually change the order status to Shipped. MF-C: Sends invoice (settlement is now guaranteed)\rC-MF: Completes payment MF-Mu: Transfers funds Mu-Me: Settles funds\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     MultiSafepay\u0026rsquo;s risk analysis is in progress. (You can still cancel.) Initialized Initialized   E-Invoicing has authorized the transaction. (You can no longer cancel; you can only refund.) Completed Initialized   Important: Manually change the order status to Shipped. You must ship to receive payment. Shipped Initialized   MultiSafepay has collected payment. Completed Completed   E-Invoicing declined the transaction. Declined Declined   The transaction has been cancelled. Void/Cancelled Void/Cancelled   The customer didn\u0026rsquo;t complete payment. Expired Expired   Refunds     Refund initiated. Initialized Initialized   Refund complete. Completed Completed      Shipping orders When you ship the order, you must manually change the order status to Shipped:\n Captures the funds Triggers sending the invoice to the customer Prevents the order from expiring    Changing order status to Shipped   You can change the order status from Completed to Shipped:\nIn your dashboard\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transactions overview. Search for the transaction, and click to open the Transaction details page. Under Order details, click Change order status. Change the status to Shipped. Send the customer the track and trace details, if relevant.  In your backend\nIf you change the order status in your backend, the following ready-made integrations pass the updated status to your dashboard automatically:\n Magento 2 and WooCommerce: When you set the order to Shipped in your backend. Shopware 5: When you set the order to Delivered in your backend.  For other ready-made integrations, make an update order API request.\nNote: Some third-party plugins may not support updating the status via our API.\n  Activation and integration          Activation Enable in your dashboard   API Create order \u0026gt; Pay later order Examples \u0026gt; E-Invoicing direct/redirect   Checkout options Payment pages (current and deprecated)   Testing Test payment details   Ready-made integrations Supported in all ready-made integrations (direct).    Gift cards When paying with a gift card and E-Invoicing, customers must enter the gift card details before placing their order, i.e. on your checkout page. Otherwise our platform would interpret the gift card as a discount and generate incorrect order information, e.g. tax calculations.\nYou are solely responsible for this in your integration.\nUser guide Batching transactions for subscriptions   Batching transactions for subscriptions   To generate E-Invoicing transactions in batches for subscription payments:\n Sign in to your MultiSafepay dashboard. Go to E-Invoicing \u0026gt; Batches. Upload a file in .xls, .xlsx or .csv format. Follow the templates in your MultiSafepay dashboard.    Customizing invoices   Customizing invoices   To customize invoices:\n Sign in to your MultiSafepay dashboard. Go to E-Invoicing \u0026gt; E-Invoicing generator.  The invoice is sent to the email address provided.\n  Viewing transactions   Viewing transactions   To see an overview of all successful transactions:\n Sign in to your MultiSafepay dashboard. Go to E-Invoicing \u0026gt; Invoices.    ","tags":null,"title":"E-Invoicing","uri":"https://docs.multisafepay.com/payment-methods/e-invoicing/"},{"categories":null,"content":"The General Data Protection Regulation 2016/679 (GDPR) is a European Union regulation on protecting and transferring personal data and privacy in the EU and European Economic Area.\nMultiSafepay complies with all required measures to ensure data protection, including:\n Storing all data in certified data centers in the Netherlands, so all data remains within the EU Encrypting and anonymizing all stored data as much as possible using dedicated software Following company policy, procedures, and operational guidelines Registering a data protection officer with the Dutch Data Protection Authority (AP)  GDPR addendum Our primary activity is processing online payments. We are a data controller, responsible for storing data only. We are not a processor or sub-processor of data.\nFor more information, see the MultiSafepay – GDPR addendum. It includes a number of provisions similar to a standard processing agreement.\nUsing customer data MultiSafepay only uses customer data for processing online payments, and never for any other commercial purposes. If we ever need to use data for another purpose, we explicitly request consent.\nOnly a small number of certified MultiSafepay staff have very limited access to customer data, strictly on a need-to-know basis.\nDestroying data In accordance with relevant Dutch legislation, we automatically destroy data as soon as it expires.\nCustomers can also request us to delete their data in accordance with the right to Privacy by Design.\nEmail a request to delete data to the data protection officer at dataprotection@multisafepay.com\n","tags":null,"title":"GDPR","uri":"https://docs.multisafepay.com/payment-regulations/gdpr/"},{"categories":null,"content":"","tags":null,"title":"Getting started","uri":"https://docs.multisafepay.com/getting-started/"},{"categories":null,"content":"1. Create a free test account  Fill out the signup form. Sign in to your test dashboard using the security code we email you.   Full guidance: Creating an account   2. Set up your account  Add at least one site. Activate your selected payment methods.   Full guidance: Manage my account   3. Choose an integration method Choose an integration method that matches your business needs and tech stack.\nReady-made integrations MultiSafepay\u0026rsquo;s integrations developed in-house require fewer development resources and let you start testing straight away. We have a wide range of plugins and apps to integrate with platforms like Magento, WooCommerce, Shopware, and Lightspeed.\n Full guidance: Ready-made integrations   Self-made integrations Build your own integration, especially if you are developing a new ecommerce website or app. This generally requires more development resources, but lets you fully customize the look, feel, and functionality of your checkout experience.  Full guidance: Self-made integrations  \nFor help selecting an integration method, email integration@multisafepay.com\n4. Test your integration Before you start processing real transactions, test each payment method.\n Full guidance: Test your integration   5. Onboard your account To start processing real transaction, we need to check and approve your company information.\n Complete the live account sign up form. Provide information about your company, including the ultimate beneficial owners. Check the list of prohibited products and services. Display required information on your website.  We then perform know your customer (KYC) checks. If approved, your account goes live.\n Full guidance: Onboarding process    Support Email support@multisafepay.com   ","tags":null,"title":"Getting started guide","uri":"https://docs.multisafepay.com/getting-started/guide/"},{"categories":null,"content":"International bank account numbers (IBANs) are sensitive data. For security reasons, we mask them so that only the last 4 digits are visible, e.g. *** 1234.\nYou can still perform most business operations with masked IBANs, e.g. processing refunds.\nUnmasking IBANs To unmask IBANs for a specific website, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Website settings. Click the relevant website. Under Website functionality, click the Unmask IBAN numbers in API requests and responses toggle.  When unmasked, the full IBAN is displayed, e.g. NL87ABNA0000001234.\n","tags":null,"title":"IBANs","uri":"https://docs.multisafepay.com/account/ibans/"},{"categories":null,"content":"iDEAL is the leading payment method in the Netherlands and links all major Dutch retail banks. Customers pay via mobile banking app, QR code, or in their own online banking environment. Once a payment is completed, the customer cannot reverse it and iDEAL guarantees settlement.\nSee how iDEAL can benefit your business!\nOverview           Countries The Netherlands    Currencies EUR    Chargebacks No    Refunds Full and partial    Supports Second Chance Recurring Payments (banking only)    Transactions expire after 1.5 hours     iDEAL QR iDEAL QR has a wide range of applications. Customers can scan QR codes off screens or paper (e.g. invoices, receipts), and change the amount to pay. This makes it particularly suitable for hospitality, charity collectors, and home deliveries. You can specify whether the same QR code can be used more than once.\nNot all Dutch banking apps support iDEAL QR yet, so we recommend that customers scan QR codes with their camera or a general QR reader. This redirects to the ideal.nl payment page, which works for all banks.\nPayment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant CB as Customer's bank participant Me as Merchant alt Redirect flow C-Mu: Selects iDEAL (QR) at checkout Mu-C: Redirects to payment page to select their bank, then to online banking else Direct flow C-Mu: Selects iDEAL (QR) and their bank at checkout Mu-C: Redirects to online banking end C-CB: Authenticates account/scans QR code and completes payment CB-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to their bank. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The customer cancelled the transaction via their bank. Void Void/Cancelled   iDEAL processing error. Declined Declined   The customer didn\u0026rsquo;t complete payment within 1.5 hours. Expired Expired   Refunds     Refund initiated. Initialized Initialized   Refund pending (banking only). Reserved Reserved   Refund complete. Completed Completed      Note: To increase transparency for customers, the name of your website appears on the iDEAL payment page and \u0026ldquo;Your-website-name by MultiSafepay\u0026rdquo; on the customer\u0026rsquo;s bank statement.\nActivation and integration          Activation Enable in your dashboard   Checkout options Payment components Payment pages - Banking: Current and deprecated - QR: Current only   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; iDEAL direct/redirect/QR      Ready-made integrations   Banking supported in: All our ready-made integrations, except ZenCart.\nQR supported in:\n Craft Commerce CS-Cart Drupal 8 Magento 1, Magento 2 Odoo OpenCart PrestaShop 1.7 Shopware 5 VirtueMart WooCommerce X-Cart    ","tags":null,"title":"iDEAL","uri":"https://docs.multisafepay.com/payment-methods/ideal/"},{"categories":null,"content":"Onboarding involves MultiSafepay checking and approving information submitted by merchants and partners applying for a live account to process real transactions.\n1. Submit sign up form Complete and submit the live account sign up form.\nMultiSafepay creates a live account and email you a security code to sign in to your live dashboard.\n2. Provide company information Sign in to your live dashboard and, under Business details, provide the following information:\n         Company details Company address, VAT number, and Chamber of Commerce number   Business bank account number This must exactly match at least one of the trade names listed on your Chamber of Commerce extract.   Products/services See also Prohibited products and services.   Site URL The URL of at least one site you accept payments through, or select the I don\u0026rsquo;t have a website checkbox. If you provide a URL, you can now start receiving payments into your MultiSafepay balance. However, you cannot pay out funds until onboarding is complete.   Credit card payments If you intend to accept cards, provide your: - Minimum, average, and maximum order value - Annual turnover from credit card transactions    Pre-screening MultiSafepay pre-screens your account to check if the products/services you sell are low, medium, or high risk. Payments for medium and high-risk products/services are pauzed until onboarding is complete.\nWe may ask you to provide additional documents, e.g. if you have an unusual company structure.\nNote: Requests to process credit cards may be denied, e.g. if you sell prohibited products/services.\nChanging company information You must inform us of any changes to your company information.\n  Changing company information   Changes of address\nEmail the new address and your account ID to support@multisafepay.com\nChanges in the company form, directors, or UBOs\nEmail the new details and your account ID to risk@multisafepay.com\nWe will request new documentation, such as UBO statements or copies of identification documents.\nCompany takeover\nIf a different company is taking over your account, we recommend opening a new account to separate the money flow.\nMake sure you update all company details on the website(s), including the registration number, VAT number, and address. The company details on the website must match the details in your account.\n  3. Validate bank account Validate your business bank account by either:\n Making a payment of 1 EUR from the account, or Providing a copy or screenshot of a bank statement that includes your IBAN and company name  4. Identify UBOs MultiSafepay is legally required under the Wwft to establish and verify the identity of your company\u0026rsquo;s ultimate beneficial owners (UBOs).\nDownload and complete a Statement of Ultimate Beneficial Owner Form for every UBO, and then submit them via your dashboard.\n  About UBOs   A UBO is a natural person who directly or indirectly holds an equity interest in or exercises control of the enterprise. Most commonly, an individual holds an equity interest of 25% or more of the shares or capital of the enterprise, or exercises:\n 25% or more of the voting rights, or De facto control over the affairs of the enterprise, or Other special rights of 25% or more over the capital of the enterprise and specific control over, for example, rights granted in the pages of incorporation.  Multiple UBOs\nIf the enterprise consists of a number of (intermediate) holding companies, then the UBO(s) are all the individuals who, through various companies, have 25% or more control of the underlying enterprise.\nNo UBOs\nEnterprises are not required to have a UBO. For example, if an enterprise has five owners with an equal distribution of capital and control, none of them owns 25% or more of the enterprise.\nExample\nThe limited company Good Ltd has a sole shareholder: Better Ltd. The shares of Better Ltd are held equally by two other limited companies:\n Anders Ltd. which has two equal shareholders: Mr A. Jansen and Ms B. Jansen-de Jong Best Ltd. which has one sole shareholder: Ms D. Best  The three ultimate beneficial owners are therefore Mr A. Jansen, Ms B. Jansen-de Jong, Ms D. Best.\n    About the Wwft   The Wet ter voorkoming van witwassen en financieren van terrorisme (WWFT), or Money Laundering and Terrorist Financing Prevention Act, prevents companies and individuals from laundering money or financing terrorist activity.\nIt was based on the Disclosure of Unusual Transactions or Financial Services Act, but goes one step further. It focuses on both individuals involved in suspect transactions and the risk of such transactions.\n    Download a form    Dutch UBO form English UBO form French UBO form German UBO form Italian UBO form Spanish UBO form      Submit the form    Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Files. Under Upload a new file, click Choose file. Select the UBO form, and then click Open. Upload color copies of the identity documents of all UBOs.  Note: We recommend using the KopieID app to hide personal information on passports or IDs.   5. Display required information You must display certain information on your website.\n  Required website information    Full legal company name, address, phone number, and email address Chamber of Commerce number VAT number General terms and conditions, including the right to withdrawal (14 days) Privacy policy    Approval and go live MultiSafepay assesses the information provided and perform know your customer (KYC) checks. We may request a deposit to cover our financial risks.\nIf approved, your account goes live and you can make payouts.\n  KYC checks   As a payment service provider and acquirer, MultiSafepay is legally required to perform KYC checks on the:\n Account holder Business bank account Merchant Website  To help you start accepting payments as quickly as possible, we divide our checks into two phases:\n Identification: As soon as we have established the identity of the account holder, you can start accepting payments. Verification: As soon as we have verified the identity of the account holder, you can start making payouts to your business bank account.      Deposits   We may ask for a deposit in case:\n A merchant goes bankrupt and we can\u0026rsquo;t collect funds for chargebacks from their account. A merchant uses payment methods that let you withdraw funds from your MultiSafepay balance when there are no funds available, e.g. SEPA direct debits or credit card payments.  Deposits are based on various factors:\n Credit card volume Delivery timelines Financials Performance and experience  If financials are requested, we request your most recent balance sheet, and profit and loss statement.\n  Support Email risk@multisafepay.com\nDisclaimer: The information on this website is intended for informational purposes. No rights can be derived from this information.\n","tags":null,"title":"Onboarding process","uri":"https://docs.multisafepay.com/account/onboarding-process/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with OpenCart.\nFor more information about the plugin and a preview, see Opencart – MultiSafepay.\n  Requirements    MultiSafepay account OpenCart 2.X, 3.X PHP version 7.2, 7.3, or 7.4      Support   Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation  We recommend first installing the plugin in a test environment, following the OpenCart installation procedure. Always make a backup.    Download the Plugin_OpenCart_3.x.x.ocmod.zip. Sign in to your OpenCart backend. Go to Extensions \u0026gt; Installer. Click the Upload button, and then select the downloaded file. Once installed, click the Dashboard menu. To clear both caches, click the blue cog wheel button in the top-right corner, and then click the Refresh icon. Go to Extensions \u0026gt; Modifications, and then click the Refresh button. Go to Extensions \u0026gt; Payments \u0026gt; MultiSafepay, and then click the Install button.  Configuration  Sign in to your OpenCart backend and go to Extensions \u0026gt; Extensions \u0026gt; Payments \u0026gt; MultiSafepay. On the MultiSafepay configuration page, configure the:  Payment methods tab Order status tab Options tab    To retrieve your API key, see Viewing the site ID, API key, and secure code.\nUser guide Checkouts The plugin supports the OpenCart core checkout and is compatible with most premium themes, unless you have a custom checkout.\n  Patches for third-party themes and extensions   The following patches for third-party themes and extensions are available:\n         Journal3 Quick Checkout for OpenCart 3.0.X Download OCMOD   Journal3 Quick Checkout for OpenCart 2.3.X Download OCMOD   AJAX Quick Checkout for OpenCart 3.0.X Download OCMOD   AJAX Quick Checkout for OpenCart 2.3.X Download OCMOD   OnePage Checkout 4.0.0 for OpenCart 3.0.X Download OCMOD   OnePage Checkout 4.0.0 for OpenCart 2.3.X Download OCMOD   Quick Checkout / Onepage Checkout for OpenCart 3.0.X Download OCMOD   Quick Checkout / Onepage Checkout for OpenCart 2.3.X Download OCMOD   EU VAT Compliant Download OCMOD   PayCharge Free for OpenCart 2.3.X Download OCMOD    The Integration Team will do their best to provide support for third-party plugins and premium themes. Email integration@multisafepay.com\n  Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways   To configure generic gateways, follow these steps:\n Sign in to your OpenCart backend. Go to Plugin settings \u0026gt; Payment methods tab. Set the:  Gateway identifier Gateway logo Gateway label Whether to include the shopping cart in refunds (required for pay later gateway IDs)    Generic gateways support:\n All payment methods (filter by country, currency, customer group, and minimum/maximum amount) Split payments, Second Chance reminders and virtual IBANs Redirect requests only Full and partial refunds (except for pay later methods) Backend orders (set a custom initial order status)  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Payment links   Generating payment links for backend orders    Sign in to your OpenCart backend. Go to System \u0026gt; Localisation \u0026gt; Order status. Enter a custom order status for when the payment link is sent. Go to Extensions \u0026gt; Payments \u0026gt; MultiSafepay. Set the Generate payment links at the admin field to Yes. On the Options tab \u0026gt; Payment request field, set the Previously created order status. To reserve stock units of order items generated by the admin, while the order status is still Pending, go to System \u0026gt; Settings \u0026gt; Store \u0026gt; Options tab. In the Processing order status field, set the order status previously registered as Payment request. Go to Sales \u0026gt; Orders \u0026gt; Add new order. Enter all the order details in the following tabs:  Customer details Products Payment details Shipping details   At the fifth step Totals, in the Payment method field, select a MultiSafepay payment method. In the Order status field, select the order status previously registered as Payment request. To process the order, click Save.  The customer receives the payment link in the email sent by OpenCart containing the order details. The payment link is also added to the order history details.   Payment components The plugin supports payment components, which:\n Provide a seamless checkout experience to increase conversion. Encrypt customer payment details for secure processing. Shift responsibility for PCI DSS compliance to MultiSafepay.    Activating payment components   If you\u0026rsquo;re new to accepting credit card payments, email a request to activate them to sales@multisafepay.com\n Sign in to your OpenCart backend. Go to Extensions \u0026gt; Type: Payments \u0026gt; MultiSafepay \u0026gt; Edit. Choose Tab: Payment Methods and then expand the method of your choice. Enable Payment Component and optionally Tokenization.  Tokenization is available only when Payment Component is activated.\nFor support, email integration@multisafepay.com\nNote: If you have a custom checkout and encounter a conflict with the payment component, the Integration Team will do their best to provide support, but we can\u0026rsquo;t guarantee compatibility in all cases.\n  Payment methods   Payment methods    Cards: All Banking methods: All, except TrustPay Pay later methods: All Wallets: Alipay, Apple Pay, PayPal Prepaid cards:  Baby Cadeaubon Beauty \u0026amp; Wellness Boekenbon Fashion Cheque Fashion gift card Fietsenbon Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Refunds Full refunds are supported in your MultiSafepay dashboard and backend.\nYou can\u0026rsquo;t refund more than the original amount in your backend.\n  Processing backend refunds    Sign in to your OpenCart backend. Go to Orders \u0026gt; Order view button \u0026gt; Order history panel. Click the Refund button.\nThis only appears if the order status is Completed or Shipped.    Shopping carts If you notice any errors in shopping cart calculations, email integration@multisafepay.com\nAs a temporary solution, you can disable payments with shopping carts.   Disabling shopping carts   Alert: This disables all pay later methods.\n Sign in to your OpenCart backend. Go to Extensions \u0026gt; Payments \u0026gt; MultiSafepay. In the MultiSafepay extension, go to the Options tab. From the Disable Shopping Cart list, select Yes. Click Save.    Surcharges Surcharges are no longer supported, but you can request a patch.\nEmail integration@multisafepay.com\n Attention Dutch merchants We strongly recommend not applying surcharges to pay later methods. This is now considered providing credit under the Wet op het consumentenkrediet and article 7:57 of the Burgerlijk Wetboek, and requires a permit from the Authority for Financial Markets (AFM).   Updates   Updating version 2.2.0 to 3.x.x   To update the plugin using the extension installer tool in your OpenCart backend:\n For security, always create a backup of your OpenCart application. Download the Plugin_OpenCart_3.x.x.ocmod.zip. Sign in to your OpenCart backend. Go to Extensions \u0026gt; Installer. Click the Upload button, and then select the downloaded file. Once installed, in the menu go to Dashboard. To clear both caches, click the blue cog wheel icon in the top-right corner, and then click on the Refresh icon. Go to Extensions \u0026gt; Modifications, and then click the Refresh icon. Go to Extensions \u0026gt; Payments \u0026gt; MultiSafepay. To access the Settings page, click the Edit button. A warning appears requesting you to delete old plugin files. In the Maintenance tab, click Delete old plugin files.      Updating version 2.1.0 or below    For security, create a backup of your OpenCart application. Manually remove all files from the MultiSafepay extension using an FTP program or server file administration program. Follow the installation instructions above.    ","tags":null,"title":"OpenCart plugin","uri":"https://docs.multisafepay.com/opencart/"},{"categories":null,"content":"  Payment methods by country      Country Payment methods     Austria EPS, Klarna, Sofort, Trustly   Belgium AfterPay, Bancontact, Belfius, CBC/KBC, Edenred, gift cards, Klarna, Sofort, Trustly   Bulgaria Trustly   Croatia Trustly   Cyprus Trustly   Czech Republic Trustly, TrustPay   Denmark Dankort, Klarna, Trustly   Estonia Trustly   Europe (SEPA area) Bank Transfer, SEPA Direct Debit   Finland Trustly   France Cartes Bancaires, Klarna   Germany Giropay, Klarna, Request to Pay, Sofort, Trustly   Greece Trustly   Hungary Trustly   Ireland Trustly   Italy Klarna, Postepay, Sofort, Trustly   Latvia Trustly   Lithuania Trustly   Luxembourg Trustly   Malta Trustly   Norway Klarna, Trustly   Poland Dotpay, Sofort, Trustly   Portugal Trustly   Romania Trustly   Slovakia Trustly   Slovenia Trustly   Spain Klarna, Sofort, Trustly   Sweden Klarna, Trustly   Switzerland Sofort   The Netherlands AfterPay, Betaal per Maand, gift cards, iDEAL, in3, Klarna, Pay After Delivery, Trustly   United Kingdom Trustly   Worldwide Alipay, American Express, Apple Pay, E-Invoicing, Google Pay, Maestro, Mastercard, PayPal, Paysafecard, Visa, Worldwide, WeChat Pay      ","tags":null,"title":"Payment methods","uri":"https://docs.multisafepay.com/payment-methods/"},{"categories":null,"content":"","tags":null,"title":"Ready-made integrations","uri":"https://docs.multisafepay.com/integrations/ready-made/"},{"categories":null,"content":"","tags":null,"title":"Reports","uri":"https://docs.multisafepay.com/accounting/reports/"},{"categories":null,"content":"","tags":null,"title":"Wrappers and SDKs","uri":"https://docs.multisafepay.com/developers/wrappers-sdks/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/developer/wrappers/laravel/"},{"categories":null,"content":"ConnectJS is a simplified checkout process that prevents the ‘punch out’ that occurs when we redirect customers to a MultiSafepay payment page to select a gateway and enter their payment details.\nMultiSafepay\u0026rsquo;s ConnectJS JavaScript library supports all payment methods and gift cards. It lets you directly integrate them in your payment process/checkout quickly and securely. By default, all available payment methods appear, but you can also display just one payment method or a selection. You can configure all payment methods while initiating the library.\nIntegration   Create a container for the payment page to load in.\n  Insert the following ID into the ConnectJS container:\n  \u0026lt;div id=\u0026quot;multisafepayContainer\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; When the order is created, add the reference to a global JavaScript object. The object must also contain the onPaymentAction method where ConnectJS sends the response to the ecommerce platform when the transaction is executed.  MultiSafepay = { containerId: 'multisafepayContainer' | '#multisafepayContainer', containerIframe: '', referenceId: 'HERE THE REFERENCE ID', onPaymentAction : function(e) { console.log('payment action event', e.message); }, onError : function(e) { console.log('onError event',e); } } Note: The containerId uses multisafepayContainer as an example class name. You can enter your own container name.\nAdd the ConnectJS library:  \u0026lt;script src=\u0026quot;https://devpay.multisafepay.com/js/connect.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; When making the create order request, include the setting for ConnectJS in the payment_options object.\nExample:\n{ \u0026quot;type\u0026quot;: \u0026quot;redirect\u0026quot;, \u0026quot;order_id\u0026quot;: \u0026quot;my-order-id-1\u0026quot;, \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot;: 9430, \u0026quot;description\u0026quot;: \u0026quot;Order with cart\u0026quot;, \u0026quot;var1\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;var2\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;var3\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;items\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;manual\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;payment_options\u0026quot;: { \u0026quot;notification_url\u0026quot;: \u0026quot;http://localapitest.multisafepay.com/client/json-local/notification?type=notification\u0026quot;, \u0026quot;redirect_url\u0026quot;: \u0026quot;http://localapitest.multisafepay.com/client/json-local/notification?type=redirect\u0026quot;, \u0026quot;cancel_url\u0026quot;: \u0026quot;http://localapitest.multisafepay.com/client/json-local/notification?type=cancel\u0026quot;, \u0026quot;close_window\u0026quot;: true, \u0026quot;connectjs\u0026quot;: { \u0026quot;version\u0026quot;: \u0026quot;1.0\u0026quot;, \u0026quot;show_cart\u0026quot;: true, \u0026quot;hide_coupons\u0026quot;: true, \u0026quot;settings\u0026quot;: { \u0026quot;redirect_mode\u0026quot;: \u0026quot;modal\u0026quot; }, } }, …….. } Settings You can customize certain parameters, for example:\n\u0026quot;connectjs\u0026quot;: { \u0026quot;show_cart\u0026quot;: true, \u0026quot;hide_coupons\u0026quot;: false, \u0026quot;settings\u0026quot;: { \u0026quot;redirect_mode\u0026quot;: \u0026quot;iframe\u0026quot; }, }  show_cart | boolean\nSets whether to display the shopping cart.\nDefault: false - doesn\u0026rsquo;t display the cart.\n redirect_mode | string\nSets how to display 3D Secure verification.\nOptions: iframe, redirect, modal.\nDefault: redirect.\nExample For a proof of concept, email integration@multisafepay.com\n","tags":null,"title":"ConnectJS","uri":"https://docs.multisafepay.com/integration-team/connectjs/"},{"categories":null,"content":"MultiSafepay can help you manage your email communications with customers. Use our preformatted and/or prewritten templates and populate them with your content.\n  Sign in to your MultiSafepay dashboard.\n  Go to Settings \u0026gt; Email templates.\n  Click the relevant website.\n  Click Add new template.\n  From the Type list, select the template type.\n  Template types   Bank Transfer details email (to customer)\nFor sending customers MultiSafepay\u0026rsquo;s bank details when they select Bank Transfer as payment method and you send a redirect transaction request.\nChargeback email (to merchant)\nFor notifying you when a customer requests a chargeback (recommended if you accept credit card payments).\nMake sure you add one or more email addresses to send these emails to in your MultiSafepay dashboard, under Contact information \u0026gt; Chargeback email.\nManual Capture reservation completed (to customer)\nFor notifying customers that you have manually captured reserved funds for an Uncleared transaction.\nManual Capture reservation completed (to merchant)\nFor confirming that you have manually captured reserved funds for an Uncleared transaction.\nPartial and/or full capture completed (to customer)\nFor notifying customers that you have partially or fully captured reserved funds for an Uncleared transaction.\nPartial and/or full capture completed (to merchant)\nFor confirming that you have partially or fully captured reserved funds for an Uncleared transaction.\nRefund complete email (to customer)\nFor notifying customers that you have processed their refund.\nSecond Chance email (to customer)\nFor sending customers a friendly reminder to complete a payment.\nMake sure you have enabled Second Chance in your MultiSafepay dashboard.\nTransaction completed email (to customer)\nFor sending payment confirmation to customers.\nTransaction completed email (to merchant)\nFor notifying you that a customer has successfully completed a payment.\n    From the Language list, select the email language.  The language set here is overridden by the locale parameter in create order API requests.  \n  Either click Load default template, or fill in the fields as required.\n In the From address field, enter the email address you want the email sent from, e.g. sales@yourcompany.com  If you enter a different from address than noreply@multisafepay.com to avoid emails being marked as spam, we recommend adding the following DNS record to your domain:\nv=spf1 ip4:213.189.0.0/23 ip4:185.99.128.0/22 mx   In the From name field, enter the name you want the email sent by, e.g. your company name. In the Subject field, enter a subject.    Edit the text either in the Body plain field, or if you know HTML and CSS, you can fully customize the content and layout in the Body HTML field.\nTo view the HTML/CSS code, click Source.   Adding links    Click the Link icon. Select the link type: URL, anchor link, or mail to link Fill in the additional fields as required. Click OK.      Using @tokens@   To save time, you can use @tokens@ to auto-fill personalized details into emails.\nFollow these steps:\n Go to the Body HTML editor on the email template page. Click the Token icon. Select a token from the list. Click OK.  The table below describes all available tokens.\n   Tags Result      ACCOUNT Account_id of FastCheckout customer    ACCOUNTADDRESS Customer address and street name    ACCOUNTADDRESSAPARTMENT Customer house number    ACCOUNTCITY Customer city of residence    ACCOUNTCOUNTRY Customer country of residence    ACCOUNT EMAIL Customer email address    ACCOUNTFIRSTNAME Customer first name    ACCOUNTLASTNAME Customer last name    ACCOUNTNR Your MultiSafepay AccountID    ACCOUNTZIPCODE Customer zip code    ADDRESS1 Your company address line 1    ADDRESS2 Your company address line 2    ADDRESS3 Your company address line 3    BANKHOLDERNAME Account holder used by the customer to process bank transfer transactions    BANKIBAN IBAN used by the customer to process bank transfer transactions    BANKPAYMENTID Reference used by the customer to process bank transfer transactions    BANKTRANSFERBIC BIC used by the customer to process bank transfer transactions    BANKTRANSFERHOLDER Account holder name of IBAN to receive the money    BANKTRANSFERID Reference used with the bank transfer    BIRTHYDAY Customer date of birth    CITY Your company city of residence    COMPANYNAME Your company name given in your MultiSafepay account    CONTENT Shopping cart info    COUNTRY ISO 3166 code for your company country    COUNTRYCODE ISO 3166 code for your company country    CURRENTDATE Today\u0026rsquo;s date    DESCRIPTION AccountID to receive money    DESTAMOUNT Amount to be received    DESTAMOUNTFORMATCUR Amount including currency to be paid by the customer via bank transfer transactions    DESTCURRENCY Currency of amount to be received    DESTFORMATAMOUNTCUR Currency and amount to be paid out    EMAIL Customer email address    FINANCIAL EMAIL Email address for financial email    FIRSTNAME Customer first name and email address set as sender for emails    FROMNAME Name of the sender\u0026rsquo;s email account    GENDER Customer gender    LASTNAME Customer last name    MERCHANTCITY Your company city of residence    MERCHANTCOUNTRY Your company country of residence    MERCHANTLOGOHTML HTML code for your logo    MERCHANTNAME Your company full name    MERCHANTPHONESUPPORT Your customer service phone number    MERCHANTSUPPORT EMAIL Your customer service email address    MERCHANTTRANSACTIONID Your reference number    PAYLINK Link to the payment page for this transaction    PAYMENTMETHOD Payment method used for this transaction    PHONE Your company phone number given in your MultiSafepay account    REFUNDDESTINATION Bank account number to receive the refund    REPORT EMAIL Email address to receive report emails    SITENAME Nname of your webshop given in your MultiSafepay account    SITEURL URL of your webshop given in your MultiSafepay account    STATE Province or state within the country    STATUS Status of the transaction    SUBJECT Subject of the email    TOTALAMOUNT Total of the order    TRANSACTIONID MultiSafepay PSP ID    TRANSCOMP EMAIL Email address to receive transaction completed mails    VARA var1 from your transaction request    VARB var2 from your transaction request    VARC var3 from your transaction request    VATNUMBER Your VAT number given in your MultiSafepay account    ZIPCODE Your company zip code         Adding your logo   To add your logo to emails to increase customers' recognition and trust, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Website settings \u0026gt; Upload a new file. In the Files directory, under Actions, click Copy to clipboard to copy the file\u0026rsquo;s URL (starting with https://media.multisafepay.com/merchants/). Go to Settings \u0026gt; Email templates. Click the relevant website. Click the orange pen icon to edit the template. Click the Image icon in the first row of the editor. In the Image properties window, in the URL field, paste the URL. Edit other parameters as required: height, border, horizontal space, vertical space, and alignment. Click OK.      Adding an inline frame   Inline frames (Iframes) are HTML documents embedded inside another HTML document, which you can use to insert content from another source into the email template.\n Go to the Body HTML editor on the email template page. Click the Iframe icon. In the Iframe window, enter the URL of the Iframe. Edit other parameters as required: width, height, alignment, name, and title. Click OK.      Click Save.\n  Support Email integration@multisafepay.com\n","tags":null,"title":"Customer emails","uri":"https://docs.multisafepay.com/account/customer-emails/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with Odoo.\n  Requirements    MultiSafepay account Odoo 13.0 Tested on Python 3.6      Support   Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue  The plugin receives regular updates from Odoo and MultiSafepay.\n  Installation  We recommend first installing the plugin in a test environment, following the Odoo installation procedure. Always make a backup.    Download the ZIP archive with module. Unpack the content of the .ZIP file. In your Odoo server (/mnt/extra-addons/), under Custom apps, add the payment_multisafepay_official folder. Install the required Python dependencies: pip3 install -r requirements.txt Alternatively, you can install them manually: pip3 install multisafepay==0.2.0 For more information about dependencies, see Python - MultiSafepay. Restart your Odoo server. In your Odoo backend, activate developer mode. Go to the Apps menu \u0026gt; Update apps list. Search for and open the MultiSafepay payments module payment_multisafepay_official. Click Install.  Configuration  Sign in to your Odoo backend. Go to the Invoicing or Website menu \u0026gt; Configuration \u0026gt; Payment acquirers. Select MultiSafepay payment acquirer. Go to Edit mode. To change the acquirer state, click Enabled or Test. (Default: Disabled) Enter Live and/or Test API key. On the Configuration tab, set Journal, and then click Save. To get payment methods from your MultiSafepay account, go the Configuration tab, click Pull payment methods.\nMake sure the relevant payment methods are activated for your account. Configure each payment method separately   Payment method settings    Name State Country: Disabled for some payment methods Customer group Order amount: Disabled for some payment methods Supported currency: Some payment methods process transactions only in EUR. Orders not created in EUR are converted to the required currency, using Odoo platform currency rate. This can only be configured by a system administrator.      User guide Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways    Sign in to your Odoo backend. Go to Invoicing \u0026gt; Payment method \u0026gt; Other payment acquirer \u0026gt; MultiSafepay. In the Title field, set the relevant payment method gateway IDs. Set the gateway logo and name.  Generic gateways support:\n All payment methods (filter by country, and minimum/maximum amount) Split payments, Second Chance reminders and virtual IBANs Refunds (completed orders only) Redirect requests only  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Payment methods   Payment methods    Cards: All Pay later methods: All Wallets: Alipay, Apple Pay, PayPal Banking methods:  Bancontact Bank Transfer Belfius CBC/KBC Dotpay EPS Giropay iDEAL SEPA Direct Debit Sofort Trustly      Updates   Updating the plugin    Sign in to your Odoo backend. Go to the Apps menu. Search for and open the MultiSafepay payments module. Click Upgrade.    ","tags":null,"title":"Odoo plugin","uri":"https://docs.multisafepay.com/odoo/"},{"categories":null,"content":"Ecwid provides an app to integrate with MultiSafepay payment pages.\n  Requirements   You will need a MultiSafepay account.     Support   Contact Ecwid.   Installation and configuration  Sign in to your Ecwid backend and install the MultiSafepay app from the App Store. Go to Ecwid control panel \u0026gt; Settings \u0026gt; Payment page. For each payment method, change the Payment processor value to MultiSafepay, and click Save. Click the MultiSafepay account details link. Enter your account ID, site ID, and secure code. Save the changes and enable your selected payment methods.  For more information, see Ecwid – How to set up.\nUser guide Payment methods   Payment methods    Cards: American Express, Mastercard, Visa and all co-branded cards Banking methods:  Bancontact Bank Transfer Giropay iDEAL SEPA Direct Debit Sofort      Wix For instructions on integrating Ecwid with Wix, see Ecwid – Adding your Ecwid store to Wix.\nYou can process refunds from your MultiSafepay dashboard, but refunds are not supported in Wix webshops.\n","tags":null,"title":"Ecwid app","uri":"https://docs.multisafepay.com/ecwid/"},{"categories":null,"content":"For MultiSafepay logos, see our Github repository – MultiSafepay logos.\nFor the logos and icons of all MultiSafepay payment methods, see our Github repository – MultiSafepay icons.\nGenerating logo PNGs To generate a portable network graphic (PNG) of a payment method logo to display on your site, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Tools \u0026gt; Payment logo designer. Select a layout template. From the Select elements window, select the logos you want to include. Under Result logo, check the preview. Under Order icons, you can:  Drag and drop logos to change the order in which they display. Remove logos by clicking Remove.   When you are happy with the preview, to generate the PNG image, click Download.   Support Email integration@multisafepay.com   ","tags":null,"title":"Logos and icons","uri":"https://docs.multisafepay.com/account/logos-icons/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for CS-Cart.\n  Requirements    MultiSafepay account CS-Cart 4.x Tested on PHP 7.0      Support    Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation  Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.    Unpack the content of the .ZIP file in the root of your CS-Cart webshop. To trigger the installation, go to yourdomain.com/msp_installer.php. Delete the msp_installer.php file. In your MultiSafepay account, provide your webhook endpoint.  Configuration  Sign in to your CS-Cart backend. Go to Administration \u0026gt; Payment methods. To add payment methods, click the + button. In the next screen, enter a name for the payment method to display during checkout. In the Processing unit field, specify the payment method. Fill out the other fields as required, and click Create. In the Configure tab, enter your account ID, site ID, and site code.  Extra options such as IP-Validation and debugmode are intended for developers. Leave them unchanged.\nUser guide Payment methods   Payment methods    Cards: All Banking methods: All Pay later methods: All except in3 Wallets: Alipay, Apple Pay, PayPal Prepaid cards:  Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Refunds Full refunds are supported in your MultiSafepay dashboard and backend. Refunding more than the original amount is not supported in your backend.\nSurcharges You can apply surcharges when configuring the payment method under Surcharge. Always enter the amount including VAT.\n Attention Dutch merchants\nWe strongly recommend not applying surcharges to pay later methods. This is now considered providing credit under the Wet op het consumentenkrediet and article 7:57 of the Burgerlijk Wetboek, and requires a permit from the Authority for Financial Markets (AFM).\n  Updates You can update the plugin in your CS-Cart backend or the CMS marketplace, or via SFTP.\n  Updating via SFTP    Make sure you have a backup of your production environment, and that you test the plugin in a staging environment. Download the plugin again above. Follow the Installation instructions from step 2 and then the Configuration instructions.    ","tags":null,"title":"CS-Cart plugin","uri":"https://docs.multisafepay.com/cs-cart/"},{"categories":null,"content":"Second Chance is a MultiSafepay service that automatically emails customers a payment link when they initiate but don\u0026rsquo;t complete a transaction. This helps boost conversion and impulse purchases. The first email is sent 1 hour after the customer initiates the payment, and a second after 24 hours.\nSecond Chance emails are also sent for manually generated payment links if the customer doesn\u0026rsquo;t click the link to complete payment.\nRequirements   Requirements     Under the GDPR, you must obtain documented consent from the customer to send Second Chance emails.\n  You must include the customer\u0026rsquo;s email address in the transaction API request.\n  Second Chance emails cannot be activated or sent to the customer while the status of the original transaction is Uncleared, or once it is Completed.\n  Payment links in Second Chance emails have the same lifetime as the original payment link, which is set to 30 days by default.\n  The following payments methods are not supported because they follow a different payment flow:\n AfterPay Bank Transfer Betaal per Maand SEPA Direct Debit Klarna Pay After Delivery      Activation and integration   Activating Second Chance    Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Website settings. Select the relevant website. Under Website functionality, select the Enable Second Chance checkbox.    To integrate, see API recipe – Send payment reminders.\nCustomizing emails The Second Chance email template is completely customizable.\n  Customizing emails    Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Email templates. Select the relevant website. Click Add new template. From the Type list, select Second Chance email (to consumer). From the Language list, select the relevant language. Click Load default template.  For how to customize the template, see Email Templates.   Potential errors   Second Chance emails can cause issues when running an enterprise resource planning (ERP) system.\n  If you have another order for the same total amount with the same customer email address completed in the last 120 minutes, Second Chance emails are suppressed.\n    External plugins   Second Chance emails can create conflicts with external warehouse systems. In some cases, this can be resolved using a cron job. However, this is not always a stable solution.\nFor example, when a customer cancels an order in the webshop, they can still pay for it using Second Chance within 30 days or a specified time frame. For more information, see API reference - Create order \u0026gt; days_active parameter.\nIf a cancelled order is subsequently paid for, MultiSafepay reopens the order in the webshop. A warehouse system may have already released the reservation on the order when it received Cancelled status, or may consider the Cancelled status permanent. As result, the items the customer ordered may no longer be available or in stock.\n  Second Chance reports For an overview of all Second Chance emails that resulted in successful payment, see Second Chance report.\n","tags":null,"title":"Second Chance reminders","uri":"https://docs.multisafepay.com/account/second-chance/"},{"categories":null,"content":"To upload files to MultiSafepay (e.g. during onboarding or when challenging chargebacks), follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Files. Under Upload a new file, click Choose file. Select the relevant file(s), and then click Open. Under Upload queue, to upload:  A specific file, click Upload. A batch of files, click Upload all.    ","tags":null,"title":"Files","uri":"https://docs.multisafepay.com/account/files/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with X-Cart.\n  Requirements     MultiSafepay account X-Cart 5.x Tested on PHP 7.0      Support    Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation  We recommend first installing the plugin in a test environment, following the X-Cart installation procedure. Always make a backup.    In the root of your webshop, unzip the content of the .ZIP file. Sign in to your X-Cart backend. Go to System tools \u0026gt; Cache management \u0026gt; Re-deploy the store. Click Start.  Configuration  Sign in to your X-Cart backend. Go to My Addons, and search for MultiSafepay. Locate and enable MultiSafepay Connect. This is required to enter your API key in a later step. Select the relevant payment methods, and then click Save changes. Go to Store setup \u0026gt; Payment methods. Locate and activate your enabled payment methods. For MultiSafepay Connect, click Configure. For Account type, you have two options: Live and Test. Enter your account ID, site ID, secure code, and API key.\nMake sure you enter the correct API key for the account type you want to use. Click Save changes.  User guide Payment methods   Payment methods    Cards: All Banking methods: All, except Request to Pay Pay later methods: All, except in3 Wallets: Alipay, PayPal Prepaid cards:  Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Refunds Full refunds are supported in your MultiSafepay dashboard and backend.\nYou cannot refund more than the original amount in your backend.\nUpdates You can update the plugin in your backend or the CMS marketplace, or via SFTP.\n  Updating in your backend   Note: Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.\n Download the plugin again above. Follow the Installation and configuration instructions from step 1.    ","tags":null,"title":"X-Cart plugin","uri":"https://docs.multisafepay.com/x-cart/"},{"categories":null,"content":"","tags":null,"title":"Chargebacks","uri":"https://docs.multisafepay.com/chargebacks/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for Drupal 7.\n  Requirements    MultiSafepay account Drupal 7.x Tested on PHP 7.0      Support    Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation and configuration  Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.    Unpack the content of the .ZIP file in the root of your Drupal 7 webshop. Sign in to your Drupal 7 backend. Go to Site settings \u0026gt; Modules. Enable the Commerce MultiSafepay JSON module, and your selected payment method modules. Click Save configuration. Go to Store settings \u0026gt; Advanced store settings \u0026gt; Payment methods. Enable the multisafepay core module. Enable the modules for each payment method. To configure each payment method, under Actions, click the Edit button. When the main module is installed, two rules are created but disabled by default:   MultiSafepay order paid in full: Order state to processing\nThis rule sets the order to processing when the order is paid in full.\n  MultiSafepay order complete: Shipped at MultiSafepay\nThis rule updates the transaction status to Shipped at MultiSafepay. For Pay After Delivery, Klarna, and E-Invoicing, this triggers the invoicing process.\n    User guide Payment methods   Payment methods    Cards: All Banking methods: All, except iDEAL QR and Trustly Pay later methods: E-Invoicing, Klarna, Pay After Delivery Wallets: Alipay, Apple Pay, PayPal Prepaid cards:  Boekenbon Fashioncheque Fashion gift card Gezondheidsbon Parfumcadeaukaart Paysafecard Wijn cadeau Yourgift      Refunds Full refunds are supported in your MultiSafepay dashboard and backed.\nRefunding more than the original amount is not supported in your backend.\nUpdates You can update the plugin in your backend or the CMS marketplace, or via SFTP.\n  Updating via SFTP    Make sure you have a backup of your production environment, and that you test the plugin in a staging environment. Download the plugin again above. Follow the Installation and configuration instructions from step 2.    ","tags":null,"title":"Drupal 7 plugin","uri":"https://docs.multisafepay.com/drupal-7/"},{"categories":null,"content":"","tags":null,"title":"FastCheckout iOS SDK","uri":"https://docs.multisafepay.com/developer/wrappers/fastcheckout-ios/"},{"categories":null,"content":"You can manually generate a link to a payment page to pass to a customer to complete payment.\nUse cases  A customer wants to adjust an existing order and instead of starting over with a new order. You need to create a transaction for a manually generated order. MultiSafepay collects a payment for an amount that doesn\u0026rsquo;t match any order. If you accept the payment, you need to manually generate a payment link and email it to support@multisafepay.com A Bank Transfer transaction has expired.  Payment methods All payment methods are supported. The payment page displays all methods activated for the relevant site. If you want to display specific payment methods, create a new site profile with only the relevant methods activated.\nLink lifetimes The lifetime of a payment link is how long it remains active for the customer to access the payment page and complete payment. The default is 30 days.\n  Adjusting link lifetimes   You can adjust the lifetime for some payment methods:\n   Adjustable Non-adjustable     Banking methods, except SEPA Direct Debit SEPA Direct Debit   Gift cards Edenred, Paysafecard   Wallets PayPal – Links are valid for 14 days. The lifetime is set by PayPal.   Credit cards     To set or adjust the lifetime, see API reference – Create order: days_active parameter.\nNote: This is different to transaction expiration times per payment method.\n  Number of customer attempts The customer can open the link to the payment page up to 20 times, after which the link is disabled.\nEach attempt creates a new transaction. If the customer completes payment in one of these transactions, the status of the other transactions remains Initialized until they expire.\nGenerating payment links You can generate payment links via:\n  Dashboard: New transactions   To generate a payment link for a new transaction, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Tools \u0026gt; Payment link generator. Click New payment link. From the Site list, select the relevant website. Under Amount, select the currency from the list, and then enter the whole value and cents. In the Order ID field, enter the order ID from your webshop.\nNote: The order ID for every payment link must be unique. In the Description field, enter a description of the order. In the Link expiration (days) field, enter the number of days for the link to remain active. Default: 30 days. To send Second Chance emails, select the Second chance email check box. Optionally, enter the customer\u0026rsquo;s:  First name and Last name Email address Country Language   To include additional information, in the top-right corner, click Advanced mode to display more fields. Click Generate payment link. In the green bar that appears, copy the link from the green bar and pass it to the customer.      Dashboard: Existing transactions   To generate a payment link for an existing transaction, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview. Click on the relevant transaction. In the Transaction details page, under Order summary, click Payment link \u0026gt; Duplicate this order.  Note: The order ID must be unique.\n    API   See API reference:\n Create order \u0026gt; Payment page/link Recipes – Create a payment page/link    Managing payment links For an overview of all payment links:\n Sign in to your MultiSafepay dashboard. Go to Tools \u0026gt; Payment link generator.    Payment link statuses      Status Description     Active The customer hasn\u0026rsquo;t paid yet.   Completed The customer has paid.   Cancelled You cancelled the link.   Expired The link lifetime has expired.      Cloning payment links If you need to generate multiple payment links, you can speed up the process by copying existing links.\n  Cloning a payment link    Sign in to your MultiSafepay dashboard. Go to Tools \u0026gt; Payment link generator. Next to the relevant payment link, click the blue copy icon.\nA new link generator window opens with the same details prefilled. Click Generate payment link.    Cancelling payment links   Cancelling a payment link   API\nSee Update or cancel an order.\nDashboard\n Sign in to your MultiSafepay dashboard. Go to Tools \u0026gt; Payment link generator. Next to the relevant payment link, click the red cross icon.\nThe status changes to Cancelled.     Support Email integration@multisafepay.com   ","tags":null,"title":"Payment links","uri":"https://docs.multisafepay.com/payment-links/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for Drupal 8 \u0026amp; 9.\n  Requirements    MultiSafepay account Drupal 8.9 and above or Drupal 9.x Tested on PHP 7.2 Drupal Commerce 2.x      Support   Drupal no longer provides support for Drupal 8.9.x.\nFor how to upgrade to Drupal 9, see Drupal - Upgrading from Drupal 8 to Drupal 9 or higher.\nContact MultiSafepay:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation These instructions are for Composer. You can also install the plugin in your backend.\n Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.   To install the latest stable version of the Drupal Commerce 2.x plugin, run the following command in your terminal:\ncomposer require drupal/commerce_multisafepay_payments Configuration  Sign in to your Drupal backend. Go to Commerce \u0026gt; Configuration \u0026gt; Payments \u0026gt; MultiSafepay settings. Enter your account ID, site ID, and site API key. Go to Commerce \u0026gt; Configuration \u0026gt; Payments \u0026gt; Payment gateways. Configure the options for all supported payment methods activated in your MultiSafepay dashboard.  User guide Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways    Sign in to your Drupal backend. Go to Commerce \u0026gt; Configuration \u0026gt; Payments \u0026gt; Payments gateways \u0026gt; Add payment gateway \u0026gt; Generic gateway. Set the relevant payment method gateway IDs and the gateway label.  Generic gateways support:\n All payment methods (filter by country, and minimum/maximum amount) Split payments, Second Chance reminders and virtual IBANs Redirect requests only  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Payment methods   Payment methods    Cards: All Banking methods: All Pay later methods: All, except in3 Wallets: Alipay, Apple Pay, PayPal Prepaid cards:  Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Refunds Full refunds are supported in your MultiSafepay dashboard and backend.\nYou can\u0026rsquo;t refund more than the original amount in your backend.\nUpdates You can update the plugin in your backend or the CMS marketplace, or via SFTP.\n  Updating the plugin in your backend    Make sure you have a backup of your production environment, and that you test the plugin in a staging environment. Download the plugin again above. Follow the Installation instructions and the Configuration instructions from step 2.    Upgrading to Drupal 9 Drupal no longer provides support for Drupal 8.9.x.\nFor how to upgrade Drupal 8 to Drupal 9, see Drupal - Upgrading from Drupal 8 to Drupal 9 or higher.\n","tags":null,"title":"Drupal 8 \u0026 9 plugin","uri":"https://docs.multisafepay.com/drupal-8-9/"},{"categories":null,"content":"","tags":null,"title":"FastCheckout Android SDK","uri":"https://docs.multisafepay.com/developer/wrappers/fastcheckout-android/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with OsCommerce.\n  Requirements    MultiSafepay account OsCommerce 2.3 Tested on PHP 7.0  Note: Version 3.0.0 is tested on PHP 5.6. Previous versions are no longer tested for compatibility. For more information, email sales@multisafepay.com     Support   For support, contact OsCommerce.\nContact MultiSafepay:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation and configuration  We recommend first installing the plugin in a test environment, following the OsCommerce installation procedure. Always make a backup.    Unpack the content of the .ZIP file in the root of your webshop. Sign in to your OsCommerce backend. Go to Modules \u0026gt; Payment. Click Install modules in the top-right corner. Enter your API key, and then complete the other fields as required.  User guide Payment methods   Payment methods    Cards: All Pay later methods: E-Invoicing, Klarna, Pay After Delivery Wallets: PayPal Banking methods:  Bancontact Bank Transfer CBC/KBC Dotpay EPS Giropay iDEAL SEPA Direct Debit Sofort   Prepaid cards:  Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Refunds Full refunds are supported in your MultiSafepay dashboard and backend.\nYou can\u0026rsquo;t refund more than the original amount in your backend.\nUpdates You can update the plugin in your backend or the CMS marketplace, or via SFTP.\n  Updating via SFTP    Make sure you have a backup of your production environment, and that you test the plugin in a staging environment. Download the plugin again above. Follow the Installation and configuration instructions from step 2.    ","tags":null,"title":"OsCommerce plugin","uri":"https://docs.multisafepay.com/oscommerce/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s plugin for PWA Studio (Venia).\n  Requirements    You will need a MultiSafepay account. To support GraphQL queries, install the MultiSafepay Magento 2 GraphQL plugin. You must also meet Magento\u0026rsquo;s requirements for PWA Studio (Venia). See Magento – Prerequisites.      Support   To report a bug or suggest an improvement, create an issue in our GitHub repository.\nFor support:\n Email integration@multisafepay.com Post in the Magento – MultiSafepay Slack channel      Payment methods   By default, this plugin supports all payment methods supported by our Magento 2 plugin out of the box, except:\n Request To Pay Direct Debit E-Invoicing Pay After Delivery  You can integrate these payment methods yourself.\nSee MultiSafepay GitHub – PWA Studio components.\n  Installation and configuration To install the MultiSafepay plugin in your PWA Studio application, see MultiSafepay GitHub – Installation guide.\n","tags":null,"title":"PWA Studio (Venia) plugin","uri":"https://docs.multisafepay.com/pwa-studio/"},{"categories":null,"content":"This technical manual is for installing and configuring with MultiSafepay\u0026rsquo;s free plugin for integrating with ScandiPWA.\n  Requirements    You will need a MultiSafepay account. To support GraphQL queries, install the MultiSafepay Magento 2 GraphQL plugin. You must also meet ScandiPWA and Magento requirements. See ScandiPWA – Prerequisites.      Support   To report a bug or suggest an improvement, create an issue in our GitHub repository.\nFor support:\n Email integration@multisafepay.com Post in the Magento Slack channel #multisafepay-payments      Payment methods    Cards: All Banking methods: All Pay later methods: All Wallets: All Prepaid cards:  Baby gift card Beauty and Wellness gift card Boekenbon Edenred Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Givacard Good4fun Goodcard Nationale tuinbon Paysafecard Parfumcadeaukaart Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Installation and configuration See MultiSafepay GitHub – Installation guide.\n","tags":null,"title":"ScandiPWA plugin","uri":"https://docs.multisafepay.com/scandipwa/"},{"categories":null,"content":"MultiSafepay provides a free plugin to integrate with Vue Storefront.\nInstallation and configuration See MultiSafepay GitHub – Installation guide.\nSupport Email integration@multisafepay.com\n","tags":null,"title":"Vue Storefront plugin","uri":"https://docs.multisafepay.com/vue-storefront/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay free plugin for integrating with VirtueMart.\n  Requirements    MultiSafepay account Joomla 2.5 \u0026amp; 3.x + Virtuemart 2.x \u0026amp; 3.x Tested on PHP 7.0      Support    Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation  We recommend first installing the plugin in a test environment, following the VirtueMart installation procedure. Always make a backup.    Sign in to your VirtueMart backend. Go to Extensions \u0026gt; Extension manager. Install the Plugin_VirtueMart_x.x.x.zip file using Drag and drop or Browse for file. Click Upload \u0026amp; install.  Configuration  Sign in to your VirtueMart backend. Go to Extensions \u0026gt; Plugins. In the search box, enter MultiSafepay, and then set the plugin status to Enabled. Go to Components \u0026gt; VirtueMart. Click Shop \u0026gt; Payment methods. To install and configure each payment method separately:  Click New. Set the payment method to VirtueMart – Payment, MultiSafepay. To install, save the Payment method name.   On the Configuration tab, enter your:  Account ID (top-right corner of your dashboard) Site ID, API key, and secure code Gateway ID    User guide Checkouts If a customer selects Apple Pay at checkout but isn\u0026rsquo;t on an Apple device, they receive a notification to select another payment method.\nPayment methods   Payment methods    Cards: All Banking methods: All Pay later methods: All Wallets: All Prepaid cards:  Beauty and Wellness gift card Boekenbon Edenred Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Postepay Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Refunds Full refunds are supported in your MultiSafepay dashboard and your backend.\nYou cannot refund more than the original amount in your backend.\nUpdates You can update the plugin in your backend and the CMS marketplace, via SFTP.\n  Updating in your backend   Note: Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.\n Download the plugin again above. Follow the Installation and configuration instructions from step 2.    ","tags":null,"title":"VirtueMart plugin","uri":"https://docs.multisafepay.com/virtuemart/"},{"categories":null,"content":"Sana Commerce (version 9.3 and higher) provides a free app to integrate with MultiSafepay.\nIntegration See Sana Commerce – MultiSafepay.\nSupport See Sana Commerce – Contact.\n","tags":null,"title":"Sana Commerce app","uri":"https://docs.multisafepay.com/sana-commerce/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/developer/wrappers/java/"},{"categories":null,"content":"Chargebacks arise when a cardholder disagrees with or doesn\u0026rsquo;t recognize a transaction charged to their credit card, and requests the issuer to reverse it. The card scheme notifies MultiSafepay and reclaims the transaction amount from you.\nYou are solely liable for paying chargebacks.\nThe most common reasons for requesting chargebacks are fraud, non-delivery of goods, or goods not as described.\nChargeback period Card schemes generally allow cardholders to request chargebacks for up to 180 days after the transaction. If you require a longer period (e.g. for annual subscriptions paid in advance), you may be able to negotiate this with the card scheme.\nBy offering credit card payment methods, you agree to the cardholder rights guaranteed by the card schemes.\nSEPA Direct Debit Customers can request a chargeback within 56 days, or for unauthorized transactions (i.e. without verifiable consent from the customer) within 13 months.\nYou cannot dispute chargebacks and there is no facilitated process like there is for credit card chargebacks.\nChargebacks can cost up to 65 EUR in bank fees.\nSee also  Disputing chargebacks Minimizing chargebacks  To help reduce chargebacks, see Your logo in online banking.\n","tags":null,"title":"About chargebacks","uri":"https://docs.multisafepay.com/chargebacks/about/"},{"categories":null,"content":"","tags":null,"title":"Accounting integrations","uri":"https://docs.multisafepay.com/accounting/integrations/"},{"categories":null,"content":" If using a ready-made integration:\n First check that the payment method is supported. Once activated for your account, you must also enable the payment method in your backend.     Sign in to your MultiSafepay dashboard. Go to Settings. To activate TrustPay for:  All your websites, go to Payment methods. A specific website, go to Website settings, and click the relevant website.  Select the checkbox for TrustPay. Click Save changes.   If the payment method isn\u0026rsquo;t visible in your dashboard, email integration@multisafepay.com   ","tags":null,"title":"Activating TrustPay","uri":"https://docs.multisafepay.com/payment-methods/trustpay/activation/"},{"categories":null,"content":"You can integrate MultiSafepay with Actuals. Actuals imports new transactions daily, between 02:00 AM and 05:00 AM (CET/CEST).\nIntegrating with Actuals To connect your Actuals account to your MultiSafepay account:\n Sign in to your Actuals account. Go to Configuration. Under Payment service provider \u0026gt; MultiSafepay, click Add. In the Configuration name field, rename the configuration, if relevant. In the MultiSafepay API Key field, enter your MultiSafepay site API key, and then click Save. To check the connection, go to Configuration. Under In-use sources, check that the Status of your MultiSafepay configuration is Live.   Support Email support@multisafepay.com   ","tags":null,"title":"Actuals","uri":"https://docs.multisafepay.com/accounting/integrations/actuals-live/"},{"categories":null,"content":"You can import MultiSafepay Accountant export reports (in MT940 format) into AFAS.\nFor import instructions, see AFAS – Contact.\nThird-party integrations Forque For generating automated accounting reports, see Forque – AFAS.\nDe Viske ICT For middleware solutions to automate processes and efficiently exchange data between AFAS and other applications, see De Viske ICT – Applicaties.\n Support Email support@multisafepay.com   ","tags":null,"title":"AFAS Software","uri":"https://docs.multisafepay.com/accounting/integrations/afas/"},{"categories":null,"content":"This page provides general guidance on refunding credit card payments.\nRefund rules   You cannot refund more than the original transaction.\n  MultiSafepay sends refunds to the issuer within 1 business day.\n  Whether or not the refund is visible to the customer depends on the issuer\u0026rsquo;s system.\n  Depending on the issuer, the amount may not appear directly on the customer\u0026rsquo;s card. We recommend that they contact the issuer. If they need an acquirer reference number (ARN), they can email support@multisafepay.com\n  You can process refunds via MultiSafepay for up to 180 days after payment was completed.\n  Reversals If you process a partial refund on the same day, this is technically called a \u0026ldquo;reversal\u0026rdquo;, but for simplicity is logged as a refund in your MultiSafepay dashboard.\nOn the customer\u0026rsquo;s credit card statement, the transaction may either be:\n Adjusted to the new amount= Partial reversal Not debited at all= Full reversal  Support For any questions, email support@multisafepay.com\n","tags":null,"title":"Card refunds","uri":"https://docs.multisafepay.com/refunds/credit-cards/"},{"categories":null,"content":"","tags":null,"title":"Credit and debit cards","uri":"https://docs.multisafepay.com/payment-methods/credit-debit-cards/"},{"categories":null,"content":"This page sets out ways of integrating MultiSafepay with e-Boekhouden.\nTo import MultiSafepay accountant export reports into e-Boekhouden (MT940 or CSV format), see e-Boekhouden – Contact.\nTo add MultiSafepay payment links to e-Boekhouden invoices to let customers pay directly, see e-Boekhouden – How do I insert a payment link or image in my invoices.\nPSP Betalingen integration PSP Betalingen has developed an integration that connects your MultiSafepay account to e-Boekhouden, continually importing your transactions so you can automate reconciliation.\nFor more information, see PSP Betalingen – Koppeling MultiSafepay e-Boekhouden.\nTo connect your MultiSafepay account to e-Boekhouden:\n See PSP betalingen – Handleiding: MultiSafepay e-Boekhouden. You will need a MultiSafepay site API key.   Support Email support@multisafepay.com   ","tags":null,"title":"e-Boekhouden","uri":"https://docs.multisafepay.com/accounting/integrations/e-boekhouden/"},{"categories":null,"content":"You can import MultiSafepay accountant export reports (in MT940 format) into Exact Globe or Online.\nPrerequisites   Prerequisites     You must first provide Exact with an additional international bank account number (IBAN). This can be a dummy (placeholder) IBAN.\n  Exact Basic / Standard package doesn\u0026rsquo;t support the MT940 import function. You need at least Exact Advanced.\n  Lightspeed users must request Lightspeed to make an adjustment to make sure order numbers appear in the correct fields in Exact Online to successfully match the MultiSafepay MT940.\n  Exact Globe and Exact Online both import and match MultiSafepay MT940 reports provided that:\n Your accounting package can process MT940 files. The order numbers in the MT940 files also appear in the correct invoice fields in your accounting platform. The customer\u0026rsquo;s name and order amounts that appear in the exported MT940 files match your accounting platform.      Generating dummy IBANs   Generating dummy IBANs    Go to IBAN Calculator – Calculate an IBAN. From the Country drop-down menu, select The Netherlands. Under Bank Code, enter a bank, e.g. ING Group. In the Account number field, enter any 7 digits. Click Calculate IBAN.\nA dummy IBAN and BIC code are generated.    Submitting IBANs   Submitting IBANs to Exact Globe    Sign in and go to Bank accounts. Click New. Under Type, select Payment service provider. Enter the dummy IBAN and select the same bank as before, e.g. ING Group. Click Save.\nYou can now register all transactions linked to this IBAN.      Submitting IBANs to Exact Online    Sign in and go to Financial \u0026gt; Banking \u0026amp; Cash \u0026gt; Bank accounts \u0026gt; Overview. Click New. Enter your dummy IBAN, and then click Save.\nYou can now register all transactions linked to this IBAN.    Generating accountant exports   Generating accountant exports   To export MT940 reports from your MultiSafepay dashboard, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Reports \u0026gt; Accountant Export:  In Data Selection, select a date range. In the Report Type field, select MT940.   Click Advanced options:  In the Bank Account / IBAN field, enter the dummy IBAN. In the BIC field, enter the dummy BIC code.      Importing into Exact Online   Importing into Exact Online   To import an MT940 report into Exact Online, follow these steps:\n Sign in to your Exact Online account. Go to Financial \u0026gt; Banking \u0026amp; Cash \u0026gt; Statements \u0026gt; Import. Click Choose File, and then select the MT940 file you want to upload. Click Import.    Denovit integration You can automatically insert MultiSafepay payment links into Exact invoices using the Denovit payment link module.\n  Setting up Denovit    Sign in to your Denovit account. Go to your Dashboard, and then select the Paylink module. Connect to your Exact account. Under PSP settings, enter your MultiSafepay API key and the payment conditions you use in Exact. Adjust other settings as relevant, e.g. personalize your email template, thank-you page, or notification email to improve customer experience.  For each new invoice in Exact, if you:\n Email: The customer receives a second email containing a payment link, in addition to the normal email. Print and process: The customer receives an email containing a payment link.    xCore integration Automatically reconciling sales from your site with payments received via MultiSafepay saves time and increases accuracy.\nxCore offers two reconciliation apps for Exact accounting tools. The apps automatically retrieve the details of all payments for the day from MultiSafepay, and then match each payment to the corresponding open item in Exact.\nExact Online    For more information, see xCore – Afletteren 2.0 Exact Online with MultiSafepay.\nExact Globe    For more information, see xCore – Afletteren MultiSafepay met Exact Globe.\n Support Email support@multisafepay.com   ","tags":null,"title":"Exact","uri":"https://docs.multisafepay.com/accounting/integrations/exact/"},{"categories":null,"content":"With direct integration, the Google Pay button appears in your checkout page, where customers complete payment without being redirected to a payment page.\n  Note: By accessing or using the Google Pay API, you agree to the Google API Terms of Service.   Prerequisites  Google Pay must be activated in your MultiSafepay account. You need to register your business and website in Google Pay\u0026rsquo;s Business Console. You must serve an HTTPS webpage with a TLS domain-validated certificate.    Supported browsers   Customers can use the following supported web browsers:\n Apple Safari Google Chrome Microsoft Edge Mozilla Firefox Opera UCWeb UC Browser    Step 1: Initialize Add the Google Pay library Add the Google Pay JavaScript library to the bottom of the \u0026lt;body\u0026gt; of your checkout page:\n\u0026lt;script async src=\u0026quot;https://pay.google.com/gp/p/js/pay.js\u0026quot; onload=\u0026quot;onGooglePayLoaded()\u0026quot;\u0026gt; \u0026lt;/script\u0026gt; Note: The onload event handler is used to display the Google Pay button. For more information, see Display the Google Pay button.\nPlace the Google Pay button Create an element in the \u0026lt;body\u0026gt; of your checkout page where you want to display the Google Pay button:\n\u0026lt;div id=\u0026quot;button-container\u0026quot; style=\u0026quot;width: 160px; height: 40px;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; Note: This element is populated in a later step. For more information, see Display the Google Pay button.\nConfigure Google Pay 1. Define which version of the Google Pay API you are using.\nOn the client-side, create an object containing the major and minor versions of the Google Pay API that your integration supports:\nconst baseRequest = { apiVersion: 2, apiVersionMinor: 0 }; 2. Configure the Google Pay payment token request.\nNote: Google Pay uses payment tokens to encrypt the customer\u0026rsquo;s payment details for secure processing.\nCreate a tokenizationSpecification object:\nconst tokenizationSpecification = { type: 'PAYMENT_GATEWAY', parameters: { 'gateway': 'multisafepay', 'gatewayMerchantId': 'yourMultiSafepayAccountId' } };  For gateway, specify multisafepay. For gatewayMerchantId, specify your MultiSafepay account ID.  3. Define supported payment card networks.\nCreate an allowedCardNetworks array containing card networks accepted by your website:\nconst allowedCardNetworks = [\u0026quot;MAESTRO\u0026quot;, \u0026quot;MASTERCARD\u0026quot;, \u0026quot;VISA\u0026quot;]; Options: MAESTRO, MASTERCARD, VISA.\nFor more information about supported payment card networks, see Google Pay – Request objects.\n4. Define supported authentication methods.\nCreate an allowedCardAuthMethods array containing authentication methods accepted by your website:\nconst allowedCardAuthMethods = [\u0026quot;CRYPTOGRAM_3DS\u0026quot;, \u0026quot;PAN_ONLY\u0026quot;]; Options: CRYPTOGRAM_3DS, PAN_ONLY.\nFor more information about authentication methods, see Google Pay – Request objects.\n5. Describe your supported payment methods.\nCombine the supported payment card networks and authentication methods to describe what your site supports for the CARD payment method:\nconst baseCardPaymentMethod = { type: 'CARD', parameters: { allowedAuthMethods: allowedCardAuthMethods, allowedCardNetworks: allowedCardNetworks } }; 6. Extend the baseCardPaymentMethod object to include the tokenizationSpecification:\nconst cardPaymentMethod = Object.assign( {tokenizationSpecification: tokenizationSpecification}, baseCardPaymentMethod ); Initialize Google Pay Create a Google Pay paymentsClient object and specify the relevant environment:\nconst paymentsClient = new google.payments.api.PaymentsClient({environment: 'TEST'}); When you have finished testing, change the environment to PRODUCTION.\nStep 2: Display the button Check for Google Pay support 1. Add your supported payment methods to your baseRequest object:\nconst isReadyToPayRequest = Object.assign({}, baseRequest); isReadyToPayRequest.allowedPaymentMethods = [baseCardPaymentMethod]; 2. Create an event handler for when the Google Pay JavaScript library is loaded.\nWith the isReadyToPay() method, check if the Google Pay API is supported by the customer\u0026rsquo;s device and browser:\nfunction onGooglePayLoaded() { paymentsClient.isReadyToPay(IsReadyToPayRequest) .then(function(response) { if (response.result) { addGooglePayButton(); } }) .catch(function(err) { // Show error in developer console for debugging console.error(err); }); } Display the Google Pay button To create a Google Pay button, populate the button-container element:\nfunction addGooglePayButton() { const buttonContainer = document.getElementById('button-container'); const button = paymentsClient.createButton({ buttonType: 'plain', onClick: onGooglePaymentButtonClicked }); buttonContainer.appendChild(button); } Style the button For infomation about styling your Google Pay button, see Google Pay:\n Customize your button User experience best practices Brand guidelines  Step 3: Create a payment request Create a function that returns a PaymentDataRequest object:\n Describe your integration\u0026rsquo;s support for the Google Pay API. Add your supported payment methods. Add the amount and currency for the customer to authorize. Add your merchant name and Google Pay merchant ID for display.  function getGooglePaymentDataRequest() { const paymentDataRequest = Object.assign({}, baseRequest); paymentDataRequest.allowedPaymentMethods = [cardPaymentMethod]; paymentDataRequest.transactionInfo = { totalPriceStatus: 'FINAL', totalPrice: '123.45', currencyCode: 'EUR', countryCode: 'NL' }; paymentDataRequest.merchantInfo = { merchantName: 'Example Merchant' merchantId: '12345678901234567890' }; return paymentDataRequest; } You will call this function from the Google Pay button event handler in the next step. This way, attributes like the totalPrice can be updated up until the customer chooses to pay.\nFor more information about the transactionInfo object, see Google Pay – TransactionInfo.\nmerchantInfo values In the TEST environment:\n merchantName = Example Merchant merchantId = 12345678901234567890  In the PRODUCTION environment:\n merchantName = Your merchant name merchantId = Your Google Pay merchant ID  To see your Google Pay merchant ID, sign in to your Google Pay Business Console.\nFor more information about the merchantInfo object, see Google Pay – Request object.\nStep 4: Handle the interaction 1. Create an event handler for the Google Pay button:\n When the customer clicks the Google Pay button, call the loadPaymentData() method. Google prompts the customer to select their card and authorize the payment. After the customer authorizes the payment, handle the response from the Google Pay API.  function onGooglePaymentButtonClicked() { const paymentDataRequest = getGooglePaymentDataRequest(); paymentsClient.loadPaymentData(paymentDataRequest) .then(function(paymentData) { processPayment(paymentData); }) .catch(function(err){ console.error(err); }); } 2. Pass the paymentData from the response to your server:\nfunction processPayment(paymentData) { // send paymentData to your server } For more information about the paymentData object, see Google Pay – Response objects.\nStep 5: Create an order From your server, create an order \u0026gt; Wallet order. See also Examples \u0026gt; Google Pay direct.\nFor the gateway_info.payment_token, use PaymentData.PaymentMethodData.PaymentMethodTokenizationData.token.\nStep 6: Redirect the customer In response to the API request you made in the previous step, you receive a payment_url (see API Reference – create order \u0026gt; Wallet order. See also Examples \u0026gt; Google Pay direct).\nPass the payment_url from your server to the customer\u0026rsquo;s device and redirect the customer to the URL:\ndocument.location = payment_url Depending on how the customer\u0026rsquo;s card is stored in their Google Pay account, the URL references your success page, or a 3D Secure authentication page.\nIf the customer\u0026rsquo;s credit card was stored as:\n Token (CRYPTOGRAM_3DS), the payment_url redirects to your success page. Card on file (PAN_ONLY), the payment_url may redirect to a 3D Secure authentication page.  If 3D Secure authentication is required, the customer is automatically redirected to your success page after authentication.\nTest and go live After you\u0026rsquo;ve implemented the steps above, to test your integration:\n MultiSafepay\u0026rsquo;s Google Pay testing procedure Google Pay – Integration checklist  Then, when you\u0026rsquo;re ready to go live:\n When constructing the paymentsClient object, set the environment to PRODUCTION. Set the attributes of merchantInfo to your business name and Google Pay merchant ID.  ","tags":null,"title":"Google Pay direct integration","uri":"https://docs.multisafepay.com/google-pay/direct/"},{"categories":null,"content":"This page lists errors you may encounter in transaction responses or statuses, or under Offline actions in your MultiSafepay dashboard, and possible causes.\nError 1000: Unknown message type The payment method is disabled or unavailable.\nTo check the payment method settings for your MultiSafepay account, email support@multisafepay.com\nError 1001: Invalid amount The create order request contains an invalid amount.\nAll amounts must be given in cents, e.g. 10 EUR = 1000 not 10,00. The minimum transaction amount we can process is 1 euro cent (0.01 EUR).\nError 1002: Invalid currency The currency is not supported. The standard currency for all transactions is Euros.\nFor help identifying currencies, see ISO-4217.\nError 1003: Invalid account ID The create order request contains an invalid account ID.\nCheck that your account ID was properly formatted, e.g. fix typing errors and remove blank spaces. Your account ID appears in the top-right corner of your MultiSafepay account.\nError 1004: Invalid site ID The create order request contains an invalid site ID, or the site ID provided doesn’t match the account ID.\nTo retrieve a site ID from your MultiSafepay dashboard, go to Settings \u0026gt; Website settings, and then click the relevant website.\nError 1005: Invalid secure code The create order request contains an invalid secure code, or the secure code doesn\u0026rsquo;t match the account ID or site ID provided.\nTo retrieve a secure code from your MultiSafepay dashboard, go to Settings \u0026gt; Website settings, and then click the relevant website.\nError 1006: Invalid transaction ID The create order request contains an invalid transaction ID.\nThe transaction ID provided must be unique. The transaction ID you provided may have already been used for a completed transaction for that website (site ID). Consider creating a new website profile in your MultiSafepay dashboard.\nError 1007: Invalid IP address The ip_address or forwarded_ip parameters in the create order request contains an invalid customer IP address.\nFor pay later methods and credit cards, we check the customer\u0026rsquo;s IP address as part of our fraud check.\nError 1008: Invalid description The order description in the create order request was missing or invalid.\nEnter a free text description, which appears in the order details in your MultiSafepay dashboard and on the customer’s bank statement (if supported by the customer’s bank).\nFormat: Max 200 characters.\nHTML is not supported. Use the required shopping_cart object.\nError 1010: Invalid variable The var1, var2, or var3 parameter in the create order request contains an invalid value.\nCheck if the:\n Parameters contain any special characters, which must be UTF-8 encoded Value exceeds the 100 character limit  Error 1011: Invalid customer account ID The customer account ID in the create order request was invalid or missing.\nCheck:\n The account ID exists The formatting, e.g. fix typing errors and remove any blank spaces  Error 1012: Invalid customer security code The customer security code in the create order request was invalid or missing.\nCheck that the security code:\n Matches the account ID Is formatted correctly, e.g. fix typing errors and remove any blank spaces  Error 1013: Invalid signature The MD5 signature supplied with the message doesn’t match the message contents for the transaction.\n Check that the values used to calculate the MD5 signature are correct. Remove unnecessary blank spaces from the MD5 signature. Calculate the MD5 hash from the concatenation of the amount, currency, account ID, site ID, and transaction ID.  Error 1014: Unspecified error Check your logs and your MultiSafepay dashboard message screen for other error codes that may be causing this error.\nFor help diagnosing unspecified errors, email integration@multisafepay.com\nError 1015: Account unknown The account ID in the create order request was invalid or missing.\nCheck that the account ID is formatted correctly, e.g. fix typing errors and remove blank spaces.\nError 1016: Missing data The create order request is missing a required data type. This error most commonly occurs when the customer is directed to a payment page, or when you generate a payment page link.\nCheck that the site ID, secure code, and transaction ID are included.\nError 1017: Insufficient funds The customer has insufficient funds in their MultiSafepay wallet to complete payment.\nAdvise the customer to top up their MultiSafepay wallet.\nError 1018: Invalid country code The country code in the create order request was not recognized.\n Check that the country code is correct. Ensure you provide country codes in ISO3166-1 format.  Error 1019: Site is inactive The requested site is disabled in your MultiSafepay dashboard.\nTo reactivate the website in your MultiSafepay dashboard:\n Go to Settings \u0026gt; Website settings, and select the relevant website. From the Status list, select Active. Click Save.  Error 1020: Account is blocked For security reasons, we have blocked your MultiSafepay account and it cannot process payments.\nEmail sales@multisafepay.com\nError 1021: Cannot create transaction Direct requests don\u0026rsquo;t involve a payment page, which means we can\u0026rsquo;t filter out connection errors. This error can cause an increase in unpaid or expired transactions.\nCheck whether the customer’s bank is experiencing a temporary malfunction.\nError 1022: Cannot initiate transaction The transaction may already exist with a third party, e.g. if an iDEAL transaction already exists and another direct iDEAL transaction is initiated, you receive an Error 1022: Kan geen transactie starten: ERR_EXISTS: transaction error.\nError 1023: No gateway available The transaction may already exist with a third party, e.g. if an iDEAL transaction already exists and another direct iDEAL transaction is initiated, you receive an Error 1022: Kan geen transactie starten: ERR_EXISTS: transaction error.\nThe gateway for the payment method is unavailable. This error can occur with direct requests.\n Check whether the specified payment gateway supports direct requests. Ensure a payment gateway was specified in the create order request. Check if the website is correctly configured for direct requests.  Error 1024: Transaction refused For Pay After Delivery and credit card transactions:\n The customer data may be incorrect. The credit card fraud indicator score indicated that this might be a fraudulent transaction. The customer’s risk profile indicated a high risk of default on a Pay After Delivery transaction.  Check that the:\n Credit card information is correct Customer data is correct Customer data matches the credit card  Error 1024: For Cloudflare – Incorrect customer IP address Cloudflare overwrites the customer IP address field.\nTo provide the correct IP address, see Cloudflare – Restoring original visitor IPs.\nError 1025: Only one currency allowed in shopping cart The create order request contains multiple currencies.\nEnsure all items in the shopping cart use the same currency.\nError 1026: Cart currency different to transaction currency The currency of the transaction doesn’t match the currency of all items in the shopping cart.\nEnsure that the transaction currency matches the currency of all items in the shopping cart.\nError 1027: Cart amount must equal transaction amount The transaction amount differs from the sum of the individual items in the order.\nCheck that the:\n Transaction amount was entered correctly Amount for all items was entered correctly  For Pay After Delivery payments, the system checks the amount for each item, the total amount, and the VAT. Ensure the VAT amount is provided. If no VAT was applied, enter 0%.\nError 1028: Incorrect tax rate in rule The create order request contains an invalid custom tax rule.\n Check that the tax rate specified was formatted correctly as #.##, e.g. 0.19. Fix typing errors and remove blank spaces.  Error 1029: Incorrect tax rate for a product Some payment methods require in the create order request:\n Tax table List of order items The total amount  This error occurs if the tax amount calculated based on the tax table provided doesn’t match the order items and order total.\nWe recalculate the amount for each item (excluding tax) and the taxes (only 9% or 21%), and then the total amount. This should match the total order amount.\nCheck that:\n The tax tables provided match the values used to calculate the tax owing in the merchant’s website. You provided the amount for all order items:  Excluding total tax Including total tax    Error 1030: Incorrect currency for an item The currency for one item is not supported in your MultiSafepay account.\nFor FastCheckout and Pay After Delivery transactions, check that the currency is valid.\nError 1031: Incorrect price for an item The price for an item in the shopping cart in the create order request is incorrect.\nMake sure all prices are correct.\nError 1032: Invalid API key The API key is not valid for the MultiSafepay account.\nCheck that:\n The API key was formatted correctly, e.g. fix typing errors and remove blank spaces. You used the correct API key for your MultiSafepay account. You used a live key in the live environment, and a test key in the test environment.  Error 1033: Error fetching refund information Error 1034: Cannot refund transaction The refund cannot be processed.\nCheck:\n That the sum of any partial refunds doesn’t exceed the original transaction amount. That you can make payouts from your MultiSafepay balance. If the transaction has already been refunded If the transaction was cancelled If the same refund was paid within in a short period of time. If a second refund for the same amount is requested within 5 minutes, MultiSafepay rejects the second request to avoid double processing. Refunds sent in batches via the API cause this error because the process is so quick. To avoid this error, delay refund requests by at least 1 second.  Error 1035: Invalid signature The MD5 signature supplied with the message doesn’t match the message contents for the transaction.\nError 1036: Invalid iDEAL issuer ID The bank identifier for a direct iDEAL transaction was not recognized.\nCheck:\n The value is formatted correctly, e.g. fix typing errors and remove blank spaces. If a real bank identifier was used in the test environment, or if a test identifier was used in the live environment.  See List iDEAL issuers.\nError 5001: Cart data not validated The cart was not validated when the transaction was created, and an incorrect amount was displayed on the bank’s payment page.\nEmail integration@multisafepay.com\nError 9999: Unknown error An unknown error occurred. Email integration@multisafepay.com\n","tags":null,"title":"Handling errors","uri":"https://docs.multisafepay.com/developers/errors/"},{"categories":null,"content":"You can import MultiSafepay accountant export reports (in MT940 format) into King Business Software.\nFor import instructions, see King Business Software – Service.\n Support Email support@multisafepay.com   ","tags":null,"title":"King Business Software","uri":"https://docs.multisafepay.com/accounting/integrations/king/"},{"categories":null,"content":"","tags":null,"title":"Manage my account","uri":"https://docs.multisafepay.com/account/manage-account/"},{"categories":null,"content":"Pay After Delivery is MultiSafepay\u0026rsquo;s own pay later method that lets customers pay for orders after receiving them, increasing customer confidence and conversion.\nCustomers are only charged for the items they keep. MultiSafepay bears the risk, based on the customer\u0026rsquo;s history, and guarantees settlement.\nSee how Pay After Delivery can benefit your business!\nOverview           Countries The Netherlands    Currencies EUR    Chargebacks No    Refunds Full, partial, and API refunds, discounts    Transactions expire after 90 days    Amount limits Minimum and maximum order amounts apply. Email sales@multisafepay.com    Addresses The delivery and invoice addresses must be the same to prevent fraud.    Shipping policies MultiFactor shipping policies Shipping Policy Nederland Herinnering aan onze shipping policy     Surcharges Due to changes to the Wet op het consumentenkrediet, merchants who apply surcharges to pay later methods are now deemed credit providers under article 7:57 of the Burgerlijk Wetboek. This requires a permit from the Authority for Financial Markets (AFM).\nWe therefore strongly recommend not applying surcharges.\nFor more information, email sales@multisafepay.com\nRefund rules   You can\u0026rsquo;t process refunds after the invoice is passed to a collection agency (usually 6 weeks after shipment). This is not visible in your dashboard. To check when the invoice was passed to the agency, email support@multifactor.nl\n  You can\u0026rsquo;t see whether the customer has paid the invoice. If they have already paid, they receive a refund. If not, they receive an adjusted payment request or the invoice is cancelled.\n  For both full and partial refunds, any additional administration costs for the customer are deducted from the invoice. The customer has a further 14 days to complete the payment.\n  You cannot reverse full refunds.\n  Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant MF as MultiFactor\rparticipant Me as Merchant\rC-Mu: Selects Pay After Delivery at checkout\ralt Redirect flow\rMu-C: Redirects to payment page to provide their birth date, email address, bank account and phone numbers, and accept the terms \u0026 conditions, then redirects to your success page\relse Direct flow\rMu-MF: Sends order details\rend\rMF-Mu: Authorizes the payment (within 2 business days)\rMu-MF: Captures the funds\rMe-C: Ships the order\rNote over Me,C: Manually change the order status to Shipped.\rMF-C: Sends invoice (within 24 hours of Shipped status, settlement is now guaranteed)\rC-MF: Completes payment (within 14 days)\rMF-Mu: Transfers funds Mu-Me: Settles funds (within 30 days of Shipped status)\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     MultiSafepay\u0026rsquo;s risk analysis is in progress. (You can still cancel.) Initialized Initialized   We have authorized the transaction and the funds are awaiting capture. (You can no longer cancel; you can only refund.) See also Closing transactions. Completed Uncleared   Important: To capture the funds, manually change the order status to Shipped. Shipped Uncleared   MultiSafepay has collected payment. Shipped Completed   The transaction was cancelled. Void/Cancelled Void/Cancelled   MultiSafepay declined the transaction. Declined Declined   The customer didn\u0026rsquo;t complete payment within 90 days. Expired Expired   Refunds     Refund initiated. Initialized Initialized   Refund complete. Completed Completed      Shipping orders When you ship the order, you must manually change the order status from Completed to Shipped to:\n Capture the funds Trigger sending the invoice to the customer Prevent the order from expiring    Changing order status to shipped   In your dashboard\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transactions overview. Search for the transaction, and click to open the Transaction details page. Under Order details, click Change order status. Change the status to Shipped. Send the customer the track and trace details, if relevant.  In your backend\nIf you change the order status in your backend, the following ready-made integrations pass the updated status to your dashboard automatically:\n Magento 2 and WooCommerce: When you set the order to Shipped in your backend. Shopware 5: When you set the order to Delivered in your backend.  For other ready-made integrations, make an update order API request.\nNote: Some third-party plugins may not support updating the status via our API.\n  Failure to pay If the customer fails to pay within the initial 14 day period, MultiFactor emails them reminders with new payment links, each valid for 6 days:\n Reminders 1 and 2: No additional fee Reminder 3: Additional fee of 7.50 EUR Reminder 4: Additional fee of 12.50 EUR  If the customer still fails to pay, the total invoice is transferred to a debt collection agency.\n  Stopping reminders   To stop sending reminders, you can either:\n Credit the invoice for a zero amount, or Request to place the transaction on hold for up to 1 month  Email requests to place transactions on hold to klantenservice@multifactor.nl\nProvide the following information:\n Transaction details Reason for your request When you expect to start the billing process again    Closing transactions If a customer pays into your business bank account directly instead of paying MultiFactor, you need to manually change the transaction status to Completed. This closes the transaction and stops MultiFactor sending the customer payment requests.\n  Closing transactions   To close a transaction manually, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview. Search for the transaction and click to open the Transaction details page. Click Complete own funds. Enter a comment about what happened with the order, and click Complete.\nThe total amount of the transaction is deducted from your MultiSafepay balance.  Note: Once the transaction status changes to Completed, the Complete own funds button is hidden. You must process a full refund instead.\n  Activation and integration          Activation Pay After Delivery activation   Checkout options Payment pages (current and deprecated)   Testing Test payment details   API Create order \u0026gt; Pay later order Examples \u0026gt; Pay After Delivery direct/redirect   Ready-made integrations Supported in all ready-made integrations (direct).    Gift cards When paying with a gift card and Pay After Delivery, customers must enter the gift card details before placing their order, i.e. on your checkout page. Otherwise our platform would interpret the gift card as a discount and generate incorrect order information, e.g. tax calculations.\nYou are solely responsible for this in your integration.\n","tags":null,"title":"Pay After Delivery","uri":"https://docs.multisafepay.com/payment-methods/pay-after-delivery/"},{"categories":null,"content":"","tags":null,"title":"Payments","uri":"https://docs.multisafepay.com/payments/"},{"categories":null,"content":"As a payment service provider, MultiSafepay is subject to Dutch and European legislation and regulations. We must also comply with specific policies set by each payment method we offer.\nWe must account for risk and potential reputational damage. Therefore, we prohibit the sale of some products and services, or require additional information from the merchant.\nFor a list of prohibited products and services, email sales@multisafepay.com. To discuss your options, call +31 20 8500 502.\nAlcohol MultiSafepay has an obligation to ensure you comply with relevant legislation and that your customers meet the requirements for purchasing alcohol. For questions, email risk@multisafepay.com\nDutch law states that alcohol cannot be sold to customers under the age of 18. You must verify customers' age when selling or delivering orders that include alcohol. When orders are delivered, customers must show a valid identification document with their date of birth, e.g.:\n Passport Dutch driving license European or Dutch ID card  If you sell alcohol, you must:\n State this clearly on your website. Email a signed declaration about alcoholic beverages (once only) to risk@multisafepay.com    Download a declaration    Dutch merchant declaration English merchant declaration French merchant declaration German merchant declaration Italian merchant declaration Spanish merchant declaration    If you sell spirits with an alcohol content of 15% or higher, you must:\n Hold a valid liquor license. Email a copy of your license to risk@multisafepay.com  Prohibited products and services          Cryptocurrency Platforms for cryptocurrency trading   Erotica Erotic and pornographic images Sex, dating, and mail order brides Prostitution and escort services Aphrodisiacs Electrosex   Food supplements Steroids Food supplements that: - Endanger health - Make (medical) claims not supported by scientific evidence - Contain ingredients not (yet) approved by the European Commission   Gambling and games of chance Gambling and games of chance (prohibited whether you have a license or not) Binary options or contracts for differences (CFDs) Penny auctions Pyramid schemes and other (consciously or unconsciously) \u0026ldquo;get rich quick\u0026rdquo; schemes   Live organisms Any sort of live organisms offered in any way   Pseudomedicines You must have the required licenses to trade in regulated drugs or apothecary services.   Socially inappropriate behaviors Products/services used to provoke or support terrorism or political violence Misleading marketing practices Misleading, unjustifiable, or indecent products or services Mind-altering substances Equipment for growing cannabis or producing other illegal, mind-altering substances   Tobacco Cigarettes and cigars Pipe tobacco containing nicotine   Weapons Selling weapons or related accessories Encouraging the use of weapons in any way    Visa and Mastercard High Risk Programs Under Visa and Mastercard\u0026rsquo;s High Risk programs, you will be subject to a 500 USD fee if you sell any of the high-risk products and services listed below. The fee is collected as an annual recurring payment.\n  Visa      Code Description     5122: Drugs, drug proprietaries, druggist sundries Sale of prescription-required drugs, cross-border card-absent transactions   5912: Drug stores, pharmacies Sale of prescription-required drugs, cross-border card-absent transactions   5962: Direct marketing Travel-related arrangement services   5966: Direct marketing Outbound telemarketing   5967: Direct marketing Inbound telemarketing   5993: Cigar stores and stands Sale of cigarettes in a card-absent environment   7273: Dating services Card absent transactions   7995: Betting Lottery tickets, casino gaming chips, off-track betting, and wagers at race tracks   4816: Computer network/information services Card-absent environment transactions   5816: Digital goods/games Card-absent environment transactions   6051: Non-financial institutions Card-absent environment transactions   n/a Merchants that fall under the Excessive Chargeback Program   n/a Sale of replicas and \u0026ldquo;inspired by\u0026rdquo; items        Mastercard      Code Description     5967, 7841 Non-face-to-face adult content and services   7801, 7802, 7995 Non-face-to-face gambling   5122, 5912 Non-face-to-face pharmaceuticals   5993 Non-face-to-face tobacco products   7994 Skill games   4816 High-risk cyberlocker   6211 High-risk securities   6051 Cryptocurrencies   5968 Negative option billing   n/a Merchants that fall under the Excessive Chargeback Program   n/a Sale of replicas and \u0026ldquo;inspired by\u0026rdquo; items      For more information, email risk@multisafepay.com\n","tags":null,"title":"Prohibited products and services","uri":"https://docs.multisafepay.com/account/prohibited-products-services/"},{"categories":null,"content":"This page provides information about processing refunds with MultiSafepay.\n  Refunds can only be processed for payments linked to transactions, otherwise the customer receives credit on their invoice instead.\n  Refunds are only processed if there are enough funds in your MultiSafepay balance.\n  Customers receive refunds in the bank account they originally paid from.\n  Full and partial refunds You can process refunds:\n Via our API – Refund order In most of our ready-made integrations Via your dashboard    Refunding via your dashboard    Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview, and click on the relevant transaction to open the Transaction details page. Under Order summary, click Refund order:  Partial refund: In the Amount field, enter the amount to refund. Full refund: Don\u0026rsquo;t change the amount.   Click Continue, and then click Confirm.  The refund becomes a new transaction, which you can find on the original Transaction details page under Related transactions.\nThe status of the refund starts as Reserved, and changes to Completed at midnight.\n  Pay later refunds You can refund pay later orders via:\n API – Refund order \u0026gt; Pay later refund Your dashboard    Full amount via dashboard    Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview, and click on the relevant transaction to open the Transaction details page. Under Order summary, click Refund order, and then click Refund complete order. Add any relevant comments in the Description field. Click Save item changes.\nThe order status changes to Void.      Partial amount via dashboard   To refund part of the amount:\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview, and click on the relevant transaction to open the Transaction details page. Under Order summary, click Change order.  In the Quantity field, enter the number of units to refund. In the Name field, enter the name of the item to refund. In the Unit price field, enter the single unit price as a negative number, e.g. -10. From the Tax list, select None (0.0%).   Click Add, and then check that the New total amount is correct. To display a field to enter add any relevant comments, click Description. Click Save item changes.\nA new refund transaction is generated and the order status is Completed.    Processing times Refund processing time per payment method:\n Banking methods and credit cards: 1 business day  Bank Transfer: 2 to 3 business days, depending on the customer\u0026rsquo;s bank  MultiSafepay time limit There is a limit on how long after payment was completed that you can refund via MultiSafepay. After this time, we recommend using a bank transfer (no time limit, so long as the receiving bank can process the refund).\n  MultiSafepay time limits      Refund period Payment methods     60 days PayPal   180 days All credit and debit cards, Bancontact, Paysafecard   365 days Alipay, Trustly, WeChat Pay   730 days All pay later methods, all banking methods except Trustly      Refunding more than the original order amount You can refund customers more than the amount of the original transaction, e.g. if you want to cover the customer\u0026rsquo;s postage costs when returning an order. A maximum amount applies.\n  Refunding more than the original amount   Supported payment methods\n All banking methods, except EPS and SEPA Direct Debit Gift cards Paysafecard Alipay  Activation\nEmail a request to sales@multisafepay.com\nThe Risk Team assesses your request. Once approved, we enable it for your account.\n  Cancelling refunds You can cancel refunds via your dashboard.\n  Cancelling refunds    You can cancel a refund via MultiSafepay while the status is Initialized or Reserved, which is until midnight on the day the refund was initiated. At midnight, the transaction is passed to the customer\u0026rsquo;s bank to process. Then the status changes to Completed and you can no longer cancel it via MultiSafepay.    Testing refunds   Testing refunds via your dashboard   You can process full refunds in your MultiSafepay test dashboard.\nPartial refunds are not enabled by default. To enable this, email integration@multisafepay.com\nIf you refund a payment in your MultiSafepay test dashboard, the transaction status remains Reserved or Initialized until the refund is manually approved, since there is no settlement with a bank.\nPayment methods\n Banking methods: Bancontact (not QR), Bank Transfer, Belfius, CBC/KBC, Dotpay, EPS, Giropay, iDEAL (not QR), SEPA Direct Debit, Sofort, Trustly Credit and debit cards Pay later: in3, Klarna Wallets: Alipay, PayPal, WeChat Pay   Create an order. Wait until the transaction status changes to Completed. In your MultiSafepay test dashboard, go to Order summary, and then click Refund order. Under Refund, enter in the:  Account holder name field the account holder name of the account you want to refund to. Amount field the amount to refund. IBAN field the IBAN of the account you want to refund to. Reason/Description field the reason for the refund.   Click Continue. Under Refund confirmation, check that the description and amount are correct, and then click Confirm. A new order is created for the refund, with status Reserved or Initialized. Under Related transactions, select the ID of the refund order. Under Order summary, click Accept. In the Add transaction comment field, add a comment, and then click Add. The order status changes to Completed.      Testing refunds via API   Payment methods\n Banking methods: Bancontact (not QR), EPS, Giropay, iDEAL (not QR), SEPA Direct Debit, Sofort, Trustly Credit and debit cards Pay later: in3 Wallets: PayPal, WeChat Pay   Create an order. Make a refund API request. A new order is created for the refund. The order status for the refund changes to Reserved or Initialized. In your MultiSafepay test dashboard, go to Related transactions, and then select the ID of the refund order. Under Order summary, click Accept. In the Add transaction comment field, add a comment, and then click Add. The order status changes to Completed.    Batching refunds You can process refunds in batches using our PHP refund script.\n  Batching refunds   Make sure you have a PHP interpreter installed.\nFor instructions and to download, see MultiSafepay GitHub – Refund script.\nProvide your site API key and a .csv file specifying the order ID, amount, and a description of all the transactions in the batch.\n  Live refunds For some payment methods, refund orders in the live environment are processed automatically.\n  Payment methods   Refund orders in the live environment are processed automatically for the following methods:\n Banking methods: Bancontact (not QR), Bank Transfer, Belfius, CBC/KBC, Dotpay, EPS, Giropay, iDEAL (not QR), SEPA Direct Debit, Sofort, Trustly Credit and debit cards Wallets: Alipay, PayPal, WeChat Pay     Support Email integration@multisafepay.com   ","tags":null,"title":"Refunds","uri":"https://docs.multisafepay.com/refunds/"},{"categories":null,"content":"MultiSafepay prevents fraud by monitoring payments and actively tracking and reporting online criminals. Our risk management systems are designed to accommodate merchants and partners with different needs. The Risk Team analyzes high-risk transactions and actively works to reduce chargebacks.\nWe offer the highest industry protection under the PCI DSS, including HTTPS, data encryption, and 3D Secure authentication.\nWe act as processor and acquirer for Visa and Mastercard, and are therefore also required to comply with their operating regulations.\nMonitoring transactions Under the Wwft, MultiSafepay is obliged to monitor the transactions of all merchants.\nWe may request a copy of an invoice, e.g. if:\n It is unclear what is being sold. The order value is unusually high. The order deviates from your normal customer profile.  We may also ask other questions about the transaction. Following our investigation, if we still don\u0026rsquo;t understand the transaction, we may pause payouts or take other punitive measures.\nFor more information, email support@multisafepay.com\nPeriodic reviews MultiSafepay is legally required to periodically review all merchant accounts to maintain a close relationship and ensure the accuracy of company information in our system.\nWe check if your company is still active and if there have been any changes in the business model, directors, and ultimate beneficial ownership since onboarding or the last review.\nIf we identify any changes, we email you to confirm or request new documentation.\nIf you fail to respond to these requests, we initially pause payouts and may ultimately unilaterally terminate your contract.\n","tags":null,"title":"Risk and fraud","uri":"https://docs.multisafepay.com/risk-fraud/"},{"categories":null,"content":"","tags":null,"title":"Security and legal","uri":"https://docs.multisafepay.com/security-and-legal/"},{"categories":null,"content":"This tutorial explains how to build an integration where customers pay through MultiSafepay payment pages.\n Prerequisites Step 1: Manage orders Step 2: Configure your webhook Step 3: Handle notifications Next steps  Prerequisites Firstly, check that you have completed these prerequisite steps:\n Create a test account. Set up your account.  Before continuing with this tutorial, see if you can save yourself some development time with our range of wrappers and SDKs.\nWrappers\nWrappers and SDKs\n       Previous\nChoose your integration\n  Next\nManage orders\n     ","tags":null,"title":"Self-made integrations","uri":"https://docs.multisafepay.com/integrations/self-made/"},{"categories":null,"content":"To import MultiSafepay accountant export reports (in MT940 format) into Snelstart, see Snelstart – Klantenservice.\nTo add MultiSafepay payment links to SnelStart invoices to let customers pay directly, see SnelKoppeling – Betaallinks via payment service provider.\nPremarc plugins Premarc offers plugins to reconcile Snelstart with the following ecommerce platforms:\n CCVshop Lightspeed Magento Shopify Woocommerce   Support Email support@multisafepay.com   ","tags":null,"title":"Snelstart","uri":"https://docs.multisafepay.com/accounting/integrations/snelstart/"},{"categories":null,"content":"You can import MultiSafepay accountant export reports (in MT940 format) into Twinfield.\nPrerequisites You must first provide Twinfield with an additional international bank account number (IBAN). This can be a dummy (placeholder) IBAN.\nGenerating dummy IBANs   Generating dummy IBANs    Go to IBAN Calculator – Calculate an IBAN. From the Country list, select The Netherlands. Under Bank Code, enter a bank, e.g. ING Group. In the Account number field, enter any 7 digits. Click Calculate IBAN.\nA dummy IBAN and BIC code are generated.    Generating accountant exports   Generating accountant exports    Sign in to your MultiSafepay dashboard. Go to Reports \u0026gt; Accountant Export. In Data Selection, select a date range. In the Report Type field, select MT940. Under Special Format, select Twinfield. In the Bank Account / IBAN field, enter the dummy IBAN. In the BIC field, enter the dummy BIC code.    Importing into Twinfield   Importing into Twinfield    Sign in to your Twinfield account. From the menu, select Cash \u0026amp; Banks, and then select Cash \u0026amp; Banks again. In the Code line, enter an identifier (e.g. MSPAY), and then click Next. Fill the following fields:  Account name Account number BIC General ledger account IBAN   In Cash \u0026amp; Banks, select Drag and drop bank statements or Browse. Upload the MultiSafepay MT940 file.    Free trial For a free 30-day trial including all accounting functions, see Twinfield – Proef abonnement aanvragen.\n Support Email support@multisafepay.com   ","tags":null,"title":"Twinfield","uri":"https://docs.multisafepay.com/accounting/integrations/twinfield/"},{"categories":null,"content":"To help reduce the risks associated with accepting credit cards, MultiSafepay\u0026rsquo;s automated fraud filter reviews all card payments.\nHow the filter works All card transactions are assigned a fraud score from 1-10: 10 being the most at risk of fraud.\nFor higher-risk transactions, the payment is placed on hold and the transaction status changes to Uncleared.\n   Fraud score On hold Action required     1–5 Low risk No None   6–8 Medium risk Yes Review in your dashboard and capture or decline.   8-10 High risk Yes MultiSafepay reviews and captures or declines.    Note: High-scoring transactions aren\u0026rsquo;t always fraudulent, and low-scoring ones may still carry risk.\nReviewing uncaptured payments When uncaptured payments are awaiting your review in your dashboard, you receive a notification in your dashboard and an email to the address provided under Contact details for your account.\nThe final decision to capture or decline lies with you, as you are solely liable for any financial damage. For professional advice on reviewing and evaluating potential risks or fraud indicators, email risk@multisafepay.com\nIf you take no action, uncaptured transactions automatically expire after 5 days.\nTo review uncaptured payments, click the dashboard notification, or:\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Uncleared transactions. Click each transaction in the list to view the Transaction details page, including:  Basic information about the transaction, history data, and any notes The fraud score A risk summary – For a detailed risk report, click More information. If the customer is enrolled for 3D Secure   Evaluate the transaction (see guidance below) and:  To capture, click Accept. To decline, click Decline.    Evaluating uncleared transactions The following indicators paint a cumulative picture of uncaptured payments, but are no guarantee against fraud. If you are in any doubt about a payment, we recommend declining it and notifying the customer.\n  Transaction amount   Check if the transaction amount is noticeably higher or lower than average. Are you willing to risk this payment being revoked after delivering your product or service?     Specific product or service   The risk of fraud strongly correlates with the type of products or services you offer. Popular products among fraudsters include consumer electronics, jewelry, and clothes by well-known fashion and designer brands. These products are easily re-sold for a worthwhile value, especially when ordered in bulk.\nConsider:\n Is the product easy to re-sell? Does the order make sense? Is the product selection or order size unusual?      Customer   You can view customer information in your dashboard and in your backend, which may contain information we do not have access to.\nConsider:\n  Are they a known customer? Are they a good customer or have you had problems with them before?\n  Do they fit the profile of your average customer, e.g. location, average order value?\n  Check the customer\u0026rsquo;s email address. Fraudsters generally use auto-generated email addresses and free email services.\n  In case of doubt, contact the customer. Have you ever had contact with them before? What is your impression of them?\n  Ask if the customer is willing to complete the order using a different payment method with a payment guarantee, such as a bank transfer.\n  You can also ask the customer for a copy of their ID card and/or a credit card statement to verify that they are the cardholder.\n  In many cases, the cardholder did initiate the transaction, but that is no guarantee it is not fraudulent.\n    3D Secure   3D Secure is an authentication protocol for verifying the cardholder\u0026rsquo;s identity, e.g. with an additional password or code, or a credit card reader. If the customer passes authentication, you are protected against fraud-related chargebacks.\nCheck if the customer is enrolled for 3D Secure. On the Transaction details page \u0026gt; Risk summary, their status displays as Enrolled.\n3D Secure statuses    3D Secure result Description     Enrolled, Liability 3D Secure available and successfully authenticated. Liability for fraud is shifted to the cardholder and chargebacks are not possible.   Not Enrolled, Liability 3D Secure available, but not used or successfully authenticated. Liability for fraud is shifted to the cardholder and chargebacks are not possible.   No Liability 3D Secure not available. You retain liability for fraud chargebacks.        Location   Does the country address match the location of the IP address and country where the credit card was issued? Discrepancies are often easily explained, e.g. vacations or business trips.\nWe recommend comparing where payments were made to where the card was initially issued. Pay attention to locations that are far apart, particularly if one is in a high-risk area.\n    Risk report   For more information about the card used, in the Transaction details page, click View risk report.\nYou can view the number of cards used:\n Via a specific IP address With a specific email address      Settlement status   After you ship a Klarna, Afterpay, Betaal per Maand, and Pay After Delivery order, the order status is Shipped and the transaction status is Uncleared. At this point, the transaction is confirmed and settlement is guaranteed. The transaction status changes to Completed when MultiSafepay adds the funds to your MultiSafepay balance.\nFor Request to Pay, Sofort, and SEPA Direct Debit, Uncleared status means MultiSafepay has not yet received settlement partially or in full. We recommend not shipping orders during this status.\n    Other indicators   Under Fraud info (next to the fraud score), there are several other fraud risk indicators based on the email address and shipping details.\nUnder History data, there is information about the number of credit cards used from the same IP address or with the same email address. If this number is high, it may indicate a fraudster, but may also indicate a big order from a large business.\n  See also Viewing your uncleared balance\n","tags":null,"title":"Uncaptured card payments","uri":"https://docs.multisafepay.com/cards/uncaptured/"},{"categories":null,"content":"You can import MultiSafepay accountant export reports (in MT940 format) into Unit4.\nFor import instructions, see Unit4 – Support.\n Support Email support@multisafepay.com   ","tags":null,"title":"Unit4","uri":"https://docs.multisafepay.com/accounting/integrations/unit4/"},{"categories":null,"content":"You can import MultiSafepay accountant export reports (in MT940 and CAMT053 formats) into Visma.\nFor import instructions, see Visma – Contact.\n Support Email support@multisafepay.com   ","tags":null,"title":"Visma","uri":"https://docs.multisafepay.com/accounting/integrations/visma/"},{"categories":null,"content":"This page sets out ways of integrating MultiSafepay with Yuki.\nImporting accountant exports You can import MultiSafepay accountant export reports (in MT940 format) into Yuki.\n  Importing accountant exports    Sign in to your Yuki domain ending in @yukiworks.be. Go to Yuki Postbus \u0026gt; Submit. Click Upload, and select the relevant MT940 file, or choose one of the other upload methods.  For more information, see Yuki - Upload files from PO box.   Automating reconciliation   Automatically reconcile using bank recognition rules    Go to Bank transactions to be processed \u0026gt; (New) Processing rule. Create a new rule.  For more information, see Yuki - Create bank processing rule.   Duopact integration You can also integrate with Duopact. MultiSafepay transactions are automatically imported daily at midnight.\n  Connecting Duopact with MultiSafepay   To connect Duopact with your MultiSafepay account, see Duopact – Contact.\nProvide Duopact with your MultiSafepay site API key. They will set up a Yuki account for you.\n    Manually importing transactions    Sign in to your Duopact account. If you operate multiple websites, select the relevant site from the top-left menu. Go to Bankmutaties \u0026gt; MultiSafepay. Click the green button under the Status tab.  Note: Manually importing transactions doesn\u0026rsquo;t affect automatic imports.    Support Email support@multisafepay.com   ","tags":null,"title":"Yuki","uri":"https://docs.multisafepay.com/accounting/integrations/yuki/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for integrating with Zen Cart.\n  Requirements    MultiSafepay account ZenCart 1.5.5 Tested on PHP 7.0      Support   Contact us:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation and configuration  We recommend first installing the plugin in a test environment, following the Zen Cart installation procedure. Always make a backup.    In the root of your webshop, unpack the content of the .ZIP file. Sign in to your Zen Cart backend. Go to Modules \u0026gt; Payment. Select MultiSafepay - Connect, and then click Install. Enter your API key. Click Update. Disable the MultiSafepay - Connect module. Enable the relevant payment methods.  User guide Payment methods   Payment methods    Cards: All Banking methods: All, except iDEAL QR and TrustPay Pay later methods: All, except in3 Wallets: Alipay, Apple Pay, PayPal Prepaid cards:  Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Paysafecard Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Refunds Full refunds are supported in your MultiSafepay dashboard and backend.\nYou cannot refund more than the original amount in your backend.\nUpdates You can update the plugin in your backend and the CMS marketplace, or via SFTP.\n  Updating via SFTP   Note: Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.\n Download the plugin again above. Follow the Installation and configuration instructions from step 2.    ","tags":null,"title":"Zen Cart plugin","uri":"https://docs.multisafepay.com/zen-cart/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free plugin for Craft Commerce 3.\nFeatures  Support for separate payment methods, pay later methods, and gift cards Partial and full refunds for all payment methods, except pay later Customizable order statuses Shipment notifications for pay later methods    Requirements    Craft CMS version 3.2 or higher PHP 7.0 and higher Tested with PHP 7.0      Support   For support for Craft Commerce 2, email integration@multisafepay.com\nContact MultiSafepay:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation These instructions are for installing the plugin via Composer. You can also install via the Craft Plugin Store.\nRun the following commands in the CLI:\ncomposer require multisafepay/craft-commerce ./craft plugin/install multisafepay The latest stable release is downloaded and installed in your Craft Commerce webshop.\nConfiguration  Sign in to your Craft Commerce backend. To configure the plugin settings, go to MultiSafepay \u0026gt; Settings. To add payment methods activated in your MultiSafepay account and configure gateways, go to Commerce \u0026gt; System settings \u0026gt; Gateways.  User guide Generic gateways The plugin supports generic gateways, which redirect customers from your checkout to a MultiSafepay payment page. You can use them to integrate custom gift cards, or co-branded credit cards.\n  Configuring generic gateways    Sign in to your Craft Commerce backend. Go to Commerce \u0026gt; System settings \u0026gt; Gateways \u0026gt; + New gateway. From the Gateway list, select Generic gateway. Set the relevant payment method gateway IDs and the gateway label.  Generic gateways support:\n Split payments, Second Chance reminders and virtual IBANs Redirect requests only  Gift cards\nGeneric gateways are particularly useful for integrating gift cards, including custom gift cards. This is because we don\u0026rsquo;t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards.\nCo-branded credit cards\nYou can integrate Visa co-branded credit cards (Cartes Bancaires, Dankort, and V Pay), using the generic VISA gateway.\nFor the logo, see MultiSafepay GitHub – MultiSafepay icons.\n  Payment methods   Payment methods    Cards: All, except Postepay and V Pay Banking methods: All Pay later methods: All Wallets: Alipay, PayPal Prepaid cards:  Beauty and Wellness gift card Boekenbon Fashioncheque Fashion gift card Fietsenbon Gezondheidsbon Nationale tuinbon Parfumcadeaukaart Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift      Refunds          MultiSafepay dashboard - Full and partial refunds - Generic gateway transactions   Backend - Full and partial refunds - You can\u0026rsquo;t refund more than the original amount in your backend - Generic gateway transactions not supported   API - Refund order - Pay later refunds not supported - Discounts not supported      Processing backend refunds   To process refunds from the Craft Commerce admin panel:\n Go to Commerce \u0026gt; Orders. Select the order. To see the refund options, go to the Transactions tab.    ","tags":null,"title":"Craft Commerce plugin","uri":"https://docs.multisafepay.com/craft-commerce/"},{"categories":null,"content":"Dynamicweb provides a free app to integrate with MultiSafepay.\nTo integrate the app, email integration@multisafepay.com\nFor support, contact Dynamicweb.\n","tags":null,"title":"Dynamicweb app","uri":"https://docs.multisafepay.com/dynamicweb/"},{"categories":null,"content":"This technical manual is for installing and configuring myShop\u0026rsquo;s free app for integrating with MultiSafepay.\n  Requirements   You will need a MultiSafepay account.     Support   For technical queries about the app, email myShop at support@myshop.com\nContact MultiSafepay:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue      Payment methods    Cards: American Express, Mastercard, and Visa Pay later methods: Klarna and Pay After Delivery Wallets: PayPal Prepaid cards: 123TCS, Intersolve, and Fashioncheque Banking methods:  Bancontact Bank Transfer Dotpay EPS Giropay iDEAL Maestro SEPA Direct Debit Sofort      Installation and configuration  We recommend first installing the plugin in a test environment, following the MyShop installation procedure. Always make a backup.    Sign in to your myShop backend. Install the MultiSafepay app in the App Store. Go to Settings \u0026gt; MultiSafepay or iDEAL MultiSafepay. Enter your account ID, site ID, and site secure code. If using a test account, select Test mode. Click Save.  ","tags":null,"title":"myShop app","uri":"https://docs.multisafepay.com/myshop/"},{"categories":null,"content":"ShopFactory provides a free plugin to integrate with MultiSafepay.\nRequirements You will need a MultiSafepay account.\nSupport See ShopFactory – ShopFactory Support.\nPayment methods Email integration@multisafepay.com\nRefunds You can process refunds from your MultiSafepay dashboard.\nTo process refunds from your ShopFactory backend, email integration@multisafepay.com\n","tags":null,"title":"Shopfactory plugin","uri":"https://docs.multisafepay.com/shopfactory/"},{"categories":null,"content":"This page sets out reason codes for common credit card errors returned by issuers and recommended actions to take.\nOnly the cardholder can contact the issuer to find out the specific reason.\nIf the issue can\u0026rsquo;t be resolved, ask the cardholder for another card number, or to use a different payment method.\n01: Refer to card issuer The issuer wants to check the transaction.\nCardholder: Contact the issuer to complete the transaction.\n02: Refer to card issuer, special condition The issuer wants to check the transaction.\nCardholder: Contact the issuer to complete the transaction.\n03: Invalid merchant or service provider The merchant or service provider is restricted by the issuer.\nCardholder: Contact the issuer.\n04: Pick up card The transaction was declined because the cardholder\u0026rsquo;s account is closed or blocked.\nCardholder: Contact the issuer.\nMerchant: Do not reattempt. The issuer will never approve.\n05: Do not honor The issuer has flagged a problem with the card.\nCardholder: Contact the issuer.\n07: Pick up card, special conditions The issuer has detected fraudulent activity on the cardholder\u0026rsquo;s account.\nCardholder: If you have successfully paid with this card before, contact the issuer. Merchant: Do not reattempt. The issuer will never approve.\n08: Honor with ID The issuer needs to verify the cardholder\u0026rsquo;s identity.\nCardholder: Contact the issuer.\n1A Visa soft decline Authentication required.\nCardholder: Contact the issuer.\n10: Partial approval The issuer can approve an amount less than requested, if supported by the merchant.\n12: Invalid transaction Cardholder: Check the payment method type and payment details.\nMerchant: Do not reattempt. The issuer will never approve.\n13: Invalid amount The payment amount exceeds issuer policies or regulatory limits.\nCardholder: Contact your bank.\n14: Invalid card/account number The card may have expired, or the account may be invalid or closed.\nCardholder: Contact the issuer.\nMerchant: Do not reattempt. The issuer will never approve.\n15: Invalid issuer The first digit of the card number doesn\u0026rsquo;t match any issuer.\nCardholder: Check the first digit of the card number, or contact the issuer.\nMerchant: Do not reattempt. The issuer will never approve.\n19: Re-enter transaction There was a transaction error, or the issuer was temporarily unavailable.\nMerchant: Reattempt. If still unsuccessful after several attempts, email support@multisafepay.com\n28: File temporarily unavailable Authorization failed due to a temporary error.\nMerchant: Reattempt. If still unsuccessful after several attempts, email support@multisafepay.com\n30: Format error Merchant: Check the transaction data.\n34: Fraud suspicion Cardholder: Contact the issuer.\n41: Lost/blocked/cancelled card The cardholder has reported this card lost.\nMerchant:\n If the cardholder is a new customer, assume fraudulent activity. Do not reattempt. The issuer will never approve. If a recurring payment, the cardholder may have reported the card lost since the last successful payment. Contact them to ask for a new card number, or another payment method. Update the recurring payment with the new payment details.  43: Stolen card Merchant: Do not reattempt. The issuer will never approve.\n46: Closed account Merchant: Do not reattempt. The issuer will never approve.\n51: Insufficient funds/over credit limit The card is over the holder\u0026rsquo;s credit limit, or will go over if the transaction is processed.\nCardholder: Contact the issuer to increase your credit limit, or pay into your account to make more credit available. Once resolved, reattempt.\nMerchant: Consider implementing a partial authorization service to accept a lesser amount than requested.\n54: Expired card Cardholder: Check the expiry date or try another card.\nMerchant: Do not reattempt. Make sure you update any recurring payments with the new card details.\n55: Invalid PIN Cardholder: Try again with the correct PIN.\nMerchant: Reattempt as a non-PIN transaction, if applicable.\n57: Transaction not permitted to cardholder The cardholder isn\u0026rsquo;t permitted to perform this type of transaction, e.g.:\n Product type Issuer policy Restricted country or across borders Card not yet activated  Cardholder: Contact the issuer.\nMerchant: Do not reattempt. The issuer will never approve.\n58: Transaction not permitted to acquirer/terminal Merchant: Your MultiSafepay account is not set up for this payment method or type of transaction. Email support@multisafepay.com\n59: Suspected fraud (Visa) Cardholder: Contact the issuer.\nMerchant: If the cardholder confirms that the issue is resolved, reattempt.\n61: Exceeds withdrawal amount limit Cardholder: Contact the issuer.\nMerchant: Do not reattempt on the same day to allow limits to reset.\n62: Restricted card The card is restricted, e.g.:\n Deceased cardholder Permanently blocked Embargoed country  Cardholder: Contact the issuer.\nMerchant: If the cardholder confirms the restriction has been removed, reattempt. Do not alter the country code or any other transaction data.\n63: Security violation There is a security violation, suspected fraud, or the card is temporarily blocked.\nCardholder: Contact the issuer.\n65: Exceeds withdrawal count limit/authentication requested The cardholder has exceeded their maximum daily credit limit, or will do if the transaction is processed.\nCardholder: Contact the issuer to increase your credit limit or provide authentication. Once resolved, reattempt.\nMerchant: If the cardholder is a new customer, the transaction may be fraudulent. Do not reattempt on the same day to allow limits to reset.\n65: Mastercard soft decline Authentication required.\nCardholder: Contact the issuer.\n68: Time out  70: Contact card issuer Cardholder and merchant: Contact the issuer.\n71: PIN not changed A PIN change request was not completed successfully.\nCardholder: Contact the issuer.\n75: Allowable number of PIN tries exceeded Merchant: Do not reattempt on the same day to allow limits to reset.\n78: Invalid/non-existant account The account is temporarily blocked. The card may not have been activated yet.\nCardholder: Contact the issuer.\nMerchant: If the cardholder confirms the account is unblocked, or the card has been activated, reattempt.\n82: Negative CAM, dCVV, iCVV, or CVV results There may have been an issue with the card reader or a voltage spike during the read.\nMerchant: Reattempt, but monitor for potential fraud.\n83: Authentication needed Merchant: Enable 3D Secure and reattempt.\n85: Not declined Used for account status inquiries.\n86: Cannot verify PIN Merchant: You can reattempt within the same day, or attempt POS transactions as non-PIN transactions, if applicable.\n87: No cashback allowed  88: Cryptographic failure The issuer cannot authorize the transaction for technical reasons.\n89: Unacceptable PIN Cardholder: Reattempt with the correct PIN.\n91: Authorization/issuer system inoperative The issuer couldn\u0026rsquo;t be contacted or the authorization timed out.\nMerchant: You can reattempt within the same day.\n92: Unable to route the transaction There was a technical destination error in the issuer\u0026rsquo;s system.\n93: Transaction cannot be completed There is a temporary or permanent restriction on the cardholder\u0026rsquo;s account, e.g.:\n Gambling Unauthorized card-not-present transaction No two-factor authentication  Cardholder: Contact the issuer.\nMerchant: If the cardholder confirms the restriction has been removed, reattempt. Do not alter any transaction data.\n94: Duplicate transmission detected The same transaction has been sumbitted more than once.\n96: System error There is a temporary error in the issuer\u0026rsquo;s system.\nMerchant: Reattempt. If still unsuccessful after several attempts, email support@multisafepay.com\nCV: Card type verification error Either\nThe CID or CVV2 code provided doesn\u0026rsquo;t match the card.\nCardholder: Provide the correct code, and then reattempt.\nMerchant: You can try again without a code, but be aware that if the cardholder doesn\u0026rsquo;t have the correct code, it may be a fraudulent transaction.\nOr\nMerchant: Your MultiSafepay account may be configured incorrectly. Email support@multisafepay.com\nR0: Stop payment order The cardholder requested the issuer to stop a specific, single recurring payment transaction.\nCardholder: Provide an alternative payment method, or contact the issuer.\nMerchant: Do not reattempt. The issuer will never approve.\nR1: Revocation of authorization order The cardholder requested the issuer to stop all recurring payment transactions with a specific merchant.\nCardholder: Provide an alternative payment method, or contact the issuer.\nMerchant: Do not reattempt. The issuer will never approve.\nR3: Revocation of all authorizations order The cardholder requested the issuer to stop all recurring payment transactions for that card.\nCardholder: Provide an alternative payment method, or contact the issuer.\nMerchant: Do not reattempt. The issuer will never approve.\nN7: Decline for CVV2 failure CVV2 verification failed in card-not-present transaction.\nMerchant: Validate the CVV2 value before reattempting. Monitor reattempts for potential fraud.\n1A: Additional customer authentication required The transaction falls within the scope of PSD2 and did not pass 3D Secure.\nMerchant: For card-not-present transactions, reattempt with 3D Secure.\nThis page sets out possible reasons why a credit card payment was declined.\nOnly the cardholder can contact the issuer to find out the specific reason.\nDeclined by MultiSafepay Our automated fraud filter flagged the transaction as probably fraudulent.\nEmail support@multisafepay.com\n3D Secure authentication cancelled Ask the cardholder if they want to try the transaction again.\nMerchant only accepts 3D Secure-authenticated cards Email a request to accept non-3D Secure authenticated cards to risk@multisafepay.com\n Support Email support@multisafepay.com   ","tags":null,"title":"Card errors","uri":"https://docs.multisafepay.com/cards/errors/"},{"categories":null,"content":"This technical manual is for installing and configuring Mijnwebwinkel\u0026rsquo;s free app for MultiSafepay.\n  Requirements   You will need a MultiSafepay account.     Support    See Mijnwebwinkel:\n General information about the plugin - MultiSafepay. Technical queries about the plugin - Contact form. Support documentation - Support.  Contact MultiSafepay:\n Telephone: -31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation and configuration  We recommend first installing the plugin in a test environment, following the Mijnwebwinkel installation procedure. Always make a backup.    Sign in to your Mijwebwinkel backend. Go to Online orders \u0026gt; Payment method \u0026gt; MultiSafepay. Add your MultiSafepay account ID, site ID, site security code, and API key. Select the relevant payment methods.  User guide Payment methods   Payment methods    Cards: Mastercard and Visa Pay later methods: Klarna Wallets: PayPal Banking methods:  Bancontact Bank Transfer Giropay iDEAL Maestro SEPA Direct Debit Sofort   Prepaid cards:  Baby Cadeaubon Beauty \u0026amp; Wellness Boekenbon Fashion Cheque Fashion gift card Fietsenbon Gezondheidsbon Good4fun Nationale tuinbon Parfumcadeaukaart Podium Sport en Fit VVV gift card Webshop gift card Wellness gift card Wijncadeau Winkelcheque Yourgift        Changing payment method order in checkout   To change the order of payment methods in your checkout, follow these steps:\n Go to Mijnwebwinkel - Sorting. Select Sort manually, defined below. Drag and drop the active payment methods to change the order.    Surcharges Surcharges are supported.\n For Dutch merchants We strongly recommend not applying surcharges to pay later methods. This is now considered providing credit under the Consumer Credit Act (Wet op het consumentenkrediet) and requires a permit from the Authority for Financial Markets (AFM).   ","tags":null,"title":"Mijnwebwinkel app ","uri":"https://docs.multisafepay.com/mijnwebwinkel/"},{"categories":null,"content":"Shoptrader provides a free plugin to integrate with MultiSafepay.\nRequirements You will need a MultiSafepay account.\nSupport For any technical queries about the plugin, email Shoptrader at info@shoptrader.nl\nUser guide Payment methods For supported payment methods, email integration@multisafepay.com\nRefunds You can process refunds from your MultiSafepay dashboard.\nTo process refunds from your Shoptrader backend, email integration@multisafepay.com\n","tags":null,"title":"Shoptrader plugin","uri":"https://docs.multisafepay.com/shoptrader/"},{"categories":null,"content":"LogiVert provides a free app for integrating MultiSafepay payment solutions.\n  Requirements   You will need a MultiSafepay account.     Support   For technical support, contact LogiVert - Support.     Payment methods    Cards:  American Express Mastercard Visa, Cartes Bancaires, and Dankort   Banking methods:  Bancontact Bank Transfer Giropay iDEAL SEPA Direct Debit Sofort   Pay later methods: Klarna    Installation and configuration To install and configure, see LogiVert – Manual.\nWe recommend first installing the plugin in a test environment, following the Logivert installation procedure. Always make a backup.\n","tags":null,"title":"LogiVert app","uri":"https://docs.multisafepay.com/logivert/"},{"categories":null,"content":"Logic4 provides a free plugin for integrating with MultiSafepay.\n  Requirements   You will need a MultiSafepay account.     Payment methods    Cards:  American Express Mastercard and Maestro Visa   Banking methods:  Bancontact Bank Transfer Belfius CBC/KBC EPS Giropay iDEAL and iDEAL QR Sofort Trustly   Pay later methods: All, except E-Invoicing Wallets: PayPal    Installation and configuration To install and configure the plugin, see Logic4 – Contact.\n","tags":null,"title":"Logic4 plugin","uri":"https://docs.multisafepay.com/logic4/"},{"categories":null,"content":"This technical manual is for installing and configuring MultiSafepay\u0026rsquo;s free app for integrating with CCV Shop.\n  Requirements   You will need a MultiSafepay account.     Support   For technical queries about the app, email CCV Shop at support@ccvshop.nl\nContact MultiSafepay:\n Telephone: +31 (0)20 8500 500 Email: integration@multisafepay.com GitHub: Create a technical issue    Installation and configuration  Make sure you have a backup of your production environment, and that you test the plugin in a staging environment.    Sign in to your CCV Shop backend and install the MultiSafepay app from the App Store. Go to Mijn webshop \u0026gt; Instellingen \u0026gt; Bestelproces \u0026amp; voorraad \u0026gt; Betaalmethoden. In the Electronische betalingen tab, select MultiSafepay. Enter your account ID, site ID and secure code. If using your MultiSafepay test account, select Test mode. Click Synchroniseer betaalmethodes met MultiSafepay, and then click Save.  User guide Payment methods   Payment methods    Cards: All Pay later methods: AfterPay, Klarna Wallets: PayPal Banking methods:  Bancontact Bank Transfer Giropay iDEAL Sofort Trustly      Refunds You can process refunds from your MultiSafepay dashboard, but not in your backend.\n","tags":null,"title":"CCV Shop app","uri":"https://docs.multisafepay.com/ccv-shop/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/developer/wrappers/nodejs/"},{"categories":null,"content":"With redirect integration, customers are redirected to a payment page to complete payment.\nAPI Create order \u0026gt; Wallet order. See also Examples \u0026gt; Apple Pay redirect.\nDetecting Apple Pay on the customer\u0026rsquo;s device If a customer uses an unsupported device to navigate to an Apple Pay payment page, they won\u0026rsquo;t be able to complete the payment. To prevent this, check whether Apple Pay is supported on the customer\u0026rsquo;s device before creating the payment page.\ntry { if (window.ApplePaySession \u0026amp;\u0026amp; ApplePaySession.canMakePayments()) { console.log('Apple Pay available'); // Create an Apple Pay payment page from your server } } catch (error) { console.debug('An error occurred while verifying if Apple Pay is available:', error); } ","tags":null,"title":"Apple Pay redirect integration","uri":"https://docs.multisafepay.com/apple-pay/redirect/"},{"categories":null,"content":"Bancontact is a leading Belgian payment method that supports online, mobile, QR, POS, and wallet payments. It is a household name and supported by over 80% of Belgian webshops. Once payment is completed, the customer cannot reverse it and Bancontact guarantees settlement.\nSee how Bancontact can help your business!\nOverview          Countries Belgium   Currencies EUR   Chargebacks No   Refunds Full and partial   Supports Recurring Payments (banking only) Second Chance 3D Secure for all non-mobile payments   Transactions expire after Banking: 1 hour, QR: Doesn’t apply    Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant CB as Customer's bank\rparticipant Me as Merchant\rC-Mu: Selects Bancontact (QR) at checkout\rMu-C: Redirects to payment page to select their bank, and then to their online banking\rC-CB: Authenticates account/scans QR code and completes payment\rCB-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has initiated a transaction. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   Bancontact has declined the transaction. Declined Declined   The transaction was cancelled. Void Cancelled   The customer didn\u0026rsquo;t complete payment and the transaction expired. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Activation and integration          Activation Enable in your dashboard   Checkout options Payment components Payment pages - Banking: Current and deprecated - QR: Current only   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; Bancontact redirect/QR   Ready-made integrations Supported in all ready-made integrations.    Bancontact WIP Service Bancontact WIP is a wallet initiated payment service you can use for:\n Bancontact One-Click Pay: customer-initiated one-click payments to make checkout faster and increase conversion Bancontact Recurring: merchant-initiated subscription payments  How it works Bancontact Payconiq gives you access to a merchant wallet to securely store customers' payment details in. Customers give one-time consent and only need to pass strong customer authentication (SCA) for their first purchase.\nThere is no shift in liability for chargebacks from issuer to acquirer since your fraud and disputes volumes are monitored quarterly. A maximum transaction amount applies.\nCriteria and activation  Bancontact WIP is only available to low-risk, high-volume merchants (25,000 transactions quarterly), within the SEPA area. Applies to services only, not physical products. You must have easy-to-use procedures in place for refunds, cancellations, and disputes. Customers must be able to add, update, and delete their stored payment details. You must be able to continually demonstrate low rates of fraudulent transactions, or access to your merchant wallet may be revoked.  Email a request to activate Bancontact WIP to sales@multisafepay.com\nRequests are screened and approved by Bancontact Payconiq.\nIntegration See Recurring Payments.\n","tags":null,"title":"Bancontact","uri":"https://docs.multisafepay.com/payment-methods/bancontact/"},{"categories":null,"content":"Betaal per Maand is a MultiSafepay pay later method for large amounts in collaboration with Santander. Customers pay for orders after receiving them as a one-off payment or in monthly installments. They are only charged for the items they keep. Santander bears the risk and guarantees settlement.\nSee how Betaal per Maand can benefit your business!\nOverview           Countries The Netherlands    Currencies EUR    Chargebacks No    Refunds Full and partial refunds    Amount limits Min: 250 EUR Max: 8000 EUR    Transactions expire after 1 day     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant S as Santander\rparticipant Me as Merchant\rC-Mu: Selects Betaal per Maand at checkout\ralt Redirect flow\rMu-C: Redirects briefly to payment page, then to Santander\relse Direct flow\rMu-C: Redirects to Santander\rend\rS-Mu: Authorizes the payment\rMu-S: Captures the funds\rMe-C: Ships the order\rNote over Me,C: Manually change the order status to Shipped. Me-Mu: Provides track \u0026 trace code\rMu-S: Forwards track \u0026 trace code S-C: Sends invoice (settlement is now guaranteed)\rC-S: Selects payment period and method, and completes payment S-Mu: Transfers funds within 5 business days of Shipped status\rMu-Me: Settles funds within 5 business days\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to Santander. To cancel, email support@multisafepay.com Initialized Initialized   The customer has completed the pre-form and Santander is authorizing the transaction. Uncleared Initialized   Santander has authorized the transaction and the funds are awaiting capture. (You can no longer cancel; you can only refund.) Completed Uncleared   Important: To capture the funds, manually change the order status to Shipped and send us the track-and-trace code (see Providing track-and-trace codes). Shipped Uncleared   MultiSafepay has collected payment. Shipped Completed   Santander declined the transaction. Only the customer can contact them to find out why (for privacy and compliance reasons). Declined Declined   You cancelled the transaction before capture. Void Void   The customer didn\u0026rsquo;t complete payment or the funds weren\u0026rsquo;t captured within 1 day. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Changing orders before shipment You can still change an order between approval from Santander and shipment.\n  Changing orders before shipment    Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview. Search for the transaction and click to open the Transaction details page. Under Order summary, click Change order status. Change the status of the initial order to Shipped, and then add a Memo. Refund the required amount in full or in part.  You cannot increase the amount of the initial order by default. Email a request to sales@multisafepay.com   Shipping orders When you ship the order, you must manually change the order status from Completed to Shipped to:\n Capture the funds Trigger sending the invoice to the customer Prevent the order from expiring    Changing order status to shipped   In your dashboard\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transactions overview. Search for the transaction, and click to open the Transaction details page. Under Order details, click Change order status. Change the status to Shipped. Send the customer the track and trace details, if relevant.  In your backend\nIf you change the order status in your backend, the following ready-made integrations pass the updated status to your dashboard automatically:\n Magento 2 and WooCommerce: When you set the order to Shipped in your backend. Shopware 5: When you set the order to Delivered in your backend.  For other ready-made integrations, make an update order API request.\nNote: Some third-party plugins may not support updating the status via our API.\n  Providing track-and-trace codes You can provide track-and-trace codes to MultiSafepay:\n In your dashboard when you change the order status to Shipped, or Via our API. See API reference – Update order \u0026gt; Ship order.  Pauzing the collection period If the return process takes too long to verify, you can pauze the collection period for 2–4 weeks.\nHave your Betaal per Maand client number ready, and email klantenservice@santander.nl\nActivation and integration          Activation Betaal per Maand activation   Checkout options Payment pages (current and deprecated)   Testing You cannot test Betaal per Maand in your MultiSafepay test account. When activating Betaal per Maand as a payment method in your live MultiSafepay account, you can test it before going live.   API Create order \u0026gt; Pay later order Examples \u0026gt; Betaal per Maand direct/redirect      Ready-made integrations   Supported in the following ready-made integrations:\n Craft Commerce CS-Cart Drupal 8 Magento 1, Magento 2 Odoo OpenCart PrestaShop 1.7 Shopware 5, Shopware 6 VirtueMart WooCommerce X-Cart      Known errors   The customer\u0026rsquo;s first and last name, and the delivery details must be at least 2 characters long. Anything shorter can cause errors.\nWe recommend always requiring full names, not initials, abbreviations, or acronyms.\n  User guide Gift cards When paying with a gift card and Betaal per Maand, customers must enter the gift card details before placing their order, i.e. on your checkout page.\nThis is because Santander collects and require precise order specifications. Our platform would interpret the gift card as a discount and generate incorrect order information, e.g. tax calculations.\nYou are solely responsible for this in your integration.\n","tags":null,"title":"Betaal per Maand","uri":"https://docs.multisafepay.com/payment-methods/betaal-per-maand/"},{"categories":null,"content":"acquirer A financial institution that processes card payments with issuers on behalf of merchants. MultiSafepay is an acquirer for Visa, Mastercard, and Bancontact.\nacquirer reference number (ARN) A unique number assigned to card payments as they move from the merchant\u0026rsquo;s bank (acquiring bank) to the cardholder\u0026rsquo;s bank (issuer). Banks can use ARNs to trace refunds.\nAPI endpoint A specific URL in our API where merchants send requests to exchange information, e.g. about /orders, /gateways.\nbackend The part of a merchant\u0026rsquo;s integration not accessible to customers. Here you can connect with MultiSafepay, configure settings, process refunds, make API requests, and receive notifications.\ncardholder A customer who uses a card issued by a bank to make cashless payments to a merchant.\ncard scheme A financial institution that issues credit cards, provides infrastructure, and processes payments for a fee, e.g. Visa, Mastercard, American Express.\ncard verification code (CVC) A 3 or 4 digit code customers enter as an additional layer of security for online credit or debit card payments. Not required for all cards, or for recurring payments.\ncollecting party The party that receives the funds for a transaction directly from the customer, before transferring them to the merchant.\nconversion rate How often customers visiting a merchant\u0026rsquo;s integration place an order and complete payment.\ncredit card A card issued by a bank, building society, or card scheme that lets the holder pay for products or services on credit.\ncustomer A person or company that buys products and services from merchants.\ndebit card A card issued by a bank that transfers funds directly from the customer\u0026rsquo;s bank account.\ndeveloper A software developer a merchant employs to work on the technical side of their integration.\necommerce platform An online platform merchants use for accepting payments, e.g. website, mobile app, PWAs.\nfraud When a person tries to receive products without paying for them by tricking a customer or merchant.\nintegration Software merchants use to sell products and services and accept payments, e.g website, mobile app, PWA. Merchants may use ecommerce platforms or build their own integration.\nitem A product or service in a customer\u0026rsquo;s shopping cart and/or order.\nissuer The customer\u0026rsquo;s bank, which verifies transaction information and sends funds to the collecting party. For credit or debit card payments, the bank issues the card.\nmerchant A company (legal entity) that sells products and services to customers.\nMultiSafepay account A merchant\u0026rsquo;s account with MultiSafepay, managed via a web dashboard.\nMultiSafepay balance The balance of funds held in a MultiSafepay account.\norder All information related to a single instance of products and/or services sold to a customer that is linked to one or more transactions.\npayment The industry and the product MultiSafepay sells.\nFor customers: When you confirm to transfer funds.\nFor merchants and collecting parties: when you receive funds.\npayment details The payment information for a specific customer, e.g. card number, CVC code.\npayment gateway Transfers the customer\u0026rsquo;s payment details to where the payment method is processed.\npayment page A webpage the customer is redirected to from the merchant\u0026rsquo;s checkout where they complete payment. The page may be hosted by MultiSafepay (see Activating MultiSafepay payment pages, the issuer, or the payment method.\npayment service provider (PSP) MultiSafepay is a PSP and provides services that let merchants accept payments using different payment methods.\npoint of sale (POS) terminal A terminal that accepts payments, usually by card or near-field communication (NFC), at a merchant\u0026rsquo;s physical location, e.g. a store.\nRESTful API (application programming interface) The interface and set of protocols merchants use to exchange data with the MultiSafepay server. Our API reference specifies the content and format of requests to our server and the responses the server sends back.\nreversal When a customer cancels an order paid by debit card and takes the funds back.\nSEPA The Single Euro Payments Area (SEPA) is a European Union payment-integration initiative. Customers can quickly and securely transfer euros within the EU and to a number of non-EU countries.\nshopping cart A container in the merchant\u0026rsquo;s integration where customers place items for an order preparing for payment.\ntransaction An instance of funds being transferred, e.g. customers paying merchants, merchants refunding customers. In our system, the transaction status changes as the funds move through the different stages of the payment flow.\nwe MultiSafepay\nyou Merchants, partners, and developers\n","tags":null,"title":"Glossary","uri":"https://docs.multisafepay.com/glossary/"},{"categories":null,"content":"Tracking payment pages You can gain insight into customer behavior on payment pages through Google Analytics tracking.\nWhen the customer reaches the payment page, the UA-code is generated and appears in the HTML.\nExcluding referrals in Google Analytics For redirect payment methods where customers are directed to a third-party site to complete payment and then back to your website, Google Analytics doesn\u0026rsquo;t correctly track these visits to your website, e.g.:\n Gateway: Source (instead of your website) Referral: Medium (instead of direct)  Google Analytics starts a new session whenever a customer comes to your site from a different source to the previous one and when it\u0026rsquo;s not a direct visit, even though the previous session hasn\u0026rsquo;t expired.\nFor example, a customer selects iDEAL (redirect) and then specifies their bank. They are redirected to the bank\u0026rsquo;s payment page and briefly \u0026ldquo;exit\u0026rdquo; the session on your site, before returning to your success page. The customer is now counted as a new visitor, even though no new session is initiated.\nThis makes Google Analytics reports unreliable, and they don\u0026rsquo;t accurately capture conversion rates. There are two ways to mitigate this.\nReferral exclusion list To prevent third-party shopping carts initiating new sessions, you can exclude referral domains.\nThe customer isn\u0026rsquo;t counted as a referral when they return to your success page.\nNote: This feature is only available for websites using gtag.js or analytics.js. It is not supported for ga.js (Classic Analytics).\nFor instructions, see Google Analytics – Referral exclusions.\nWhen you click +Add referral exclusion, enter the following:\n*.wlp-acs.com *.securecode.com *.arcot.com 3dsecure.icscards.nl paypal.com tpeweb.paybox.com acs.netcetera.ch 3dsecure.paylife.at 3d-secure-code.de clicksafe.lloydstsb.com mastercardsecurecode.sparkassen-kreditkarten.de 3ds.e-cartebleue.com acs-3dsecure.cm-cic.com *.multisafepay.com www.abnamro.nl *.asnbank.nl ideal.bunq.com ideal.ing.nl ideal.knab.nl betalen.rabobank.nl *.snsbank.nl *.regiobank.nl ideal.triodos.nl ideal.vanlanschot.com *.kbc.be *.belfius.be *.ing.be *.paysafecard.com *.alipay.com *.trustly.com verified-by-visa.ing-diba.de 3d-secure.pluscard.de 3dsecure-cardprocess.de 3dsecure.bw-bank.de 3dsecure.deutsche-bank.de geschuetzteinkaufen.commerzbank.de giropay.postbank.de ideal.ing.nl ps4acs.netcetera-payment.ch sofort.com verifiedbyvisa.comdirect.de utm_nooverride=1 parameter Add the utm_nooverride=1 parameter to your payment gateway success pages.\nFor example, for the page URL checkout/payment/success, pass your gateway the following URL: /checkout/payment/success?utm_nooverride=1.\nThis tells Google that the customer\u0026rsquo;s initial session is still in progress and Google ignores the referral information for the \u0026ldquo;new\u0026rdquo; session.\nIn your code, the parameter should look like this: $this→_redirect('checkout/onepage/success', ['utm_nooverride' =\u0026gt; '1']) .\nMake sure you do this for all links from the payment gateway to your website.\nFor more information, email integration@multisafepay.com\nNote: Our ready-made integrations for Magento 1 and 2 do this automatically.\n","tags":null,"title":"Google Analytics","uri":"https://docs.multisafepay.com/developers/google-analytics/"},{"categories":null,"content":"","tags":null,"title":"Integrations","uri":"https://docs.multisafepay.com/integrations/"},{"categories":null,"content":"","tags":null,"title":"My account","uri":"https://docs.multisafepay.com/my-account/"},{"categories":null,"content":"This page is for MultiSafepay partner or primary account holders wanting to submit onboarding information for new affiliated merchants via our API.\nThe API also lets you create a customized onboarding process for new merchants depending on your business model, e.g. marketplaces, franchises, and crowdfunding platforms. This is particularly useful if you are onboarding multiple merchants.\n1. Create merchant accounts See API reference – Create affiliate for how to submit the company details for each merchant, including:\n Company name and address Chamber of commerce number VAT number Contact details  The API returns a merchant account ID.\n2. Add a bank account See API reference – Add bank account for how to submit information about each bank account added to the merchant account, including:\n Name of account holder IBAN Currency  MultiSafepay verifies all bank accounts added to merchant accounts. This can be done in two ways:\n We send the merchant a payment link for a test transaction of 1 EUR. You send us a bank statement for the merchant\u0026rsquo;s bank account via our API.  Note: The trade name associated with the bank account must exactly match one of the trade names listed in the chamber of commerce extract.\n3. Add UBO details See API reference – Add UBO for how to submit details about the ultimate beneficial owner(s) (UBOs) of each merchant\u0026rsquo;s company, including:\n Name and other identifying information Contact details Percentage and type of ownership  The API returns a unique UBO identifier, which you can use to submit the UBO identification documents.\n4. Add websites See API reference – Add site for how to submit the following information about merchants' website(s):\n Website name and URL Contact details for customer support  The API returns an API key for the website.\nScreening and approval After submitting this information, MultiSafepay screens the merchant accounts, bank accounts, UBO details, and websites. Once approved, the merchants can use their API key to start processing payments.\nFor more information, see Onboarding process.\n","tags":null,"title":"Onboarding affiliates via the API","uri":"https://docs.multisafepay.com/account/affiliate-onboarding-api/"},{"categories":null,"content":"","tags":null,"title":"Onboarding and go live","uri":"https://docs.multisafepay.com/account/onboarding-golive/"},{"categories":null,"content":"","tags":null,"title":"Pay later methods","uri":"https://docs.multisafepay.com/payment-methods/pay-later/"},{"categories":null,"content":"The Payment Card Industry Data Security Standard (PCI DSS) is an information security standard mandated by major card schemes, which applies to organizations that handle branded credit cards. The standard is administered by the Payment Card Industry Security Standards Council.\nUnder the PCI DSS, payment service providers and businesses that handle credit card data must follow extensive security protocols and data management practices to protect customers and merchants.\nMultiSafepay is fully PCI DSS certified. This means you can accept credit card payments through MultiSafepay payment pages even if you are not PCI compliant.\nRequired information on your website If you accept card payments, you must include the following information on your website:\n Official company name and registration number in the companies register Full company address, email address, and phone number VAT number Your cancellation and privacy policies Terms and conditions for customers in your checkout, preferably with a checkbox  Security testing In accordance with our PCI DSS certification and other obligations, we regularly perform security checks on our system. This includes penetration tests, which are a form of ethical hacking that simulate a cyberattack to identify and fix vulnerabilities.\n","tags":null,"title":"Payment Card Industry Data Security Standard (PCI DSS)","uri":"https://docs.multisafepay.com/payment-regulations/pci-dss/"},{"categories":null,"content":"Payment pages are hosted by MultiSafepay and are the easiest way to integrate all payment methods.\nThey are completely secure, fully mobile responsive, and can be styled to fit the look and feel of your website.\nHow they work A customer selects a payment method at checkout, and is redirected to a secure page to complete payment with a URL starting with payv2.multisafepay.com.\nIf you specify a payment method gateway, the page is tailored for that payment method. For example, for Visa, the page includes fields for the customer to enter their credit card details.\nIf you don\u0026rsquo;t specify a gateway, all payment methods enabled in your account appear on the payment page.\nActivating payment pages You can activate payment pages yourself in your dashboard.\n  Activating payment pages    Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Website settings. Click the relevant website. Select the Use new payment pages checkbox.  Note: If the Use new payment pages checkbox is not visible, email integration@multisafepay.com   Integrating payment pages See API recipe – Create a payment page.\n  Known errors   A cross-site request forgery (CSRF) warning appears on payment pages when you use an HTML form to send customers to https://payv2.multisafepay.com with a create order request.\n https://api.multisafepay.com accepts POST and GET requests. https://payv2.multisafepay.com only accepts GET requests.    Styling payment pages We recommend styling payment pages to be consistent with the look and feel of your website.\n  In your dashboard     Sign in to your MultiSafepay dashboard.\n  Go to Settings \u0026gt; Website settings \u0026gt; Website.\n  Click the Template button.\n  Use the WYSIWYG editor to style the payment page template.\nChoosing colors\nIn the left menu, a color chart appears when you click on the field of a page element. You can also enter a Hex color in the input field next to it.\nSelecting a logo or header image\nIn Settings \u0026gt; Payment page templates, upload files for logos or header backgrounds. They may take up to 5 minutes to process, and then automatically appear in the list in the editor.\nSetting a default template\nIf you have more than one template and want to set one as your default template, use the Set default option. You can also give this template a name, which is used as the template_id.\nEditing saved templates\nClick Edit template (top-left corner).\nDuplicating styling to another template\nClick Apply style from (top-right corner). Save the template to the relevant website.\n  To save the finished template to the relevant website, click Submit website.\n      Via the API   You can dynamically style the payment page template for specific transaction requests via our API.\nSee API reference – Create order \u0026gt; Payment page/link \u0026gt; payment_options object.\n  User guide Deprecated version The deprecated version of the payment page (URL: pay.multisafepay.com) is still fully supported, but we strongly recommend upgrading to the current version.\n  Unsupported payment methods   We cannot guarantee that the deprecated version will support any new payment methods we add to our platform.\nIt does not support the following methods:\n         Pay later AfterPay, Betaal per Maand, in3, Klarna   Wallets Alipay, Apple Pay, WeChat Pay   Banking Bancontact QR, Belfius, CBC/KBC, EPS, iDEAL QR, Request to Pay, Sofort, Trustly   Prepaid cards PaySafecard      Google Analytics tracking You can track the behavior of customers on payment pages through Google Analytics tracking. When the customer is redirected to the payment page, the UA-code is generated and appears in the HTML.\nLanguages   Supported languages   Payment pages support the following languages:\n Arabic Czech Danish Dutch English Finnish French German Hebrew Italian Japanese Mandarin Norwegian Polish Portuguese Russian Spanish Swedish Turkish    Payment links You can manually generate a link to a payment page to send to a customer to complete payment. See Payment links.\nPayment methods   Displaying all payment methods   If a customer\u0026rsquo;s country is unclear or your integration doesn\u0026rsquo;t let you provide the correct country code, consider displaying all your enabled payment methods on the payment page. This is not supported for the deprecated version.\nTo display all payment methods on the payment page, follow these steps:\n  Create an order to retrieve the payment link.\n  Add \u0026amp;methods=all at the end of the payment link, e.g. https://testpayv2.multisafepay.com/connect/822LtiM8RjN313Yo5C46E2cjqmuL5qVfc7w/?lang=en_NL\u0026amp;methods=all\n  Redirect the customer to the adapted link.\n  Note: This is not a standard option in our ready-made integrations.\n  Requirements for Visa   Requirements for Visa   When customers select Visa as payment method, Visa requires us to display on the payment page the city and country where your webshop is located. This measure aims to increase reliability, transparency, and safety for customers.   Shopping cart If you include a shopping_cart object when you create an order, the cart details are displayed on the payment page by default. That is, all items in the customer\u0026rsquo;s order, with the price and VAT for each.\n  Hiding the shopping cart on payment pages    To request to enable Advanced website templates for your MultiSafepay account, email integration@multisafepay.com Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; New payment pages. Next to the relevant website, click Template. Under Configure page style, click Settings, and then select the Hide cart details checkbox.    Support Email integration@multisafepay.com\n","tags":null,"title":"Payment pages","uri":"https://docs.multisafepay.com/payment-pages/"},{"categories":null,"content":"The transactions API endpoint returns details about your transactions. You can use it to automate reconciliation and gain insight into your transactions.\nSee API reference – Get transaction.\nUse cases Overview of all transactions Use the optional parameters to filter transactions.\nSample request:\ncurl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/transactions\u0026quot; --header \u0026quot;accept: application/json\u0026quot; --header \u0026quot;api_key: \u0026lt;your-account-api-key\u0026gt;\u0026quot; Accounting reconciliation Reconciliation may be required by law, and automating the process saves time and reduces errors.\nSample request:\ncurl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/transactions?completed_from=2021-01-01\u0026amp;completed_until=2021-02-01\u0026quot; --header \u0026quot;accept: application/json\u0026quot; --header \u0026quot;api_key: \u0026lt;your-account-api-key\u0026gt;\u0026quot; Overview of paid/unpaid refunds Sample request:\ncurl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/transactions?type=refund\u0026quot; --header \u0026quot;accept: application/json\u0026quot; --header \u0026quot;api_key: \u0026lt;your-account-api-key\u0026gt;\u0026quot;  Support Email support@multisafepay.com   ","tags":null,"title":"Reconciliation via API","uri":"https://docs.multisafepay.com/accounting/api-reconciliation/"},{"categories":null,"content":"Recurring Payments is a MultiSafepay solution that securely stores payment details to enable quick, easy repeat payments.\nHow it works  One-click payments: The customer selects stored details for faster checkout. Subscriptions: You use the token to collect payments at specific intervals, e.g. weekly, monthly. Unscheduled payments: You use the token for event-triggered payments, e.g. mobile top-up when no credit left on phone.  MultiSafepay encrypts customers' sensitive payment details during an initial payment for secure storage, and provides you with a non-sensitive identifier for the details known as a \u0026ldquo;token\u0026rdquo;. Customers can save multiple tokens.\nSubsequent payments are exempt from SCA and 2FA. MultiSafepay is responsible for PCI DSS compliant storage of payment details.\nTokens are stored at account level rather than website level. If you operate multiple websites from a single MultiSafepay account, you can also offer cross-domain recurring payments, i.e. tokenize a customer\u0026rsquo;s details on Website A and offer one-click payments on Website B.\n  Supported payment methods    American Express Bancontact WIP iDEAL Maestro Mastercard SEPA Direct Debit – First you need to provide us with some information. See Activating SEPA Direct Debit. Sofort Visa    Initial payment  The customer gives you consent to store their payment details and verifies their identity with 3D Secure. MultiSafepay encrypts the payment details during processing and stores them securely on our servers. We return to you a non-sensitive token that references the encrypted payment details. You can use the token to process recurring payments without needing to handle or store sensitive payment details.  sequenceDiagram autonumber participant C as Customer participant Me as Merchant participant Mu as MultiSafepay C-Me: Enters payment details, and verifies identity with 3D Secure Me-Mu: Forwards payment details Mu--Mu: Encrypts payment details for secure storage Mu-Me: Returns a token for subsequent payments Me-C: Redirects to success page C--Me: Collects funds  \nZero Authorization Optionally, you can set the amount for the initial payment 0. No funds are transferred but a token is created (if the payment details are valid).\nSee Zero Authorization.\nSubsequent payments: Customer-initiated  You display the customer\u0026rsquo;s available tokens at checkout, e.g. MASTERCARD **43. The customer selects a token and confirms payment. They don\u0026rsquo;t need to reprovide any payment details or pass 3D Secure authentication again. You include the token in the request to MultiSafepay. MultiSafepay decrypts the payment details and processes the payment.  This is also known as \u0026ldquo;one-click payment\u0026rdquo;.\nsequenceDiagram autonumber participant C as Customer participant Me as Merchant participant Mu as MultiSafepay C-Me: Signs in to their customer account and places order Me-C: Displays token summary at checkout e.g. MASTERCARD **43 C-Me: Selects token and confirms payment Me-Mu: Places order with token Mu--Mu: Decrypts relevant payment details to process payment Mu-Me: Confirms successful payment Me-C: Redirects to success page C--Me: Collects funds  \nSubsequent payments: Merchant-initiated There are two common use cases for merchant-initiated subsequent payments:\n Subscriptions Unscheduled payments   The customer must give consent (once only). You include the token in the request to MultiSafepay. MultiSafepay decrypts the payment details and processes the payment.  sequenceDiagram autonumber participant C as Customer participant Me as Merchant participant Mu as MultiSafepay C--Me: Consents to merchant-initiated payments Me-Mu: Places order with token Mu--Mu: Decrypts payment details to process payment Mu-Me: Confirms successful payment C--Me: Collects funds  Activation Email a request to activate Recurring Payments to sales@multisafepay.com\nSpecify in your request which tokenization model(s) you want to use:\n One-click payments Subscriptions Unscheduled payments  We send you an agreement to sign, including terms and conditions for data usage.\nIntegration Recurring models MultiSafepay offers three recurring models:\n cardOnFile (one-click payments) subscription unscheduled (event-triggered)  Our API and PHP SDK support all three models.\nOur ready-made integrations use cardOnFile only.\nVia ready-made integrations You must have both credit card payments and recurring payments enabled for your MultiSafepay account.\n  Supported integrations   We support recurring payments in our plugins for:\n Magento 1 Magento 2 PrestaShop 1.6 PrestaShop 1.7 Shopware 6 WooCommerce    Via our API See API reference – Create order \u0026gt; customer.reference.\nNote: Tokens for SEPA Direct Debit transactions are originally received as iDEAL or Sofort transactions.\n  Additional parameters      Parameter Type Description     type string The payment flow for the checkout process. Options: direct, redirect.   gateway string The unique gateway_id to redirect the customer to the specific payment method. Make a get gateway request.    Options: AMEX, VISA, MASTERCARD, DIRDEB.     recurring_id string A randomly generated recurring ID for the customer.   reference string The customer\u0026rsquo;s reference number for the token.   recurring_model string The type of recurring model to use. Options: unscheduled, cardOnFile, subscription.      ","tags":null,"title":"Recurring Payments","uri":"https://docs.multisafepay.com/payments/recurring-payments/"},{"categories":null,"content":"","tags":null,"title":"Wallets","uri":"https://docs.multisafepay.com/payment-methods/wallets/"},{"categories":null,"content":"ZilverCMS provides a free app to integrate with MultiSafepay.\n  Payment methods    Cards: All Pay later methods: Betaal per Maand Wallets: Alipay, PayPal Prepaid cards: VVV gift card Banking methods:  Bancontact Bank Transfer Belfius CBC/KBC Dotpay EPS Giropay iDEAL and iDEAL QR Request to Pay SEPA Direct Debit      Support  See ZilverCMS - Contact Email integration@multisafepay.com  ","tags":null,"title":"ZilverCMS app","uri":"https://docs.multisafepay.com/zilvercms/"},{"categories":null,"content":"EasyWebshop provides a free app to integrate with MultiSafepay.\nFor integration support, email integration@multisafepay.com\nFor other support, see EasyWebshop – Contact.\n","tags":null,"title":"EasyWebshop app","uri":"https://docs.multisafepay.com/easywebshop/"},{"categories":null,"content":"MultiSafepay has partnered with Coppermine, which offers a complete ecommerce suite including CRM, B2B, B2C, subscriptions, customer service, logistics, and finance.\nTo integrate MultiSafepay as your payment service provider, follow these steps:\n1. In your dashboard  Sign in to your MultiSafepay dashboard. Go to Website settings and add the required site(s) to your account. In the Website settings page for each site:  Activate the required payment methods. In the Notification URL field, add the Coppermine webhook endpoint for sending status updates and other notifications. For more information, see Webhook.   Copy your:  Account ID (top-right corner of the dashboard) Site ID, API key, and secure code    2. In Coppermine  Sign in to your Coppermine backend, and then go to Settings. To configure the MultiSafepay PaymentMethod Gateway, enter your:  MultiSafepay account ID Site ID, API key, and secure code    3. Testing  Place some test orders in your webshop and Coppermine backend. Check the transactions in Coppermine and your MultiSafepay dashboard. When everything is working correctly, in your Coppermine backend, set the PaymentMethod Gateway to Production mode.  ","tags":null,"title":"Coppermine integration for MultiSafepay","uri":"https://docs.multisafepay.com/coppermine/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/developer/wrappers/python/"},{"categories":null,"content":"3D Secure 2.0 (3DS2) is an authentication protocol card schemes use to verify cardholder identity for online credit and debit card payments. Under PSD2, MultiSafepay is required to apply it to all Europe-based card payments, and we enable it by default for non-EU payments as well.\n3DS2 provides an extra layer of security and helps reduce fraud-related chargebacks. If a transaction is successfully authenticated using 3DS2, the card scheme is responsible for chargeback costs instead of you.\nHow it works 1. The cardholder enters their payment details and is redirected to the card scheme to authenticate using their branded version of 3DS2:\n American Express Safekey Mastercard SecureCode Verified by Visa  2. Contextual information from the customer\u0026rsquo;s device (fingerprint) is shared with you and the scheme to conduct a risk assessment, e.g.:\n Transaction value New or existing customer Customer\u0026rsquo;s location and/or transaction history  3. You and the scheme each decide whether to request additional authentication:\n Frictionless flow: The transaction appears legitimate and is authorized without further user-side authentication. Challenge flow: The transaction appears risky and the cardholder is asked to provide additional authentication, e.g. password, SMS code, fingerprint.  Exemptions To help you optimize conversion and manage risk, MultiSafepay supports exemptions from 3DS2 and strong customer authentication (SCA). Under the PSD2, some exemptions are only supported outside of Europe.\n Exemptions remove an important layer of security and increase the risk of fraud. You are then liable for any fraud-related chargebacks.   Merchant-initiated transactions Merchant-initiated transactions (MIT) are recurring payments you initiate on the customer\u0026rsquo;s behalf, based on a prior agreement, e.g. subscriptions, automatic balance top-ups. 3DS2 authentication is not required.\nMail Order/Telephone Order (MOTO) For MOTO payments, the customer gives you their card details by phone or email. 3DS2 authentication is not required.\nTransaction risk analysis MultiSafepay can conduct a transaction risk analysis (TRA) for specific transactions for amounts up to EUR 500. The issuer may soft decline the exemption, in which case the customer is automatically redirected to authenticate.\n         Scope All EU and non-EU cards   Pricing Free   Activation Email sales@multisafepay.com    Low value payments We will soon support exemptions for low value payments (LVP) under 30 EUR.\nSolutions Disabling 3DS2 MultiSafepay can disable 3DS2 for all your card payments.\n         Scope Non-EU cards only   Pricing Free   Activation Email risk@multisafepay.com    Dynamic 3D Dynamic 3D is a MultiSafepay solution that lets you set rules to disable 3DS2 per transaction, e.g. based on amount, or card/customer/IP country.\n         Scope Non-EU cards only   Pricing MultiSafepay applies a different fee to non-3DS2 transactions. We may also charge a fee to implement Dynamic 3D. To confirm pricing, email sales@multisafepay.com   Activation Email sales@multisafepay.com   Provide required information    State why you want to use Dynamic 3D.  Provide evidence of significant volumes of non-EU card payments.  Specify which sites under your account this applies to.  Demonstrate excellent processing performance, especially for chargebacks.  Confirm that you understand the increased risk of chargebacks and accept liability for non-payment after shipment, and the pricing structure.        Flexible 3D Flexible 3D is a MultiSafepay solution that lets you enable and disable 3DS2 per transaction via our API.\n         Scope Non-EU cards only   Prerequisites You must be certified to handle cardholder data.   Activation Email risk@multisafepay.com   Integration See API reference – Create order \u0026gt; Card order. Set the type parameter to direct. Include the customer fingerprint data.    ","tags":null,"title":"3D Secure 2.0","uri":"https://docs.multisafepay.com/cards/3ds2/"},{"categories":null,"content":"","tags":null,"title":"Developers","uri":"https://docs.multisafepay.com/developers/"},{"categories":null,"content":"The table below sets out the process for disputing chargebacks.\n            1. Cardholder To find out more about a transaction, the cardholder can file a free retrieval request for more information. This can help identify and clarify transactions and avoid chargebacks. You can still refund the transaction at this stage.     2. Cardholder If the cardholder still disagrees with the transaction, they request a chargeback.     3. Issuer The issuer usually refunds the cardholder as soon as they request the chargeback. We don\u0026rsquo;t support refunding chargeback transactions from this point, because then the cardholder likely receives the refund twice.     4. Merchant MultiSafepay can dispute the chargeback on your behalf. You must provide evidence that the chargeback is unjustified. A separate transaction for the chargeback, connected to the original transaction, is created under your MultiSafepay account.     5. Cardholder If the cardholder disagrees with the outcome of the dispute, the chargeback process continues.     6. Merchant You can dispute again, but the potential costs involved are significant. The card scheme may charge fees. You need to present strong new evidence not provided already.     7. Card scheme The card scheme makes the final decision about the chargeback.     8. Card scheme If the chargeback is unsuccessful, the card scheme reclaims the amount from MultiSafepay directly.     9. MultiSafepay We debit the amount from your MultiSafepay balance.      MultiSafepay disputing on your behalf MultiSafepay can dispute chargebacks on your behalf for a fee.\nYou need to upload relevant documentary proof either:\n In the Transaction details page of the original transaction in your MultiSafepay dashboard, or Via our API, see API reference – Challenge chargebacks, or By email to retrieval@multisafepay.com  The Chargeback Team then assesses the proof and decides whether the chargeback can be disputed.\nFor questions about disputes, email retrieval@multisafepay.com\nFor more information about fees, email support@multisafepay.com\nSee also Minimizing chargebacks\n","tags":null,"title":"Disputing chargebacks","uri":"https://docs.multisafepay.com/chargebacks/disputing/"},{"categories":null,"content":" Note: HTTP errors don\u0026rsquo;t necessarily originate from the MultiSafepay platform. They are generic errors you can encounter while browsing the web.\n The following table lists the most common HTTP error codes and descriptions:\n   Error Description     HTTP 200: OK The page is responding correctly but is missing the text OK in the body.   HTTP 301: Moved permanently The page has moved permanently. Check your webhook endpoint is configured correctly in your MultiSafepay account and/or the API request.   HTTP 302: Found The page redirects to another location. Check your webhook endpoint is configured correctly in your MultiSafepay account and/or the API request.   HTTP 403: Forbidden The page appears to require a login. This often occurs in a testing environment. Either remove the login page, or add our IP ranges to your allow list. For a list of MultiSafepay IP addresses, email integration@multisafepay.com   HTTP 404: Not found The page doesn\u0026rsquo;t exist. Check that your webhook endpoint is configured correctly in your MultiSafepay account and/or the API request.   HTTP 500: Internal server error The webshop server is malfunctioning. Contact your server administrator or web developer to resolve this.   HTTP 503: Service not available The function that processes the notification isn\u0026rsquo;t working. Contact your server administrator or web developer to resolve this.    ","tags":null,"title":"HTTP errors","uri":"https://docs.multisafepay.com/developers/http-errors/"},{"categories":null,"content":"Klarna is a flexible online payment method that lets customers pay now, in 30 days (Pay Later 30), or in 3 interest-free installments. It also offers financing. Customers are only charged for the items they keep from the order. Klarna bears the risk and guarantees settlement.\nSee how Klarna can benefit your business!\nOverview           Countries Austria, Belgium, Denmark, Finland, France, Germany, Italy, Norway, Portugal, Spain, Sweden, Switzerland, The Netherlands, UK (US not supported)    Currencies EUR, GBP, SEK, NOK, DKK    Chargebacks No    Refunds Full, partial, and API refunds, discounts    Transactions expire after 1 hour    Addresses The customer\u0026rsquo;s billing and shipping addresses must be the same.     Surcharges Due to changes to the Wet op het consumentenkrediet, merchants who apply surcharges to pay later methods are now deemed credit providers under article 7:57 of the Burgerlijk Wetboek. This requires a permit from the Authority for Financial Markets (AFM).\nWe therefore strongly recommend not applying surcharges.\nFor more information, see Klarna – Welk bedrag kan ik maximaal doorberekenen aan mijn klant?\nPayment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant K as Klarna\rparticipant Me as Merchant\rC-Mu: Selects Klarna at checkout\ralt Redirect flow\rMu-C: Redirects to payment page to provide their birth date, email address, and phone number, and accept the terms \u0026 conditions, then redirects to your success page\relse Direct flow\rMu-C: Redirects to Klarna\rend\rK-Mu: Authorizes the payment\rMu-K: Captures the funds (settlement is now guaranteed)\rMe-C: Ships the order (within 28 days, or extend the shipping period)\rNote over Me,C: Manually change the order status to Shipped. K-C: Sends invoice (you can customize the invoice) C-K: Completes payment with preferred payment method\rK-Mu: Transfers funds Mu-Me: Settles funds (within 21 days)\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to Klarna. You can still cancel with Klarna using the reservation number. Initialized Initialized   Klarna has authorized the transaction and the funds are awaiting capture. (You can no longer cancel; you can only refund.) Completed Uncleared   Important: To capture the funds, manually change the order status to Shipped. Shipped Uncleared   MultiSafepay has collected payment. Shipped Completed   The transaction expired after 1 hour or you didn\u0026rsquo;t change the order status to Shipped within 28 days. See Handling expired orders. Expired Expired   Klarna authorized the transaction, but either you or the customer cancelled it before capture. Void Void   Klarna declined the transaction. Only the customer can contact Klarna to find out why (for privacy and compliance reasons). For merchant support, email klarna@multisafepay.com Declined Declined   Refunds     Refund initiated. Initialized Completed   Refund complete. Completed Completed        Klarna reference numbers   For every transaction, Klarna generates two reference numbers:\n Reservation number for before shipment Invoice number for after shipment  Both reference numbers appear in the Transaction details page in your dashboard.\n  Shipping orders When you ship the order, you must manually change the order status from Completed to Shipped, which:\n Captures the funds Triggers sending the invoice to the customer Prevents the order from expiring    Changing order status to Shipped   In your dashboard\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transactions overview. Search for the transaction, and click to open the Transaction details page. Under Order details, click Change order status. Change the status to Shipped. Send the customer the track and trace details, if relevant.  In your backend\nIf you change the order status in your backend, the following ready-made integrations pass the updated status to your dashboard automatically:\n Magento 2 and WooCommerce: When you set the order to Shipped in your backend. Shopware 5: When you set the order to Delivered in your backend.  For other ready-made integrations, make an update order API request.\nNote: Some third-party plugins may not support updating the status via our API.\n  Extending the shipping period If you cannot ship the order within 28 days, you can extend the time period for up to 180 days in segments.\nIf the order is not captured during this time, the order and transaction status change to Expired.\n  Extending the shipping period    Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview, and click on the relevant transaction. In the Transaction details page, click Extend.    Pauzing the collection period If a customer\u0026rsquo;s return takes too long to verify, you can pauze the collection period for 2-4 weeks.\nCall Klarna on +31 208082853 or email Klarna Sales at verkoop@klarna.com\nHandling expired orders Orders may expire if you don\u0026rsquo;t change the order status to Shipped within 28 days.\n  Handling expired orders   You can send the customer a payment link from the existing order or a new order.\nExisting order\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview, and then select the expired transaction. Click Payment link, and then click Duplicate this order. On the Payment link generator page, click Generate payment link. Send the payment link to the customer.  New order\n Create a new order \u0026gt; Pay later order.\nSee also Examples \u0026gt; Klarna redirect. Ship the order \u0026gt; Ship order. Send the payment link to the customer.    Handling disputes A dispute is when you and a customer disagree about an order:\n Goods, e.g. the customer returns all or part of the order, or the goods were faulty when delivered Payments, e.g. invoicing errors, or the customer paid Klarna instead of you Other, e.g. insolvency, or bankruptcy  Klarna provides support for resolving disputes. For a step-by-step overview, see Klarna – How to handle disputes at Klarna.\nThe easiest way to handle disputes is using the Disputes app in the Klarna Merchant Portal.\n  Connecting to the Klarna Merchant Portal   You\u0026rsquo;ll receive an email from Klarna inviting you to activate your portal account. The link expires within 7 days and is only usable once.\nIf your link has expired or you haven\u0026rsquo;t received an email, email support@multisafepay.com\n In the email, click Activate account. Read the Merchant Portal Agreement, agree to the terms and conditions, and then click Continue. Enter a password, and click Update password. Enter your first and last names, and then click Update profile. To sign in for the first time, enter your email address and the password you just created, and then click Log in.  Note: If viewing orders in the portal, you must still manually change the order status to Shipped to trigger the invoicing process and receive payment.\n    Setting up two-factor authentication   If you want to increase the security of your Klarna Merchant Portal, set up two-factor authentication with the Google Authenticator app.\n Under To-dos, click Activate two-factor authentication. In the dialog, click Start the setup. Open the Google Authenticator app and scan the QR code. Enter the one-time authorization code from the app, and click Set up authentication.      Signing up for the Disputes app   To sign up to use the Disputes app, follow these steps:\n Sign in to the Klarna Merchant Portal. In the side menu, click Disputes. Select an email address and preferred language for receiving dispute-related emails, e.g. reminders. Agree to the terms and conditions. Click Sign up.  Klarna will send you an email when the first dispute appears in the app.\nUsing the Disputes app\nThe side menu contains three pre-set filters to view:\n All disputes Unauthorized disputes Disputes expiring soon  See Klarna – Disputes App in Merchant Portal for detailed information on:\n Searching and filtering disputes Exporting reports Dispute statuses Managing settings Responding to disputes Accepting losses    Activation and integration          Activation Klarna activation   Checkout options Payment pages (current version only)   Testing Test payment details   API Create order \u0026gt; Pay later order Examples \u0026gt; Klarna direct/redirect   Ready-made integrations Supported in all ready-made integrations (redirect).    Gift cards When paying with a gift card and Klarna, customers must enter the gift card details before placing their order, i.e. on your checkout page.\nThis is because Klarna collects and require precise order specifications. Our platform would interpret the gift card as a discount and generate incorrect order information, e.g. tax calculations.\nYou are solely responsible for this in your integration.\nConfiguring the Klarna gateway Klarna makes your ecommerce platform available in their merchant portal, where your credentials are generated. Use your credentials to configure the Klarna gateway for your MultiSafepay account.\nFor questions about your Klarna integration and the connection with your MultiSafepay account, email integration@multisafepay.com\n  Known errors   If you receive a code:BAD_VALUE, Bad value: order_lines[0].reference error from Klarna, try using shorter SKU numbers, e.g. fewer than 9 characters.   Managing your brand   Adding your logo to Klarna invoices    Sign in to your Klarna Merchant Account, and then go to Branding. Under Logo, upload a .png or .jpeg logo.  For best results, use a square image with a transparent background. Resolution 180x180 px or higher        Managing your brand information   Under Brand information, you can set up and manage your brand including:\n Brand name Home page Instagram URL Facebook URL    For support, see Klarna - Klantenservice.\n","tags":null,"title":"Klarna","uri":"https://docs.multisafepay.com/payment-methods/klarna/"},{"categories":null,"content":"Payment components let you embed payment methods directly into your checkout.\n Creates a seamless checkout experience to increase conversion Encrypts customer payment details for secure processing Reduces your PCI DSS responsibility, falling only under Self-Assessment Questionaire A Supports recurring payments  Payment methods Embed a single or multiple payment methods in your checkout.\n  Supported payment methods    Bancontact Bank Transfer Credit cards:  American Express Mastercard Visa Maestro   iDEAL PayPal SEPA Direct Debit Sofort    Credit card features  Bundles all supported credit cards in one gateway Displays the logos of available card brands in the card number field, and then detects the specific brand as the customer enters their card number and displays the relevant logo Validates the card number Displays error messages for credit card fields, e.g. card not supported, card expired Supports tokenization for fast, secure recurring payments  Manuals Manual\nIntegration\n     Manual\nCustomization\n     ","tags":null,"title":"Payment components","uri":"https://docs.multisafepay.com/payment-components/"},{"categories":null,"content":"","tags":null,"title":"Prepaid cards","uri":"https://docs.multisafepay.com/payment-methods/prepaid-cards/"},{"categories":null,"content":"Sofort is a banking payment method by Klarna. It integrates directly with the customer\u0026rsquo;s bank like a direct bank transfer. The customer verifies the payment, which reduces the risks associated with traditional transfers. Once payment is completed, the customer cannot reverse it and Sofort guarantees settlement.\nSee how Sofort can help your business!\nOverview          Countries Austria, Belgium, Germany, Italy, Spain, Switzerland, Poland Note: Transactions processed in non-supported countries return a 1024 error.   Currencies EUR (GBP, CHF, PLN not supported)   Chargebacks No   Refunds Full and partial   Supports Recurring Payments Second Chance   Transactions expire after 1 day   Minimum amount 0,10 EUR    Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant CB as Customer's bank\rparticipant Me as Merchant\rC-Mu: Selects Sofort at checkout\ralt Redirect flow\rMu-C: Redirects to payment page, then to online banking\relse Direct flow\rMu-C: Redirects to online banking\rend\rC-CB: Authenticates account and completes payment\rCB-Mu: Transfers funds Note over CB,Mu: May take 3 business days Don't ship yet!\rMe-C: Ships order\rMu-Me: Settles funds\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to their bank. Initialized Initialized   The customer\u0026rsquo;s bank has authorized the transaction and is transfering the funds.      May take up to 3 business days for all amounts.      Do not ship yet! MultiSafepay assumes no responsibility if you ship and the transaction fails. Uncleared Uncleared   MultiSafepay has collected payment. Completed Completed   The customer cancelled the transaction via Sofort. Void Void/Cancelled   The customer didn\u0026rsquo;t complete payment within 1 day. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed    Note: Amounts less than 100 EUR are completed immediately. The status of orders over 100 EUR changes to Uncleared and then to Completed after 24 hours.\n  Activation and integration          Activation Enable in your dashboard   Checkout options Payment components Payment pages (current version only)   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; Sofort direct/redirect   Ready-made integrations Supported in all ready-made integrations.    ","tags":null,"title":"Sofort","uri":"https://docs.multisafepay.com/payment-methods/sofort/"},{"categories":null,"content":"Split Payments lets you divide an incoming transaction amount between two or more MultiSafepay accounts. This feature is supported for all account types and affiliations, e.g.:\n Partner/primary accounts, e.g. for mixed baskets where customers buy products from multiple affiliated merchants in a single transaction on your marketplace Affiliated accounts, e.g. for franchises splitting 10% of all incoming transactions to the linked primary account  You can split payments by percentage, a fixed amount, or by both.\nIntegration See API recipe – Split a payment.\nRefunds You can process full and partial refunds, but only from the account that created the split payment.\nTo refund a split payment, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview. Search for the transaction and open the Transaction details page. Click Refund. Enter the amount you want to refund to the customer. Click Confirm refund.  The transaction status changes to Initialized, and you can cancel the refund.\nWhen the transaction status changes to Completed, the refund has been processed correctly. The customer receives the refund in the bank account the transaction was originally paid from the next business day.\nTo refund more than the original amount, see Refunds.\nNote: Split Payments are not supported in our ready-made integrations.\n","tags":null,"title":"Split Payments","uri":"https://docs.multisafepay.com/payments/split-payments/"},{"categories":null,"content":" Check this page regularly for updates on implementing the PSD2.   A surcharge is a fee merchants may charge customers on top of the total order amount to cover the cost of accepting certain payment methods. This may be a fixed amount or a percentage of the total order amount.\nYour right to apply surcharges varies per payment method and the customer’s country.\nPSD2 The PSD2 applies to the whole European Economic Area (EEA), but individual states can decide how to implement certain aspects. Always check what rules apply in the country your business is registered in.\nIn the Netherlands, the Authority for Consumers \u0026amp; Markets (ACM) is responsible for PSD2 oversight. The Dutch National Bank recommends always contacting ACM for inquiries.\nSurcharges prohibited Surcharges are banned for both individual and business customers on:\n Most credit card transactions when the bank/card issuer and the merchant\u0026rsquo;s PSP are both located within the EEA Debit card transactions Standard bank transfers SEPA Direct Debit payments  If you are currently surcharging prohibited transactions, you may need to update your settings in your backend. For support, contact your ecommerce platform or your developer. You do not need to change any settings in your MultiSafepay dashboard.\nSurcharges permitted Surcharges are permitted for:\n  Card payments with cards issued outside the EEA, e.g. a tourist with a credit card issued in India\n  Hybrid card schemes such as American Express: Each EU state can decide whether to permit surcharging. Under Dutch law, surcharges are permitted.\n  PayPal and pay later methods: You can only charge customers for the actual cost you incur for using the payment method and no more.\n   Attention Dutch merchants Due to changes to the Wet op het consumentenkrediet, Dutch merchants who apply surcharges to pay later methods are now deemed credit providers under article 7:57 of the Burgerlijk Wetboek. This requires a permit from the Authority for Financial Markets (AFM). We therefore strongly recommend not applying surcharges. For more information, email sales@multisafepay.com           Disclaimer: This page is for information only. Given the changing nature of the law, rules, regulations and the risks of electronic communication, this page may contain omissions or inaccuracies. We took great care in writing it, but cannot guarantee its completeness, timeliness, or accuracy. Always seek advice from a professional consultant or competent authority before taking any decision or action. We accept no responsibility for direct or consequential damages resulting from the use of, reliance on, or actions taken based on this page.    ","tags":null,"title":"Surcharges","uri":"https://docs.multisafepay.com/surcharges/"},{"categories":null,"content":"Supported payment methods:\n AfterPay Alipay E-Invoicing in3 Klarna Pay After Delivery  Dashboard  Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transaction overview. Search for the transaction you want to discount and click to open the Transaction details page. Under Order details, click Checkout editor. Click Change order.   Discount specific items   To discount specific items:\n In the Quantity field, enter the number of units to discount. In the Name field, enter the name of the item to discount. In the Unit price field, enter the single unit price as a negative number, e.g. -10. From the Tax list, select None (0.0%). Click Add. Check that the New total amount is correct. To display a field to enter add any relevant comments, click Description. Click Save item changes.\nA new transaction is generated and the order status is Completed.      Discount specific amount   To discount a specific amount:\n In the Quantity field, enter 1. In the Name field, enter a description of the discount. In the Unit price field, enter the discount amount as a negative number, e.g. -10. From the Tax list, select None (0.0%). Click Add. Check that the New total amount is correct. To display a field to enter add any relevant comments, click Description. Click Save item changes.\nA new transaction is generated and the order status is Completed.      API To discount:\n Regular orders, see API recipe – Discount an order Pay later orders, see API recipe – Discount a pay later order  See API reference – Create order.\nTo discount:\n An entire order, enter a reduced amount. Specific items in the order, in the shopping_cart, reduce the unit_price of the relevant items.   Support Email support@multisafepay.com   ","tags":null,"title":"Discounts","uri":"https://docs.multisafepay.com/refunds/discounts/"},{"categories":null,"content":"Adding SPF records for MultiSafepay emails Sender Policy Framework (SPF) records let you specify who is authorized to send emails on your domain\u0026rsquo;s behalf. Receiving email servers can check the SPF record to verify the sender. Using an SPF record prevents emails sent by MultiSafepay on your behalf from being marked as spam.\n  Through your hosting provider, domain registrar, or DNS provider, create a DNS TXT record that is named after your domain, e.g. example.com.\n  Add either of the following entries to your TXT record containing v=spf1 and including at least one of the following:\n ip4:213.189.0.0/23 ip4:185.99.128.0/22 include:spf.multisafepay.com  Note: The total number of includes permitted is 10, including mx records (if listed).\nYou have successfully created an SPF record.\n  Examples Original TXT record\nexample.com. 180 IN TXT \u0026quot;v=spf1 mx ip4:188.18.131.146/32 ip4:177.50.28.21/32 ~all\u0026quot; Modified TXT record example 1\nexample.com. 180 IN TXT \u0026quot;v=spf1 mx ip4:188.18.131.146/32 ip4:177.50.28.21/32 ip4:213.189.0.0/23 ip4:185.99.128.0/22 ~all\u0026quot; Modified TXT record example 2\nexample.com. 180 IN TXT \u0026quot;v=spf1 mx ip4:188.18.131.146/32 ip4:177.50.28.21/32 include:spf.multisafepay.com ~all\u0026quot; Setting up DKIM email authentication MultiSafepay supports DomainKeys Identified Mail (DKIM) email authentication for all emails that we send. DKIM lets email servers verify that received emails actually came from the specified domain and haven\u0026rsquo;t been altered or forged.\nTo set up DKIM you need to add a TXT record for MultiSafepay through your hosting provider, domain registrar, or DNS provider.\nMultiSafepay email servers   Add a TXT record named: msp-2021._domainkey.{your domain}, e.g. msp-2021._domainkey.example.com.\n  Add the following content to your TXT record:\nv=DKIM1; h=sha256; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pizvsOWTWxtcxthGR0k4rEcGsJH4hRy1fpoUAs3fUi0yMkygwsYUCtFLQY2TwrOtfPfaZ/2bPKXwyjC4kg93zFvSJTIQtQiFfKNT2aDtnDmZRwII4+s2k7+LHn4V/SjIxEBylN3Rt0g4iVlkZzgncEXeVksXj5eux8uDAUeZxj0Fp8PWSkxsBNVaJFb5sfR+c5piJ+8RmlqYUf7w/gXOW8mChC509//V9dfMaV39b7WoEf/JRw9KGM69C3hIdtb7cVKD/B6VxQIq3z1DCAcmSCXpcaXUaFbVaF4u/vEi+3v5DdPtDl/0rOy2NUFNL5XULW8OxdofzUbdL9SWN/IbwIDAQAB;   You have successfully added a TXT record for MultiSafepay\u0026rsquo;s email servers.\nMandrill If you have E-Invoicing or Pay After Delivery activated, we also use Mandrill to send emails in addition to our own mail servers. In this case, you need to add another TXT record for Mandrill.\n  Add a TXT record named: mandrill._domainkey.{your domain}, e.g. mandrill._domainkey.example.com.\n  Add the following content to your TXT record:\nv=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrLHiExVd55zd/IQ/J/mRwSRMAocV/hMB3jXwaHH36d9NaVynQFYV8NaWi69c1veUtRzGt7yAioXqLj7Z4TeEUoOLgrKsn8YnckGs9i3B3tVFB+Ch/4mPhXWiNfNdynHWBcPcbJ8kjEQ2U8y78dHZj1YeRXXVvWob2OaKynO8/lQIDAQAB;   You have successfully added a TXT record for Mandrill.\n","tags":null,"title":"Email authentication","uri":"https://docs.multisafepay.com/developers/email-authentication/"},{"categories":null,"content":"in3 is a Dutch online payment method where customers pay in 3 installments after receiving their order, at no extra cost and without having to register with the Bureau Krediet Registratie (BKR). in3 processes all the installments and guarantees settlement after receiving the first one.\nSee how in3 can benefit your business!\nOverview           Countries The Netherlands – in3 checks the customer\u0026rsquo;s country, and billing/shipping address to confirm.    Currencies EUR    Chargebacks No    Refunds Full, partial, and API refunds, discounts You can request in3 to process a full or partial refund, either before payout or up to 1 year afterwards.    Supports Second Chance    Transactions expire after 2 hours    Amount limits Min: 100 EUR Max: 3000 EUR You can adjust these limits in the backend of our ready-made integrations to show or hide in3 on your checkout page depending on the order value.    Addresses Different billing and shipping addresses are supported.     Surcharges Due to changes to the Wet op het consumentenkrediet, merchants who apply surcharges to pay later methods are now deemed credit providers under article 7:57 of the Burgerlijk Wetboek. This requires a permit from the Authority for Financial Markets (AFM).\nWe therefore strongly recommend not applying surcharges.\nFor more information, email sales@multisafepay.com\nPayment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant I as in3 participant Me as Merchant C-Mu: Selects in3 at checkout alt Redirect flow Mu-C: Redirects to payment page to provide their birth date, title, and phone number, then redirects to your success page else Direct flow Mu-C: Redirects to in3 to select their bank, and accept the payment periods and terms \u0026 conditions end I-Mu: Authorizes the payment Mu-I: Captures the funds C-I: Pays 1st instalment within 5 mins (settlement is now guaranteed) Me-C: Ships the order I-Mu: Transfers funds Mu-Me: Settles funds (within 15 days of 1st instalment) C-I: Pays 2nd instalment within 30 days, and 3rd within 60 days    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     in3\u0026rsquo;s credit check is in progress. (You can still cancel.) Initialized Initialized   in3 is waiting for the customer to pay the first installment (within 5 mins). Uncleared Initialized   The customer has paid the first installment. Settlement is now guaranteed. (You can no longer cancel; you can only refund.) Completed Uncleared   You can manually change the order status to Shipped for your records, but this is not required to trigger invoicing. Shipped Uncleared   MultiSafepay has collected payment. Completed Completed   in3 declined the transaction. Declined Declined   The customer cancelled the transaction or abandoned the first installment. Void Void   The customer didn\u0026rsquo;t pay the first installment. Expired Expired   Refunds     in3 has successfully processed a full or partial refund. Completed Completed   The refund was declined. Declined Declined      Shipping orders When you ship the order, you can change the order status to Shipped for your records, bu this is not required to trigger invoicing.\n  Changing order status to Shipped   You can change the order status from Completed to Shipped:\nIn your dashboard\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transactions overview. Search for the transaction, and click to open the Transaction details page. Under Order details, click Change order status. Change the status to Shipped. Send the customer the track and trace details, if relevant.  In your backend\nIf you change the order status in your backend, the following ready-made integrations pass the updated status to your dashboard automatically:\n Magento 2 and WooCommerce: When you set the order to Shipped in your backend. Shopware 5: When you set the order to Delivered in your backend.  For other ready-made integrations, make an update order API request.\nNote: Some third-party plugins may not support updating the status via our API.\n  Activation and integration          Activation Appy to MultiSafepay   Checkout options Payment pages (current version only)   Testing Test payment details   API Create order \u0026gt; Pay later order Examples \u0026gt; in3 direct/redirect      Ready-made integrations   in3 (direct) is supported in:\n Craft Commerce Magento 1 OpenCart PrestaShop 1.7 VirtueMart WooCommerce    Gift cards When paying with a gift card and in, customers must enter the gift card details before placing their order, i.e. on your checkout page.\nThis is because in3 collects and require precise order specifications. Our platform would interpret the gift card as a discount and generate incorrect order information, e.g. tax calculations.\nYou are solely responsible for this in your integration.\n","tags":null,"title":"in3","uri":"https://docs.multisafepay.com/payment-methods/in3/"},{"categories":null,"content":"The Payment Services Directive 2 (PSD2) is a set of laws and regulations established by the European Banking Authority (EBA) that aim to improve consumer rights and security, while also promoting competition within the financial industry.\nThe directive not only enhances the safety of payments across the European Union, but also enables the development and use of innovative new technologies.\nStrong customer authentication To help combat financial and data fraud, the PSD2 requires strong customer authentication (SCA) for most online payments in Europe.\nMerchants and payment service providers must verify customers' identity using two-factor authentication (2FA): that is, at least two out of the following three authentication methods:\nSomething a customer:\n Knows, e.g. password, PIN, knowledge-based question Has, e.g. phone, token, smartcard Is, e.g. fingerprint, voice/face recognition  If transactions aren\u0026rsquo;t appropriately authenticated, banks may have to decline them.\n See also 3DS2 and SCA exemptions   ","tags":null,"title":"Payment Services Directive 2 (PSD2)","uri":"https://docs.multisafepay.com/payment-regulations/psd2/"},{"categories":null,"content":"Second Chance is a MultiSafepay service that automatically emails customers a payment link when they initiate but don\u0026rsquo;t complete a transaction. This helps increase conversion and boost impulse purchases. The first email is sent 1 hour after the customer initiates the payment, and a second after 24 hours.\n  Requirements     Under the GDPR, you must obtain documented consent from the customer to send Second Chance emails.\n  You must include the customer\u0026rsquo;s email address in the transaction API request.\n  Second Chance emails cannot be activated or sent to the customer while the status of the original transaction is Uncleared, or once it is Completed.\n  Payment links in Second Chance emails have the same lifetime as the original payment link, which is set to 30 days by default.\n  The following payments methods are not supported because they follow a different payment flow:\n AfterPay Bank Transfer Betaal per Maand SEPA Direct Debit Klarna Pay After Delivery      Note: Second Chance emails are also sent for manually generated payment links if the customer doesn\u0026rsquo;t click the link to complete payment.\nActivating Second Chance To activate Second Chance, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Website settings. Select the relevant website. Under Website functionality, select the Enable Second Chance checkbox.  Using Second Chance See API recipe – Send payment reminders.\nCustomizing the emails The Second Chance email template is completely customizable. Follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Email templates. Select the relevant website. Click Add new template. From the Type list, select Second Chance email (to consumer). From the Language list, select the relevant language. Click Load default template.  For how to customize the template, see Email Templates.\nPotential errors   External plugins   Second Chance emails can create conflicts with external warehouse systems. In some cases, this can be resolved using a cron job. However, this is not always a stable solution.\nFor example, when a customer cancels an order in the webshop, they can still pay for it using Second Chance within 30 days or a specified time frame. For more information, see API reference - Create order \u0026gt; days_active parameter.\nIf a cancelled order is subsequently paid for, MultiSafepay reopens the order in the webshop. A warehouse system may have already released the reservation on the order when it received Cancelled status, or may consider the Cancelled status permanent. As result, the items the customer ordered may no longer be available or in stock.\n    ERP systems   Second Chance emails can cause issues when running an enterprise resource planning (ERP) system.     Other orders   If you have another order for the same total amount with the same customer email address completed in the last 120 minutes, Second Chance emails are suppressed.   Second Chance reports For an overview of all Second Chance emails that resulted in successful payment, see Second Chance report.\n","tags":null,"title":"Second Chance","uri":"https://docs.multisafepay.com/features/second-chance/"},{"categories":null,"content":"","tags":null,"title":"Wallet integrations","uri":"https://docs.multisafepay.com/wallet-integrations/"},{"categories":null,"content":"AfterPay is a widely used pay later method in the Netherlands and Belgium. Customers pay for orders after receiving them, and are only charged for items they keep from the order. AfterPay bears the risk and guarantees settlement.\nSee how AfterPay can benefit your business!\nOverview           Countries The Netherlands, Belgium    Currencies EUR    Chargebacks No    Refunds Full, partial, and API refunds, discounts    Transactions expire after 90 days     Addresses Different billing and shipping addresses are supported.\nThe Transaction details page in your dashboard only shows the billing address. To retrieve other details, see API reference – Get order.\nSurcharges Due to changes to the Wet op het consumentenkrediet, merchants who apply surcharges to pay later methods are now deemed credit providers under article 7:57 of the Burgerlijk Wetboek. This requires a permit from the Authority for Financial Markets (AFM).\nAfterPay therefore strongly recommends discontinuing any surcharges.\nFor more information, see AfterPay – Merchant support.\nPayment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant A as AfterPay\rparticipant Me as Merchant\rC-Mu: Selects AfterPay at checkout\ralt Redirect flow\rMu-C: Redirects to payment page to accept terms \u0026 conditions and provide their email address, date of birth, and phone number, then redirects to your success page\relse Direct flow\rMu-C: Redirects to AfterPay\rend\rA-Mu: Authorizes the payment\rMu-A: Captures the funds\rMe-C: Ships the order\rNote over Me,C: Manually change the order status to Shipped. A-C: Sends invoice (standard period of 14 days, settlement is now guaranteed)\rC-A: Completes payment with preferred method\rA-Mu: Transfers funds Mu-Me: Settles funds\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     AfterPay has authorized the transaction and the funds are awaiting capture. (You can still cancel.) Important: To capture the funds, when you ship the order you must manually change the order status to Shipped. Completed Uncleared   The funds are captured. (You can no longer cancel; you can only refund.) Shipped Uncleared   MultiSafepay has collected payment. Shipped Completed   AfterPay has declined the transaction. Only the customer can contact AfterPay to find out why (for privacy and compliance reasons). Declined Declined   AfterPay authorized the transaction, but you or the customer cancelled it before capture. Void Void/Cancelled   AfterPay authorized the transaction, but you didn\u0026rsquo;t ship within 90 days of creating the transaction or the customer didn\u0026rsquo;t complete payment. Expired Expired   Refunds     Refund initiated. Initialized Completed   Refund complete. Completed Completed      Shipping orders When you ship the order, you must manually change the order status from Completed to Shipped to:\n Capture the funds Trigger sending the invoice to the customer Prevent the order from expiring    Changing order status to Shipped   In your dashboard\n Sign in to your MultiSafepay dashboard. Go to Transactions \u0026gt; Transactions overview. Search for the transaction, and click to open the Transaction details page. Under Order details, click Change order status. Change the status to Shipped. Send the customer the track and trace details, if relevant.  In your backend\nIf you change the order status in your backend, the following ready-made integrations pass the updated status to your dashboard automatically:\n Magento 2 and WooCommerce: When you set the order to Shipped in your backend. Shopware 5: When you set the order to Delivered in your backend.  For other ready-made integrations, make an update order API request.\nNote: Some third-party plugins may not support updating the status via our API.\n  Return process If the customer returns some items from the order and this takes a long time to verify, you can pauze the collection period for 2 to 4 weeks.\nPhone +31 207 230 230 or email merchant@afterpay.com\nActivation and integration          Activation AfterPay activation   Checkout options Payment pages (current version only) (Activate at website level in your MultiSafepay dashboard.)   Testing Test payment details   API Create order \u0026gt; Pay later order Examples \u0026gt; AfterPay direct/redirect      Ready-made integrations   Supported in:\n Craft Commerce CS-Cart Drupal 8 Magento 1, Magento 2 Odoo OpenCart PrestaShop 1.6, PrestaShop 1.7 Shopware 5, Shopware 6 WooCommerce X-Cart    Gift cards When paying with a gift card and AfterPay, customers must enter the gift card details before placing their order, i.e. on your checkout page.\nThis is because AfterPay collects and require precise order specifications. Our platform would interpret the gift card as a discount and generate incorrect order information, e.g. tax calculations.\nYou are solely responsible for this in your integration.\n","tags":null,"title":"AfterPay","uri":"https://docs.multisafepay.com/payment-methods/afterpay/"},{"categories":null,"content":"Bank Transfer (also known as SEPA Credit Transfer) is a secure, trusted, international banking method. Customers can make any type of online payment in euros within the SEPA area.\nSee how Bank Transfer can help your business!\nOverview          Countries Europe (SEPA area)   Currencies EUR, CZK, GBP, HUF, PLN (USD not supported due to high transaction and currency conversion fees for customers)   Chargebacks No   Refunds Full and partial   Transactions expire after 60 days    To better manage Bank Transfer payments, see also Virtual IBANs.\nPayment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant Me as Merchant C-Mu: Selects Bank Transfer at checkout alt Redirect flow Mu-C: Redirects to payment page to confirm their bank account number and (optionally) bank country, then displays payment instructions else Direct flow Mu-C: Redirects to your success page, then emails payment instructions (or email the instructions yourself) end C-Mu: Transfers funds (online or with teller) (takes 1–3 business days) Mu-Me: Matches payment and settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     Awaiting the customer to transfer the funds. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   You cancelled the transaction. Void Void/Cancelled   The customer didn\u0026rsquo;t complete payment within 60 days. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Payment instructions MultiSafepay emails the customer the following payment details to include when transfering the funds, or your can email them yourself.\n   Emailing payment instructions yourself   You may prefer to email the customer the payment details yourself, e.g. for consistent, branded communications. Make sure you include clear instructions about what details the customer needs to provide and the required format (see Transfer guidance for customers below).\nTo prevent us from emailing the customer, see API reference – Create order \u0026gt; Banking order. Set the disable_send_email parameter to true.\n  Note: Bank accounts are always displayed in IBAN format. See also Unmasking IBANs.\nLocal MultiSafepay bank accounts To simplify transfers for customers and avoid them incurring international transfer and currency conversion fees, MultiSafepay has a local bank account in several European countries in the local currency. Customers then only pay the standard fee charged by their bank.\nTo send a customer the details of a local MultiSafepay bank account, include the relevant ISO 3166 country code in your create order request in the country parameter, e.g. \u0026quot;country\u0026quot;: \u0026quot;DE\u0026quot;.\n  Countries with a local MultiSafepay bank account      Country Currency     Austria EUR   Belgium EUR   Czech Republic CZK   France EUR   Germany EUR   Hungary HUF   Italy EUR   Netherlands EUR   Poland PLN   Portugal EUR   Spain EUR   UK GBP      Transfer guidance for customers The customer must only pay for one order per bank transfer. When transferring the funds, provide:\n The amount Their bank account number The payment reference number (not the order number)\nFormat: 16 digits, numbers only, no words   Customers must enter the details accurately to avoid unmatched payments (see below).   Matching payments When we receive payments, we automatically match them to the corresponding transaction in our system by the amount and payment reference/customer bank account number.\nAutomatic matching can fail if:\n  Payment details are incorrect, missing, or incorrectly formatted   We may not be able to match a payment if the customer:\n Transfers the wrong amount Pays for multiple orders in one transfer Enters the payment reference number incorrectly, or includes words, e.g. \u0026ldquo;Payment ID 5213 0452 1234 5670\u0026rdquo; Provides the order number instead of the payment reference number  Sometimes, the customer\u0026rsquo;s bank has added comments to the transfer.\n    Transaction wasn\u0026#39;t successfully created   The customer made a transfer but did not:\n Place their order with you, or Click Confirm on the payment page (redirect orders).  This means the transaction was not created successfully in our system.\n  We then try to match the payment manually. If that fails:\n For smaller amounts, we refund the customer. For larger amounts, we contact you for information to help identify the correct transaction.  Resolving unmatched payments To create the transaction again, check if a payment link was created:\n  Payment link created    Click the link to open the payment page. Click Bank Transfer. If the customer didn\u0026rsquo;t fill in the Bank account number field, enter their bank account number (if known) to help us match the payment. Click Confirm to create the transaction in our system.      Payment link not created    Generate a link manually. Include in the description the customer\u0026rsquo;s name and the order number (for your records). Click Bank Transfer. Add the customer\u0026rsquo;s bank account number (if known) to help us match the payment. Click Confirm to create the transaction in our system.  Note: The order ID must be unique for each payment link.   For support, email support@multisafepay.com\nSee this guidance in Dutch or German.\nActivation and integration          Activation Enable in your dashboard   Checkout options Payment components Payment pages (current and deprecated)   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; Bank Transfer direct/redirect   Ready-made integrations Supported in all ready-made integrations    User guide Stock issues To avoid stock-related issues if a customer fails to pay within 60 days, you can hold your inventory in your backend until they complete payment. This depends on your ecommerce platform or integration, and your products and/or services.\nNote: MultiSafepay bears no responsibility for stock-related issues.\nValidating transfers To change how bank transfers are validated, check whether this is possible in your backend.\n","tags":null,"title":"Bank Transfer","uri":"https://docs.multisafepay.com/payment-methods/bank-transfer/"},{"categories":null,"content":"When a cardholder requests a chargeback, they must provide a reason. This page sets out the chargeback reason codes for the major card schemes.\nIf you have asked MultiSafepay to dispute a chargeback on your behalf, we have specified what documentary proof you need to provide for each chargeback reason. Try to provide as much proof as possible.\nVisa Fraud   Reason code 10.4: Card absent environment   The cardholder denies participating in the transaction you processed.\nTo dispute this type of chargeback, you need to provide:\n Evidence the cardholder is in possession of and/or using the product/service, e.g. proof of delivery Evidence that the transaction was completed by a member of the cardholder\u0026rsquo;s household or family Evidence of previous interactions with the cardholder, e.g. other purchases, payment details A transaction receipt An invoice number A Track \u0026amp; Trace number Photos or emails proving a link between the person who received the product/service and the cardholder    Processing error   Reason Code 12.5: Incorrect amount   The transaction amount is incorrect or an error occurred.\nTo dispute this type of chargeback, you need to provide:\n A transaction receipt An invoice Evidence that the transaction amount is correct      Reason code 12.6: Duplicate processing or paid by other means   The cardholder or authorized person didn\u0026rsquo;t receive the product/service because you were unwilling or unable to provide it.\nTo dispute this type of chargeback, you need to provide proof that:\n Both transactions are independent and separate The transaction was not paid by other means or separate means    Customer dispute   Reason code 13.1: Merchandise or services not received   The cardholder or authorized person didn\u0026rsquo;t receive the product/service because you were unwilling or unable to provide it.\nTo dispute this type of chargeback, you need to provide:\n A description of the product/service Evidence that the cardholder is in possession of and/or using the product/service, e.g. proof of delivery Proof of delivery, e.g. cardholder signature An invoice A Track \u0026amp; Trace number Evidence of communications with the cardholder      Reason code 13.2: Cancelled recurring transaction   The cardholder:\n Withdrew permission to charge their bank account for a recurring transaction or installment transaction, or Notified you before the transaction was processed that their account was closed  To dispute this type of chargeback, you need to provide evidence that:\n You have previously completed successful transactions from that bank account The product/service was used after the cancellation, e.g. ID and/or login history The transaction was properly authorized and settled as a recurring transaction The transaction was a recurring transaction, including proof that the cardholder had to click to accept the terms and conditions of recurring transactions, or that they signed a contract agreeing to the terms and conditions      Reason code 13.3: Not as described   The product/service:\n Did not match your description on the transaction receipt or elsewhere when purchased, or Was damaged or defective  To dispute this type of chargeback, you need to provide:\n Proof of delivery of the product/service Your original description of the product/service An invoice number A Track \u0026amp; Trace number Evidence of communications with the cardholder Evidence that the cardholder did not attempt to return the product/service      Reason code 13.6: Credit not processed   The cardholder didn\u0026rsquo;t receive the funds for a credit or voided transaction receipt.\nTo dispute this type of chargeback, you need to provide:\n Details about the transaction An invoice Evidence of communications with the cardholder      Reason code 13.7: Cancelled service and/or merchandise   The cardholder cancelled or returned the product/service. Or, you did not properly disclose, or did disclose but did not apply, a limited return or cancellation policy at the time of the transaction.\nTo dispute this type of chargeback, you need to provide:\n Evidence of the cardholder using the service Evidence of delivery of products/services that the cardholder didn\u0026rsquo;t return Evidence that the cardholder had to click to accept your cancellation policy, and that your policy doesn\u0026rsquo;t include the right to dispute terms and conditions available on your website An invoice number A Track \u0026amp; Trace number Evidence of communications with the cardholder    Mastercard Fraud   Reason code 4837: Fraud related chargeback or no cardholder authorization   The cardholder denies participating in the transaction you processed.\nTo dispute this type of chargeback, you need to provide:\n Evidence that:  the cardholder is in possession of and/or using the product/service, e.g. proof of delivery the transaction was completed by a member of the cardholder\u0026rsquo;s household or family   Evidence of previous interactions with the cardholder, e.g. other purchases, payment details A transaction receipt An invoice A Track \u0026amp; Trace number Photos or emails proving a link between the person who received the product/service and the cardholder      Reason code 4863: Potential fraud, cardholder does not recognize the transaction   The cardholder denies participating in or doesn\u0026rsquo;t recognize the transaction you processed.\nTo dispute this type of chargeback, you need to provide:\n Evidence that:  the cardholder is in possession of and/or using the product/service, e.g. proof of delivery the transaction was completed by a member of the cardholder\u0026rsquo;s household or family the cardholder is using the product/service   A copy of the cardholder\u0026rsquo;s identification Evidence of previous interactions with the cardholder, e.g. other purchases, payment details A transaction receipt An invoice A Track \u0026amp; Trace number Photos or emails proving a link between the person who received the product/service and the cardholder    Processing error   Reason code 4834: Duplicate processing   The issuer determines that you submitted duplicate transactions.\nTo dispute this type of chargeback, you need to provide proof that both transactions:\n Are separate Are valid Were authorized by the cardholder\u0026rsquo;s personal identification number (PIN)      Reason code 4831: Dispute amount or an incorrect amount   The cardholder claims that you processed an incorrect amount.\nTo dispute this type of chargeback, you need to provide:\n A transaction receipt An invoice Evidence that:  the transaction amount was correct you have the right to alter the transaction amount without the cardholder\u0026rsquo;s consent after the transaction is completed      Customer dispute   Reason code 4853: Cardholder dispute: Goods or service not delivered, Goods not as described    The product/service did not match your description on the transaction receipt or other record at the time of purchase, or The transaction was not completed, or The product/service the cardholder received was damaged or defective, or The cardholder disputes the quality of the product/service received  To dispute this type of chargeback, you need to provide:\n Proof of delivery of the product/service A description of the product/service An invoice A Track \u0026amp; Trace number Evidence of communications with the cardholder   Evidence that cardholder didn\u0026rsquo;t attempt to return the product/service      Reason code 4841: Digital goods, cancelled recurring transaction   The cardholder:\n Withdrew permission to charge their bank account for a recurring transaction or installment transaction, or Notified you before the transaction was processed that their account was closed  To dispute this type of chargeback, you need to provide evidence that:\n You have previously completed successful transactions from that bank account The cardholder used the product/service after the cancellation, e.g. ID and/or login history The transaction was properly authorized and settled as a recurring transaction The transaction was a recurring transaction, including proof that the cardholder had to click to accept the terms and conditions of recurring transactions, or that they signed a contract agreeing to the terms and conditions    American Express Fraud   Reason code 4573: Fraud, full recourse   The cardholder denies authorizing the charge, and your business has been placed in the fraud full recourse program: Investigation confirms fraud.\nTo dispute this type of chargeback, you need to provide proof that the transaction is exempt, or was authorized by a PIN, or 3D Secure.\n    Reason code 4526: Missing signature   The cardholder claims that the transaction is fraudulent and their signature is not on the relevant documents.\nTo dispute this type of chargeback, you need to provide proof that:\n The receipt is signed, or The cardholder was present at the time of the transaction, or The transaction was verified by 3D Secure      Reason code 4540: Card not present   The cardholder denies participating in a MOTO transaction you processed. American Express investigates and confirms that the transaction is fraudulent.\nTo dispute this type of chargeback, you need to provide evidence that:\n The cardholder did participate in the transaction. The product/service was delivered to the cardholder\u0026rsquo;s billing address and that the cardholder signed a receipt.      Reason Code 6006: Fraud, unrecognized transaction   The cardholder informs American Express that they believe the transaction is fraudulent.\nTo dispute this type of chargeback, you need to provide:\n Proof that the cardholder agreed to the transaction, made the booking/reservation, and received confirmation Your website name, URL, IP address, and cancellation policy Signed proof that the product/service was shipped and delivered, and the delivery address and date    Processing errors   Reason code 4512: Multiple processing   You sent multiple transactions for the same amount.\nTo dispute this type of chargeback, you need to provide:\n Proof that you have already processed a corrective credit card transaction A fully itemized document that links the cardholder to each charge processed and proves that all transactions are valid      Reason code 4513: Credit not presented   The cardholder received written acknowledgement from you for a credit or they cancelled in line with your policy, but they haven\u0026rsquo;t received the credit in their account.\nTo dispute this type of chargeback, you need to provide:\n Proof that you have already processed a corrective credit card transaction A fully itemized document that links the cardholder to each charge processed and proves that all transactions are valid Screenshots of your cancellation policy Evidence that:  the cardholder clicks to accept the terms and conditions your cancellation policy doesn\u0026rsquo;t include the right to dispute the policy        Reason code 4515: Paid through other means   The cardholder informed American Express that the transaction was:\n Altered after they signed for it, or Submitted using an incorrect card number or amount  To dispute this type of chargeback, you need to provide proof that the cardholder\u0026rsquo;s payment was not related to the disputed transaction.\n    Reason code 4516: Requested for support not fulfilled and/or no reply to inquiry letter   American Express asked you to provide documents to support a charge queried by a cardholder but you didn\u0026rsquo;t respond.\nTo dispute this type of chargeback, you need to provide proof that you have already processed a corrective credit card transaction.\n    Reason code 4517: Insufficient or unclear reply to dispute inquiry letter   Fully itemized documents aren\u0026rsquo;t clear or complete and directly link the cardholder to the transaction.\nTo dispute this type of chargeback, you need to provide:\n The date and amount of credit and the reason An itemized invoice and/or receipt that directly links the cardholder to the charge A successfully completed fax transmission report Proof that the documents were sent and received by American Express within the time limit on the dispute inquiry letter      Reason code 4534: Multiple ROCs   The cardholder denies participating in the transaction, despite previous successful transactions with you.\nTo dispute this type of chargeback, you need to provide fully itemized documents that link the cardholder to each charge processed and prove that all transactions are valid.\n  Customer disputes   Reason code 4544: Goods and services, cancellation of recurring payments   You have continued to charge the cardholder\u0026rsquo;s account after they notified you to cancel or revoke consent for recurring payments.\nTo dispute this type of chargeback, you need to provide:\n A signed letter refuting the cardholder\u0026rsquo;s claim, and/or proof that their evidence is incorrect A copy of your cancellation policy and a statement indicating why the cancellation doesn\u0026rsquo;t comply with your policy      Reason code 4553: Goods and services, not as described   The cardholder received a product/service that differs from the written description you provided, or is damaged.\nTo dispute this type of chargeback, you need to provide:\n Proof that the product/service is as originally described A copy of your returns and refunds policies If available, authentication or a written assessment of the product/service      Reason code 4554: Goods and services, not received   The cardholder didn\u0026rsquo;t receive the product/service or only in part.\nTo dispute this type of chargeback, you need to provide evidence that:\n The cardholder or authorized person did receive the product/service, e.g. proof of delivery The product/service was delivered to the cardholder\u0026rsquo;s billing address The cardholder neither cancelled nor returned the product/service      Reason code 4798: American Express fraud dispute   The cardholder denies authorizing the charge, and your business has been placed in the fraud full recourse program: Investigation confirms fraud\nTo dispute this type of chargeback, you need to provide proof that the transaction is exempt, or was authorized by a PIN, or 3D Secure.\n  ","tags":null,"title":"Chargeback reasons and required evidence","uri":"https://docs.multisafepay.com/chargebacks/reasons/"},{"categories":null,"content":"An inline frame, or iFrame, is an HTML document embedded inside another HTML document on a website.\nAlthough MultiSafepay doesn\u0026rsquo;t prohibit iFrames, we don\u0026rsquo;t recommend them. Reasons include:\n  Some payment methods may not respond if you use an iFrame for privacy and security reasons.\n  Some banks use scripts that can\u0026rsquo;t load in iFrames.\n  Google Chrome\u0026rsquo;s safety checks on iFrames are very strict.\n  For support, email integration@multisafepay.com\n","tags":null,"title":"iFrames","uri":"https://docs.multisafepay.com/developers/iframes/"},{"categories":null,"content":"Manual Capture is a MultiSafepay solution that reduces your risk by letting you capture credit card payments either partially or in full when you ship the order.\n  Full capture   Full capture is when a customer places an order but you are unable to ship it right away. An authorization is created for the full amount of the transaction. The funds are settled when you ship the order.     Partial capture   Partial capture is when a customer places an order for multiple items but you can\u0026rsquo;t ship them all at once, only in separate shipments. An authorization is created for the full amount of the transaction, and the amount for each shipment is settled when you send it.   It supports Maestro, Mastercard, and Visa. For how Manual Capture can benefit your business, see Capture your payments.\nStatuses Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\n   Action Description Order status Transaction status     Authorize transaction The transaction is authorized and the funds reserved. Completed Initialized   Partial capture A partial amount is captured relating to a previous order ID. Completed Completed   Full capture The full amount is captured relating to a previous order ID. Completed Completed   Partial cancel reservation The reserved or remaining amount that was partially captured has been cancelled. Void Void   Full cancel reservation The fully captured reserved amount has been cancelled. Void Void   Partial authorization expiry The remaining authorized amount expired without being captured. Void Void   Full authorization expiry The full authorized amount expired without being captured. Void Void    Expiration periods  VISA: 7 days Mastercard and Maestro: 30 days  After expiration, the issuer can cancel the authorization.\nActivation To activate Manual Capture for your MultiSafepay account, email sales@multisafepay.com\nIntegration See API reference – Capture payment.\nManual Capture is not supported in our ready-made integrations by default, but you can customize it via our API.\nFor support, email integration@multisafepay.com\n","tags":null,"title":"Manual Capture","uri":"https://docs.multisafepay.com/features/manual-capture/"},{"categories":null,"content":"Request to Pay is a Deutsche Bank payment method based on the PSD2 Open Banking API. Customers are redirected to Deutsche Bank online banking to authenticate themselves, and authorize a secure SEPA transfer. Settlement is instant (if supported) or within 24 hours.\nThe funds are transferred directly to your business bank account, instead of your MultiSafepay balance, which simplifies reconciliation.\n Note: Request to Pay is currently not available to new merchants. It is still supported for existing merchants.   Overview           Countries Germany More countries will follow as more banks migrate to PSD2 APIs.    Currencies EUR    Chargebacks No    Refunds Full and partial All refunds are processed by Deutsche Bank.    Supports Second Chance    Transactions expire after 1 hour    Minimum amount 1 EUR    Maximum amount 15,000 EUR     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant D as Deutsche Bank participant Me as Merchant C-Mu: Selects Request to Pay at checkout alt Redirect flow Mu-C: Redirects to payment page to select their bank, then to online banking else Direct flow Mu-C: Redirects customer to online banking end C-D: Authenticates account and authorizes SEPA bank transfer D-Mu: Transfers funds (within 24 hours, if Instant SEPA not supported) Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to Deutsche Bank. Initialized Initialized   Deutsche Bank has authorized the transaction and is transfering the funds. Completed Uncleared   MultiSafepay has collected payment. Completed Completed   Deutsche Bank declined the transaction. Declined Declined   The customer cancelled the transaction at Deutsche Bank. Void Void   The customer didn\u0026rsquo;t complete payment within 1 hour. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed   Refund declined. Declined Declined      Activation and integration          Activation Enable in your dashboard   Checkout options Payment pages (current version only)   Testing You can\u0026rsquo;t test Request to Pay in your MultiSafepay test account. You can only make test payments in your MultiSafepay live account.   API Create order \u0026gt; Banking order Examples \u0026gt; Request to Pay direct/redirect   Ready-made integrations Not supported in our ready-made integrations.    ","tags":null,"title":"Request to Pay","uri":"https://docs.multisafepay.com/payment-methods/request-to-pay/"},{"categories":null,"content":"A virtual international bank account number (VIBAN) in your company name removes MultiSafepay branding from the customer experience for Bank Transfer and SEPA Direct Debit, and helps you better manage payments.\nA VIBAN isn\u0026rsquo;t connected to an actual bank account and simply routes incoming funds to MultiSafepay\u0026rsquo;s account to collect. However, MultiSafepay\u0026rsquo;s name no longer appears in payment instructions or on customer bank statements.\nHow it works For bank transfers, customers receive your VIBAN details in payment instructions instead of MultiSafepay\u0026rsquo;s IBAN, in both payment pages and emails (including for the direct flow). Your company name appears on the customer\u0026rsquo;s bank statement. Customers don\u0026rsquo;t see MultiSafepay\u0026rsquo;s name at any point and enjoy a cohesive experience with your brand.\nFor direct debits, there is no change for customers when completing payment. However, your company name appears on bank statements, which increases brand recognition and trust, and can reduce chargebacks.\nYou can apply for a VIBAN for your MultiSafepay account, or for a specific site.\nVIBANs can only be used for transactions in EUR.\nRefunds You can also make refunds using your VIBAN, and manage them from your MultiSafepay dashboard. Your company name appears on bank statements instead of MultiSafepay\u0026rsquo;s name.\nYou need to request this functionality when applying for your VIBAN.\nMatching payments Most incoming payments are automatically matched to the relevant order in your account. However, if the customer accidentally provides incorrect information or pays the wrong amount, MultiSafepay matches them manually. See Resolving unmatched Bank Transfer payments.\nWith a VIBAN, you can resolve unmatched payments yourself in your MultiSafepay dashboard. You need to request this functionality when applying for your VIBAN.\nOnce activated, an alert appears on your dashboard home page when you have unmatched payments to resolve. A new section appears under Transactions, called Unmatched payments. With this tool, you can perform the following actions:\n   Unmatched payment Action Outcome     Correct amount Match to order The order status changes to Completed. An explanation appears on the Transaction details page under Notes.   Amount too high Match and refund the excess The order status changes to Completed. A new refund order linked to the original order is created for the excess amount, and an explanation appears on the Transaction details page under Notes.    Partially match and reserve the excess The order status changes to Completed. The excess amount is reserved for future orders.    Match and keep the excess The order status changes to Completed. A new order (status Completed) linked to the original order is created to credit the excess to your MultiSafepay balance. - An explanation appears on the Transaction details page under Notes.   Amount too low Match and make up deficit from your MultiSafepay balance The order status changes to Completed. The deficit is debited from your balance as a transaction fee. - An explanation appears on the Transaction details page under Notes.    Match and collect deficit The order status changes to Completed. A new Bank Transfer order (linked to the original order) is created with a payment link for the customer to pay the outstanding amount.   Refund requested Refund in full A refund order linked to the original order is created and the payment is refunded.   Lump payment Match the payment to multiple orders Divide the payment across multiple orders and their status changes to Completed. If there is any excess after all relevant orders are matched, you can refund, reserve, or keep the excess (see above). If there are not enough funds for all relevant orders, you can make up the deficit from your MultiSafepay balance or create a new order for the outstanding amount (see above).    Activation Email a request for a VIBAN to sales@multisafepay.com\nInclude in the request:\n Whether you want to use in your dashboard the:  Refunds tool Matching tool   The company name you want to appear on bank statements Whether you want to use the VIBAN to:  Receive funds only Refund/pay out funds only Receive and refund/pay out funds    ","tags":null,"title":"Virtual IBANs","uri":"https://docs.multisafepay.com/payments/virtual-ibans/"},{"categories":null,"content":"MultiSafepay uses a webhook to send you updates about orders and other notifications.\nThe webhook is triggered when the order or transaction status changes, e.g. when:\n A customer completes payment A customer\u0026rsquo;s payment is declined or fails An order has shipped A refund is processed  MultiSafepay uses HTTPS to send notifications securely to the webhook endpoint configured for your web server.\nOur webhook uses the POST method to inform your web server when there is an update, and shares details on what has changed. This is more efficient than a poll-based method where your web server must continually check for updates.\nsequenceDiagram participant C as Customer participant Mu as MultiSafepay participant Me as Merchant C--Mu: Completes payment Mu-Me: Sends notification Me--Me: Updates order in system Me-Mu: Sends acknowledgement  Integration requirements If you use one of our ready-made integrations, this is set up automatically for you and you don\u0026rsquo;t need to do anything.\nIf you use one of our wrappers or SDKs, then you need to configure this as part of your integration. For more information, read the documentation that comes with the wrapper or SDK.\nIf you are building your own integration, you need to configure this yourself. See Configure your webhook endpoint.\n","tags":null,"title":"Webhook","uri":"https://docs.multisafepay.com/integrations/webhooks/"},{"categories":null,"content":"Zero Authorization is a MultiSafepay solution that lets you verify a credit card without charging the cardholder. Simply charge an amount of 0 EUR to the credit card (with or without 3D Secure authentication). MultiSafepay stores the sensitive payment details as a non-sensitive token, and then checks if the card is legitimate.\nYou can then also use tokens for Recurring Payments.\nZero Authorization supports Maestro, Mastercard, and Visa, and is available in all countries and currencies.\nFor how Zero Authorization can benefit your business, see 0-Authorization.\nActivation Email a request to activate Zero Authorization to sales@multisafepay.com\nIntegration See API recipe – Verify a card with Zero Authorization.\nVia our API: See API reference – Zero Authorization.\nVia ready-made integrations: Zero Authorization is not supported in our ready-made integrations by default, but you can customize it via our API.\nFor support, email integration@multisafepay.com\n","tags":null,"title":"Zero Authorization","uri":"https://docs.multisafepay.com/features/zero-authorization/"},{"categories":null,"content":"Office address Kraanspoor 39\n1033 SC Amsterdam\nBus from Amsterdam Central Station Buses 391 or 394. Get out at busstop Stenendokweg. Bus from Noorderpark metro Buses 34 or 35. Get out at busstop Stenendokweg.\n(Same map as above.)\nFerry from Amsterdam Central Station Ferry 905. Get off at stop NDSM Werf. Ferry times Amsterdam Central to NDSM Werf \nParking Ask your MultiSafepay contact to reserve a parking space for you.\nEntrance \n","tags":null,"title":"Route to our Amsterdam office","uri":"https://docs.multisafepay.com/how-to-find-us/amsterdam-office-location/"},{"categories":null,"content":"Our address Edificio Altair, Office 212\n29688 El Paraíso, Malaga\nFrom Malaga Airport Take Autovía del Mediterráneo A-7 or AP-7 direction Algeciras-Cadiz.\nTake the exit Cancelada.\nParking There is paid parking in front of the office.\nOur entrance \n","tags":null,"title":"Route to our Malaga office","uri":"https://docs.multisafepay.com/how-to-find-us/malaga-office-location/"},{"categories":null,"content":"An online banking payment method of two of Belgium\u0026rsquo;s largest banks: CBC which serves the French speaking population, and KBC which serves the Dutch-speaking population.\nThe payment method functions the same for both the CBC branch and the KBC branch. However, MultiSafepay\u0026rsquo;s payment gateway includes the branches as separate options because customers of one branch can\u0026rsquo;t pay through the other.\nSee how CBC/KBC can help your business!\nOverview           Countries Belgium    Currencies EUR    Chargebacks No    Refunds Full and partial (1 business day after payment is completed)    Supports Second Chance    Transactions expire after 5 days     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant CK as CBC/KBC participant Me as Merchant C-Mu: Selects CBC/KBC at checkout alt Redirect flow Mu-C: Redirects to payment page, then to online banking else Direct flow Mu-C: Redirects to online banking end C-CK: Authenticates account and completes payment CK-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to their bank. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The transaction was cancelled by you or the customer. Void Void   The customer didn\u0026rsquo;t complete payment within 5 days. Expired Expired   Refunds     Refund initiated. Initialized Initialized   Refund complete. Completed Completed    Note: If the customer doesn’t click the Return to website button, MultiSafepay doesn’t receive an update and the transaction status remains Initialized.\nWe import our bank statements daily and match all incoming payments.\n  Note: MultiSafepay doesn’t automatically receive the customer\u0026rsquo;s IBAN when a transaction is completed, but we import our bank statements daily. All incoming payments are then completed.\nActivation and integration          Activation Enable in your dashboard   Checkout options Payment pages (current version only)   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; CBC/KBC direct/redirect      Ready-made integrations    Craft Commerce OpenCart Magento 1, Magento 2 PrestaShop 1.6, PrestaShop 1.7 Shopware 5, Shopware 6 WooCommerce    ","tags":null,"title":"CBC/KBC","uri":"https://docs.multisafepay.com/payment-methods/cbc-kbc/"},{"categories":null,"content":"When you accept credit and debit card payments using a payment page or payment component, MultiSafepay handles the sensitive cardholder data, including:\n Primary account number (PAN) Cardholder name Service code Expiry date  We bear the risk and responsibility for PCI DSS compliance.\nAlternatively, you can collect cardholder data through other means. Because you will then handle sensitive data on your own server before sending it to MultiSafepay, you must also have PCI DSS certification.\nYou are responsible for arranging certification, which is a complex, time-consuming, and expensive process. Consider carefully if this makes sense for your business model.\nFor more information and advice, email sales@multisafepay.com\nSupported payment methods The table below sets out supported payment methods and their respective 3D Secure authentication requirements:\n   Card Authentication protocol     American Express American Express Safekey – mandatory for transactions above 30 EUR   Bancontact 3D Secure only   Maestro 3D Secure only   Mastercard Mastercard SecureCode and non-3D Secure payments   Visa Verified by Visa and non-3D Secure payments    Activation 1. To check your eligibility to use this feature, email sales@multisafepay.com\nSpecify in your request the:\n Payment methods you want to integrate Websites under your account this applies to Type of products you will sell  Provide your average order values and volumes, and any available processing statements.\n2. We check your account and company performance.\n3. Email proof of your PCI DSS certification and an activation request to risk@multisafepay.com\n4. If approved, we complete activation.\nYou must then provide us with your:\n Attestation of Compliance each year Approved Scanning Vendor reports every 3 months  Integration See API reference – Create order \u0026gt; Card order \u0026gt; Set type to direct.\n","tags":null,"title":"Handling cardholder data","uri":"https://docs.multisafepay.com/cards/handling-cardholder-data/"},{"categories":null,"content":"Before you start processing real transactions with MultiSafepay, we recommend testing each payment method in your MultiSafepay test account.\nIf you encounter any issues during testing, see Handling errors.\n  Methods not available in test environment   You can\u0026rsquo;t test the following methods in your MultiSafepay test account. You can only make test payments in your MultiSafepay live account.\n Betaal per Maand iDEAL QR Paysafecard Request to Pay TrustPay    Test credentials For all payment methods except AfterPay, you need your site\u0026rsquo;s test API key.\nMaking test payments   Initiate a payment in your ready-made integration or via our API:\n  Ready-made integration    In your backend, enter your test site API key. Place a test order, and then initiate a transaction with the payment method you are testing.      API    Create an order via our API to the test endpoint: https://testapi.multisafepay.com/v1/json/ For example requests for specific payment methods, see Examples.      Enter the test payment details for the payment method you are testing, or select a payment scenario, and complete the test payment.\n  To check the transaction details, sign in to your test dashboard.\n  Go to Transactions \u0026gt; Transactions overview.\n  In the Transactions overview list, select the transaction to view the Transaction details page.\n  To check that you have succesfully connected to our system, under Offline actions, check that you\u0026rsquo;ve correctly received the notifyMerchantTrans action. For information about errors, see HTTP errors.\n   Once your live account is approved, make sure you use the site API key from your live account instead of your test account.   Test payment details Use the following test payment details for testing different scenarios.\nBanking methods   Bancontact   Test a Bancontact order\n Create an order \u0026gt; Banking order (Example: Bancontact redirect). Open the payment link. In the Card number field, enter a card number (see table below). In the Expiry date fields, enter any future date. Click Confirm.     Card number Scenario Description     67034500054620008 Completed Transaction was completed (3D enrolled). Also use this card number when creating orders to test refunds and API refunds.   67034500054610009 Declined Transaction was declined (card must be 3D enrolled).   67039902990000045 Declined Transaction was declined (3D authentication failed).   67039902990000011 Declined Transaction was declined (3D authentication successful, but insufficient funds).    You can see the reason the transaction was declined in your MultiSafepay test account under Notes.\n Test a Bancontact QR code\n Create an order \u0026gt; Banking order (Example: Bancontact QR). Open the payment link. Scan the QR code with a general QR reader (not the Bancontact app or an error occurs). On the Test platform page, from the Test scenario list, select Completed. Click Test.      Bank Transfer    Create an order \u0026gt; Banking order (Example: Bank Transfer redirect). Open the payment link. In the Your bank account field, enter an IBAN (see table below). From the Bank\u0026rsquo;s country list, select a country, and then click Confirm.     IBAN Scenario Description     NL87ABNA0000000001 Initialized/ Completed Transaction is initiated. After 2 minutes, this changes to Completed. Also use this for testing refunds.   NL87ABNA0000000002 Initialized/ Expired Transaction is initiated. After 2 minutes, this changes to Expired.   NL87ABNA0000000004 Initialized/ Declined Transaction is initiated. After 2 minutes, this changes to Declined.   Any other IBAN Initialized/ Expired Transaction is initiated. After 5 days, this changes to Expired.    Note: You can\u0026rsquo;t test making direct API requests with an IBAN to test different transaction statuses.     Belfius, CBC/KBC, Sofort, Trustly    Create an order \u0026gt; Banking order. See also the Examples for the specific payment method. Open the payment link. On the Test platform page, from the Test scenario list, select Completed. Click Test.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Completed.      Dotpay    Create an order \u0026gt; Banking order (Example: Dotpay redirect). On the Dotpay page, enter in the:  Email address field: Any email address Phone number field: Any phone number   Select a bank. (You may see more banks available in the live environment.) You are automatically redirected. On the Test platform page, from the Test scenario list, select Completed. Click Test.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Completed.      EPS    Create an order \u0026gt; Banking order (Example: EPS redirect). Set the locale parameter to at_AT. On the EPS page, in the BIC field, enter any BIC code, e.g. RZOOAT2L420. Click Confirm. On the Test platform page, from the Test scenario list, select Completed. Click Test.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Completed.      Giropay    Create an order \u0026gt; Banking order (Example: Giropay redirect). On the Giropay page, in the BIC field, enter any BIC code, e.g. NOLADE22XXX. Click Confirm. On the Test platform page, from the Test scenario list, select Completed. Click Test.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Completed.      iDEAL    Create an order \u0026gt; Banking order (Example: iDEAL direct/redirect). For redirect, select a bank. On the Test platform page, from the Test scenario list, select Completed. Click Test.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Completed.  You can also test the following scenarios:\n   Scenario Description     Declined Transaction was declined.   Open Completed Transaction is initiated. After 1 minute, this changes to Completed.   Open Declined Transaction is initiated. After 1 minute, this changes to Declined.        SEPA Direct Debit    Create an order \u0026gt; Banking order (Example: SEPA Direct Debit direct/redirect). For redirect orders, open the payment link. Enter in the:  Account holder field the account holder name. IBAN field an IBAN (see table below).   Click Confirm.     IBAN Scenario Description     NL87ABNA0000000001 Initialized/ Completed Transaction is initiated. After 2 minutes, this changes to Completed. Also use this IBAN to test refunds and API refunds.   NL87ABNA0000000002 Initialized/ Declined Transaction is initiated. After 2 minutes, this changes to Declined.   NL87ABNA0000000003 Initialized/ Uncleared/ Completed Transaction is initiated. After 2 minutes, this changes to Uncleared. After 1 more minute, it changes to Completed.   NL87ABNA0000000004 Initialized/ Uncleared/ Declined Transaction is initiated. After 2 minutes, this changes to Uncleared. After 1 more minute, it changes to Declined.      Pay later methods   AfterPay   1. Request a test API key from AfterPay via either:\n Your implementation ticket with AfterPay, or Email sales@afterpay.nl  AfterPay shares the test key with MultiSafepay.\n2. To enable AfterPay in your MultiSafepay test account, email integration@multisafepay.com\nTest an AfterPay order\n Create an order \u0026gt; Pay later order (Example: AfterPay direct/redirect). For redirect orders, select the checkbox at the bottom of the AfterPay page, and then click Confirm.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Uncleared.  Test declining an order\nTo decline an order, in your test account under Order summary, click Decline.\nThe transaction and order statuses change to Void.\nTest AfterPay rejecting an order\nTo test AfterPay rejecting an order, in your direct or redirect API request, use the following email address: rejection@afterpay.nl\nThe transaction and order statuses change to Declined.\nChange the order status\nYou can change the order status to Shipped or Cancelled. To change the order status, either:\n Make an update order request, or In your MultiSafepay test dashboard, go to Order summary, and then click Order status.   Notes:\nYou can\u0026rsquo;t test:\n Receiving successful payment notifications from AfterPay Changing the transaction status from Uncleared to Completed Processing refunds      E-Invoicing, Pay After Delivery   Test an order\n Create an order \u0026gt; Pay later order (Example: E-Invoicing/Pay After Delivery direct/redirect). For redirect orders, open the payment link. Enter in the:  Birthdate field any date of birth. Format: DD-MM-YYYY. Bank account field any 10-digit bank account number. Email address field any email address. Phone number field any phone number.   Click Confirm.\nThe payment is processed in the test environment as Successful, with order and transaction statuses Uncleared.  Test declining an order\nTo decline an order, in your test account under Order summary, click Decline.\nThe order and transaction statuses change to Void.\nTest shipping an E-Invoicing order\nTo test shipping an order, make an update order API request with status \u0026quot;shipped\u0026quot;. You receive the invoice_url in the API response.\n    in3   Test an in3 order\n  Create an order \u0026gt; Pay later order (Example: in3 direct/redirect). Use the following customer details:\n Date of birth: 01-01-1999 Postal code: 1234AB House number: 1  For redirect orders:\n Enter in the:  Birthdate field: 01-01-1999 Phone number field: Any phone number   Select your title, and then click Confirm.    Select the checkbox to accept in3\u0026rsquo;s payment terms and privacy statement, and then click Afronden.\n  On the Test platform page, from the Test scenario list, select Completed.\n  Click Test.\n  On the in3 page, click Terug naar webshop.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Uncleared.\n  Test in3 declining an order\nUse the following customer details:\n Date of birth: 01-01-2000 Postal code: 1111AB House number: 1  The order and transaction statuses change to Declined.\nTest shipping an order\nTo test shipping an order, either:\n Make an update order API request with status shipped, or In your MultiSafepay test dashboard, go to Order summary, and then click Order status.  Receive an invoice\nYou can only test invoicing in your MultiSafepay live account. To do this, change the order status to Shipped.\nTest refunding an order\nTo test refunding an order:\n Create an order. Change the order status to shipped. Click Refund complete order, and then click Save item changes. A new order is created for the refund. The order status for the refund changes to Completed.  Test an API refund\nTo test refunding an order via the API:\n Create an order. Change the order status to shipped. Make a pay later refund API request: Refund order \u0026gt; Pay later refund. A new order is created for the refund. The order status for the refund changes to Completed.      Klarna   Test credentials:\n Site API key Klarna\u0026rsquo;s test credentials  Test a Klarna order\n Create an order \u0026gt; Pay later order (Example: Klarna direct/redirect). On the Klarna page, click Kopen. In the Telefoonnummer field, enter any mobile number, and then click Ga verder. In the Verificatiecode field, enter any 6-digit number, and then click Bevestigen.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Uncleared.  Test declining an order\nTo decline an order, in your test account under Order summary, click Decline.\nThe transaction and order statuses change to Void.\nChange the order status\nYou can change the order status to Shipped or Cancelled. To change the order status, either:\n Make an update order API request, or In your MultiSafepay test dashboard, go to Order summary, and then click Order status.  Test refunding an order\nTo refund an order:\n Change the order status to Shipped. Under Order summary, click Refund order, or make a pay later refund API request: Refund order \u0026gt; Pay later refund.\nThe transaction status changes to Completed.  Receive an invoice\nYou can only test invoicing in your MultiSafepay live account. To do this, change the order status to Shipped.\n Notes:\nYou can\u0026rsquo;t test:\n Receiving successful payment notifications from Klarna Changing the transaction status from Uncleared to Completed, except for refunds  For more information about integrating Klarna with MultiSafepay, see Klarna.\n  Credit and debit cards   Credit and debit cards     Create an order \u0026gt; Card order. See also the Examples for the specific card scheme.\nFor co-branded cards, see the Credit card redirect example, and set the locale parameter:\n Cartes Bancaires: fr_FR Dankort: da_DK Postepay: it_IT    On the payment page:\n In the Card number field, enter a card number (see table below). In the Card holder field, enter any name. From the Expiry date lists, select any future date. In the CVC/CVV field, enter 123. Click Confirm.    On the 3D payment page:\n From the drop-down list, select Authenticated (Y). Click Confirm.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Completed.       Card number Scenario Description     Amex: 378282246310005 Maestro: 6759000000005 Mastercard: 5500000000000004 Visa/co-branded: 4111111111111111 Completed Transaction was completed (3D enrolled)   Visa/co-branded: 4012001038443335 Completed Transaction was completed (not 3D enrolled)   Visa/co-branded: 4917300000000008 Uncleared Transaction is uncleared. After 3 minutes, this changes to Void.   Amex: 378734493671000 Visa/co-branded: 4462000000000003 Uncleared Transaction is uncleared. After 3 minutes, this changes to Completed.   Amex: 374200000000004 Visa/co-branded: 4012001037461114 Declined Transaction was declined (3D authentication failed)   Visa/co-branded: 4012001038488884 Declined Transaction was declined (3D authentication was successful, but insufficient funds)    Note: You can see the reason a transaction was declined in your MultiSafepay test account under Notes.\n  Prepaid cards   Edenred    Create an order \u0026gt; Prepaid card order (Example: Edenred redirect). On the payment page, click Add discount. From the Test scenario list, select the relevant discount, and then click Test. The payment is processed in the test environment as Successful, with order status Completed, and transaction status Completed.      Gift cards   You can test the following gift cards:\n Beauty Cadeau Boeken Voordeel Huis \u0026amp; Tuin Cadeau Klus Cadeau Nationale Bioscoopbon VVV Cadeaukaart Wijn Cadeaukaart  Test a gift card order\n Create an order \u0026gt; Prepaid card order (Example: Gift card redirect). Open the payment link. Enter in the:  Card number field 111115 Security code field any 4-digit number   Click Add discount.\nThe payment is processed in the test environment as Successful, with order status Completed, and transaction status Completed.  Use the following card numbers to test different gift card balances.\n   Card numbers Balance     111115 € 100   111112 € 5   111110 No balance    Any other card number receives an \u0026ldquo;Invalid card number\u0026rdquo; error.\nOther gift cards\nYou can\u0026rsquo;t test other gift cards in your MultiSafepay test account. You can only make test payments in your MultiSafepay live account. You make a small payment and the amount is actually deducted from the gift card.\n  Wallets   Alipay    Create an order \u0026gt; Wallet order (Example: Alipay direct/redirect). On the Test platform page, from the Test scenario list, select Completed. Click Test.\nThe payment is processed in your MultiSafepay test account as Successful, with order status Completed, and transaction status Initialized.  Note: You can\u0026rsquo;t test Alipay declining transactions.     Apple Pay   Compatible devices\nFor compatible devices, see Apple – Devices compatible with Apple Pay.\nIf you don\u0026rsquo;t own an Apple device, we recommend using the Appetize.io emulator. When you try to complete a test payment on the payment page, you get a This device is not supported error. But the emulator creates an order with the Apple Pay gateway preselected to check if there is an existing connection to our server. However, you can\u0026rsquo;t fully complete the test transaction.\nTesting prerequisites\n Use a compatible device Use Safari browser Activate Maestro for your MultiSafepay account  If these requirements are not met, Apple Pay doesn\u0026rsquo;t appear on the checkout page.\nTesting Apple Pay redirect\nTo test your Apple Pay redirect integration, there are two ways:\n If you have an Apple account with at least one credit card in your wallet, you can use your own account and card details in our test environment without incurring any costs. Alternatively, you can use an Apple Developer account configured for Apple Pay, with at least one Apple Pay test card in your wallet.  To test, follow these steps:\n Create an order \u0026gt; Wallet order (Example: Apple Pay redirect). On the payment page, click the Apple Pay button.\nYou can ignore the \u0026ldquo;This device is not supported\u0026rdquo; error. Sign in to your Apple Developer account and select your test card. Authorize the payment. The transaction is completed.  Testing Apple Pay direct\nSee Apple Pay direct integration – Test your integration.\n    Google Pay   To test Google Pay payments, follow these steps:\n  In your checkout, click the Google Pay button.\n  Complete payment using your Google account.\nYour real card details are never processed in our testing environment, but you must add at least one chargeable card to your Google account.\nDepending on your card\u0026rsquo;s authentication method, you may or may not be redirected to authenticate:\n PAN only: Authentication method for cards stored on file in your Google Account. Returned payment data includes your personal account number (PAN), expiration month, and expiration year. You are redirected to a test 3D Secure page to authenticate the payment. Cryptogram 3DS: Authentication method for cards stored as Android device tokens. Returned payment data includes a 3D Secure cryptogram generated on the device. You are not redirected to authenticate the payment.\nFor more information about testing, see Google Pay – Test with sample tokens.     Check the status of the payment in your test dashboard.\n  For support, email integration@multisafepay.com\n    PayPal   Test a PayPal order\n Create an order \u0026gt; Wallet order (Example: PayPal direct). On the Test platform page, from the Test scenario list, select Completed. Click Test.\nThe payment is processed in your MultiSafepay test account as Successful, with order status Completed, and transaction status Initialized.   Note: Since MultiSafepay does not collect payments on behalf of PayPal, the transaction status remains Initialized and can\u0026rsquo;t be changed to Completed.\n Change the order status\nYou can change the order status to:\n   Status Description Test scenario     Completed Order was completed Completed   Void Order was cancelled Cancelled   Initialized/ Completed Payment blocked by PayPal, then accepted after 2 minutes Initialized completed    To change the order status, on the Test platform page, from the Test scenario list, select the relevant test scenario.\n    WeChat Pay    Create order \u0026gt; Wallet order (Example: WeChat direct/redirect). Scan the QR code with a general QR reader (not the WeChat app or an error occurs). On the Test platform page, from the Test scenario list, select Completed. Click Test.\nThe payment is processed in your MultiSafepay test account as Successful, with order status Completed, and transaction status Completed.    Test cancelling an order   Testing cancellations   You can test cancelling orders for the following methods:\n Banking methods: Belfius, CBC/KBC, Dotpay, EPS, Giropay, iDEAL (not QR), Sofort, Trustly Wallets: Alipay, PayPal  To test cancelling an order:\n Create an order in your backend or via the API as above. On the Test platform page, from the Test scenario list, select Cancelled. Click Test.\nThe order status changes to Void.    Testing refunds   Testing refunds via your dashboard   Payment methods\n Banking methods: Bancontact (not QR), Bank Transfer, Belfius, CBC/KBC, Dotpay, EPS, Giropay, iDEAL (not QR), SEPA Direct Debit, Sofort, Trustly Credit and debit cards Pay later: in3, Klarna Wallets: Alipay, PayPal, WeChat Pay   Create an order. Wait until the transaction status changes to Completed. In your MultiSafepay test dashboard, go to Order summary, and then click Refund order. Under Refund, enter in the:  Account holder name field the account holder name of the account you want to refund to. Amount field the amount to refund. IBAN field the IBAN of the account you want to refund to. Reason/Description field the reason for the refund.   Click Continue. Under Refund confirmation, check that the description and amount are correct, and then click Confirm. A new order is created for the refund, with status Reserved or Initialized. Under Related transactions, select the ID of the refund order. Under Order summary, click Accept. In the Add transaction comment field, add a comment, and then click Add. The order status changes to Completed.      Testing refunds via API   Payment methods\n Banking methods: Bancontact (not QR), EPS, Giropay, iDEAL (not QR), SEPA Direct Debit, Sofort, Trustly Credit and debit cards Pay later: in3 Wallets: PayPal, WeChat Pay   Create an order. Make a refund API request. A new order is created for the refund. The order status for the refund changes to Reserved or Initialized. In your MultiSafepay test dashboard, go to Related transactions, and then select the ID of the refund order. Under Order summary, click Accept. In the Add transaction comment field, add a comment, and then click Add. The order status changes to Completed.     Support Email integration@multisafepay.com   ","tags":null,"title":"Testing payment methods","uri":"https://docs.multisafepay.com/testing/"},{"categories":null,"content":"Belfius is a popular online banking payment method for Belfius bank customers in Belgium.\nSee how Belfius can help your business!\nOverview           Countries Belgium    Currencies EUR    Chargebacks No    Refunds Full and partial (1 business day after payment is completed)    Supports Second Chance    Transactions expire after 5 days     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant B as Belfius\rparticipant Me as Merchant\rC-Mu: Selects Belfius at checkout\ralt Redirect flow\rMu-C: Redirects to payment page, then to online banking\relse Direct flow\rMu-C: Redirects to online banking\rend\rC-B: Authenticates account and completes payment\rB-Mu: Transfers funds Mu-Me: Settles funds\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to Belfius. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   You cancelled the transaction. Void Void/Cancelled   The customer didn\u0026rsquo;t complete payment within 5 days. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed    Note: If the customer doesn’t click the Return to website button, MultiSafepay doesn’t receive an update and the transaction status remains Initialized.\nWe import our bank statements daily and finalize all incoming payments.\n  Note: MultiSafepay doesn’t automatically receive the customer\u0026rsquo;s IBAN when a transaction is completed, but we import our bank statements daily. All incoming payments are then completed.\nActivation and integration          Activation Enable in your dashboard   Checkout options Payment pages (current version only)   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; Belfius direct/redirect   Ready-made integrations Supported in all ready-made integrations, except OsCommerce and ZenCart.    ","tags":null,"title":"Belfius","uri":"https://docs.multisafepay.com/payment-methods/belfius/"},{"categories":null,"content":"The best way of minimizing chargebacks is providing good customer service.\nWe set out below ways to minimize the risk of the most common types of chargeback:\nFraud Use 3D Secure for all credit card transactions.\nCardholders are not allowed to request chargebacks due to fraud for 3D Secure-protected transactions.\nNon-delivery  Inform customers of both expected and actual delivery times Document the delivery process, e.g. use Track \u0026amp; Trace with signature Refund or cancel transactions if the goods won\u0026rsquo;t arrive within the stated delivery time or not at all.  Goods not as described Offer quality items and provide clear descriptions on your website.\nTransaction not recognized To help increase brand recognition, include your logo in customer\u0026rsquo;s online bank statments. See Your logo in online banking.\nYour logo in customers' online banking Displaying your logo in customers' online banking environments and applications can help improve your brand presence, recognition, and trust. This in turn helps reduce chargebacks, disputes, and friendly fraud – when customers mistakenly initiate chargebacks because they don\u0026rsquo;t recognise or trust a transaction.\nUpload your logo for the card scheme to display in all participating banking environments and applications.\n","tags":null,"title":"Minimizing chargebacks","uri":"https://docs.multisafepay.com/chargebacks/minimizing/"},{"categories":null,"content":"Mail Order/Telephone Order (MOTO) is a MultiSafepay solution that lets you process card-not-present payments over the phone or by email.\nHow it works The customer provides their card details to you over the phone or by email.\nSince MOTO skips 3D Secure authentication, you bear the increased risk of fraud. To help ensure the customer is the cardholder, ask them to provide as much identifying information as possible, e.g.:\n Full name Address Phone numbers Email address Name of bank A copy of their signature on some correspondence, e.g. a scanned order confirmation  You handle the transaction via your MultiSafepay dashboard or our API.\n  Supported payment methods    American Express Generic credit card gateway Maestro, except for non-domestic transactions in France, Ireland, and Turkey Mastercard Visa    Activating MOTO Email a request to activate MOTO to sales@multisafepay.com\nThe Risk Team assesses your request and, if approved, activates MOTO for your MultiSafepay account.\nDashboard Once activated, to process MOTO payments, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Tools \u0026gt; Mail \u0026amp; phone payments. Under Payment details:  From the Currency list, select the currency, and then enter the amount. From the Site list, select the relevant website. Enter an order ID, if relevant. Enter an order description.   Under Credit card details, enter the payment details provided by the customer by email or telephone. Under Customer details, enter the customer\u0026rsquo;s name, address, and contact information. Click Submit order.\nThe transaction appears in your Transaction overview.  API See API reference – Create order \u0026gt; Card order.\nIn the gateway_info object, include the moto parameter.\n","tags":null,"title":"MOTO","uri":"https://docs.multisafepay.com/features/moto/"},{"categories":null,"content":"Check out our integrations with the following partners:\nBusiness growth  Picqer Sherpaan  Reservations Our partner Planyo offers online reservation software that lets customers make, confirm, and modify reservations, and pay online. You can also customize the reservation form.\n  Integration   To integrate Planyo with MultiSafepay, follow these steps:\n Sign in to your Planyo account. Go to Site settings \u0026gt; Online payments. Select MultiSafepay. Enter your MultiSafepay account ID, site ID and secure code. Make a test reservation.    Restaurants, cafes, and hotels Our partner MplusKASSA offers order management software for restaurants, cafes, and hotels, which can integrate with MultiSafepay.\nFor more information, email MplusKASSA at info@mpluskassa.nl\n  Known error   Note: When customers successfully complete payment with iDEAL, they don\u0026rsquo;t always return to your site, which can briefly delay the transaction status changing to Completed. If your business model requires you to retrieve the status as quickly as possible, MultiSafepay can enable a script to query iDEAL 5 times in the first minute, and then every minute until Completed.\nTo discuss, email integration@multisafepay.com\n  Subscriptions HostBill Our partner HostBill provides billing and automation software handles all aspects of running an online business, from client acquisition, invoicing, payments and management, to customer service and support.\n  Integration and testing   To integrate MultiSafepay as your payment provider, follow these steps:\nStep 1. Activate the MultiSafepay module in your HostBill account.\n Sign in to your HostBill account. Click Extras \u0026gt; Plugins. From the left menu, select Payment modules \u0026gt; MultiSafepay. Click Edit general settings, and then enter your MultiSafepay site API key. Click Save changes.  Step 2. Configure the module as required, e.g. the module name and callback URL.\nStep 3. Perform a test transaction.\n Go to the top menu and select Clients \u0026gt; Manage clients, and then click the sample client account John Doe. Click Login as client.\nYou are redirected to the client area From the left menu, select Billing to view the client’s invoices. Choose an invoice and click Pay selected invoices. Perform a test transaction. When the transaction is complete, check its status under Payments.    Twikey Our partner Twikey offers an online tool for managing and collecting subscriptions that includes SEPA direct debit mandate management.\nCustomers can complete payments via:\n A MultiSafepay payment link added to your invoice.\nSee Twikey – Naadloze integratie MultiSafepay. A one-off payment link or QR code sent via Twikey, e.g. by email, WhatsApp, SMS    Integration   To integrate with MultiSafepay, follow these steps:\n Sign in to your Twikey account. Go to Settings \u0026gt; Integrations \u0026gt; MultiSafepay. Enter your MultiSafepay site API key. To add a payment link to your invoices, update your invoice settings in your Twikey template settings. To create a payment link, go to Payment links enter the relevant information, e.g. amount, customer.    Websites  Duda MijnDomein  ","tags":null,"title":"Partner integrations","uri":"https://docs.multisafepay.com/partner-integrations/"},{"categories":null,"content":"SEPA Direct Debit is a European banking payment method where customers authorize automatic one-off or recurring debits directly from their bank account. It is available in 36 countries and supports Sofort and iDEAL.\nSee how SEPA Direct Debit can benefit your business!\nOverview           Countries SEPA region    Currencies EUR    Chargebacks Yes (see below)    Refunds Full and partial    Supports Recurring Payments Second Chance     To better manage SEPA Direct Debit payments, see also Virtual IBANs.\nChargebacks Customers can request a chargeback within 56 days, or for unauthorized transactions (i.e. without verifiable consent from the customer) within 13 months. This makes SEPA Direct Debit unsuitable for most retail businesses, e.g. clothing.\nYou cannot dispute chargebacks and there is no facilitated process like there is for credit card chargebacks. Chargebacks can cost up to 65 EUR in bank fees.\nRefund risk There is a risk that if you refund a customer and they also request a chargeback, you pay their money back twice. Customers can even request a chargeback after successfully receiving a refund.\n  Reducing refund risk   To reduce the chances of this happening, we strongly recomend:\n Only processing refunds for trusted, verified customers. Avoiding refunding a customer if you have any ongoing dispute with them. If refunding:  First check if the customer has already requested a chargeback. Wait until 7 working days after payment was initiated to be sure payment is now complete. Communicate clearly to the customer that you are sending a refund and that the funds will take a few days to arrive in their account.      Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Me as Merchant participant Mu as MultiSafepay participant CB as Customer's bank C-Me: Selects SEPA Direct Debit at checkout alt Redirect flow Mu-C: Redirects to payment page to confirm their IBAN and account name, then to your success page Me-Mu: [Direct flow] Sends request and customer information end Mu-CB: Conducts background check and sends e-mandate CB-Mu: Processes transaction and transfers funds Note over CB,Mu: -500 EUR= 9 days +500 EUR= 22 days Processing time can be reduced on request. Email sales@multisafepay.com Mu-Me: Settles funds    E-mandates   MultiSafepay creates e-mandates automatically based on the customer\u0026rsquo;s IBAN and your site ID, specifying if it is a first debit or recurring debit. We send all e-mandates to our bank at the end of every business day.     Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     MultiSafepay\u0026rsquo;s customer background check was successful and we\u0026rsquo;ve generated an e-mandate. Initialized Initialized   We\u0026rsquo;ve sent the e-mandate to the customer\u0026rsquo;s bank.      You can no longer cancel. Uncleared Uncleared   MultiSafepay has collected payment. Completed Completed   The customer cancelled the transaction or requested a chargeback, or their bank declined the transaction. Void Void   The customer\u0026rsquo;s bank declined the transaction.      See the reason codes below. Declined Declined   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Declined transactions If a SEPA Direct Debit transaction is declined, a reason code is provided.\nIf the IBAN or BIC is incorrect, our bank informs us the next business day.\n  Reason codes and recommended responses      Code Reason Recommended response     AC01 Incorrect account number Contact the debtor to confirm the IBAN. If there is a mandate amendment, check the data provided by the debtor.   AC04 Closed account number Contact the debtor to confirm the new IBAN.   AC06 Blocked account Contact the debtor for another account or means of payment.   AC13 Debtor account type is missing or invalid Contact the debtor for clarification and to agree another means of payment.   AG01 Transaction forbidden Contact the debtor for another account or means of payment.   AG02 Invalid bank operation code Resubmit the transaction with the correct authorization reference and transaction type: OOFF or RCUR.   AM04 Insufficient funds Contact the debtor to add funds to their account.   AM05 Duplication Contact your bank to confirm whether collection was duplicated.   BE04 Creditor address missing or incorrect    BE05 Unrecognised initiating party The creditor ID was incorrect or was changed without an amendment indicator. Check your contract for the correct creditor ID. If in doubt, contact your bank first.   CNOR Creditor bank is not registered Contact your bank.   DNOR Debtor bank is not registered Contact your bank. Contact the debtor for another means of payment.   ED05 Settlement failed Depends on the SLA between the debtor\u0026rsquo;s bank and the Clearing and Settlement Mechanism (CSM).   FF01 Invalid file format Repair the XML file.   FF05 Direct debit type incorrect    FOCR Return following a cancellation request    MD01 No mandate Analyse the characteristics of the SDD collection. Contact the debtor if they request a refund.   MD02 Required infomation missing from mandate Amend the mandate.   MD06 Customer requested chargeback Contact the debtor.   MD07 Customer deceased Close the agreement with the deceased debtor.   MS02 Unspecified reason generated by customer Contact the debtor.   MS03 Unspecified reason generated by agent Contact the debtor.   RC01 Incorrect bank identifier Contact the debtor for the correct BIC for a non-EEA collection. Ask your bank to allocate the debtor\u0026rsquo;s bank\u0026rsquo;s correct BIC in the interbank message.   RR01 Missing debtor account or identification Repair the collection to complete the debtor\u0026rsquo;s account information. Contact your bank.   RR02 Missing debtor name or address Repair the collection to complete the debtor\u0026rsquo;s name and/or address. Contact your bank.   RR03 Missing creditor name or address Repair the collection to complete your name. Contact your bank.   RR04 Regulatory reason Contact your bank.   SL01 Specific service offered by debtor agent Contact the debtor.   TM01 File received after cut-off time     For more information in:\n English, see European Payments Council – Guidance on reason codes. Dutch, see Betaal Vereniging – Reasoncodes en vervolgacties.    Activation and integration          Activation Apply to MultiSafepay   Checkout options Payment components Payment pages (current and deprecated)   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; SEPA Direct Debit direct/redirect   Ready-made integrations Supported in all ready-made integrations (direct).    ","tags":null,"title":"SEPA Direct Debit","uri":"https://docs.multisafepay.com/payment-methods/sepa-direct-debit/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/developer/wrappers/net/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/integration/ready-made/ofbiz/"},{"categories":null,"content":"Dotpay is an inter-bank payment method that links all major Polish retail banks. Customers pay from their own online banking environment.\nSee how Dotpay can benefit your business!\nOverview           Countries Poland    Currencies EUR, PLN    Chargebacks No    Refunds Full and partial    Supports Second Chance    Transactions expire after 3 days     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant CB as Customer's bank\rparticipant Me as Merchant\rC-Mu: Selects Dotpay at checkout\rMu-C: Redirects to payment page to select their bank, then to online banking\rC-CB: Authenticates account and completes payment\rCB-Mu: Transfers funds Mu-Me: Settles funds\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to their bank. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The customer didn\u0026rsquo;t complete payment within 3 days. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Activation and integration          Activation Apply to MultiSafepay   Checkout options Payment pages (current and deprecated)   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; Dotpay redirect   Ready-made integrations Supported in all ready-made integrations.    ","tags":null,"title":"Dotpay","uri":"https://docs.multisafepay.com/payment-methods/dotpay/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/integration/ready-made/nopcommerce/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/integration/ready-made/omnipay/"},{"categories":null,"content":"At MultiSafepay, our developers write code to process in-house transactions. However, there are also many fantastic developers worldwide who create code wrappers, plugins, and applications in order to integrate our products and services.\nWe\u0026rsquo;d like to work with you, and will help market your work and promote it on MultiSafepay Docs. To add your project to MultiSafepay Docs, email integration@multisafepay.com\nIf you want to publish a MultiSafepay community integration, you have to adhere to the following agreements:\n The plugin information should be visible in the JSON format and include how to configure the integration. For more information, see Create order \u0026gt; Body params \u0026gt; .. \u0026gt; Plugin. The readme should indicate that full responsibility lies with the developer of the community integration. This includes customer support and maintenance of the code. It should also be clear that the integration was not created by MultiSafepay If we decide to add the community integration as one of the supported integrations by MultiSafepay, we will have the authority to also remove the community integration without the breach of contract The community integration should be updated to maintain its functionality.  For any questions about joining our developer community, email integration@multisafepay.com\nMultiSafepay expects you to provide a high level of service and support to merchants. Possible action may be taken if we receive a high number of complaints.\n","tags":null,"title":"Build a community integration","uri":"https://docs.multisafepay.com/build-a-community-integration/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/orocommerce/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/integration/ready-made/sylius/"},{"categories":null,"content":"EPS is a widely accepted inter-bank payment method that links all major Austrian retail banks. Customers pay in their own online banking environment. Settlement is instant and guaranteed.\nSee how EPS can benefit your business!\nOverview           Countries Austria    Currencies EUR    Chargebacks No    Refunds Full and partial    Supports Second Chance    Transactions expire after Doesn\u0026rsquo;t apply     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant CB as Customer's bank participant Me as Merchant C-Mu: Selects EPS at checkout Mu-C: Redirects to payment page to select their bank, then to online banking C-CB: Authenticates account and completes payment CB-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to their bank. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The customer cancelled the transaction. Void Void   The customer didn\u0026rsquo;t complete payment within 10 minutes. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Activation and integration          Activation Enable in your dashboard   Checkout options Payment pages (current version only)   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; EPS redirect   Ready-made integrations Supported in all ready-made integrations.    ","tags":null,"title":"EPS","uri":"https://docs.multisafepay.com/payment-methods/eps/"},{"categories":null,"content":"TrustPay is a bank payment method in the Czech Republic. Customers pay from their own online banking environment.\nOverview          Countries Czech Republic   Currencies CZK   Chargebacks No   Refunds Full and partial   Supports Second Chance   Transactions expire after 10 days    Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant CB as Customer's bank participant Me as Merchant C-Mu: Selects TrustPay at checkout Mu-C: Redirects to payment page to select their bank, then to online banking C-CB: Authenticates account and completes payment CB-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to their bank. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The transaction was cancelled. Void Cancelled   The customer didn\u0026rsquo;t complete payment within 10 days. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Activation and integration          Activation Enable in your dashboard   Checkout options Payment pages (current and deprecated)   Testing You can\u0026rsquo;t test TrustPay in your test MultiSafepay account. You can only make test payments in your live MultiSafepay account.   API Create order \u0026gt; Banking order Examples \u0026gt; Trustpay redirect      Ready-made integrations   TrustPay (redirect) is supported in:\n Craft Commerce CS-Cart Drupal 7, Drupal 8 Magento 2 Odoo PrestaShop 1.7 Shopware 5, Shopware 6 WooCommerce VirtueMart X-Cart    ","tags":null,"title":"TrustPay","uri":"https://docs.multisafepay.com/payment-methods/trustpay/"},{"categories":null,"content":"Trustly is a quick, secure banking payment method that is available in 29 European countries. Customers pay from their own online banking environment.\nSee how Trustly can help your business!\nOverview          Countries Austria, Belgium, Bulgaria, Croatia, Cyprus, Czech Republic, Denmark, Estonia, Finland, Germany, Greece, Hungary, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, Netherlands, Norway, Poland, Portugal, Romania, Slovakia, Slovenia, Spain, Sweden, United Kingdom   Currencies EUR, GBP, SEK   Chargebacks No   Refunds Full and partial   Supports Second Chance   Transactions expire after 2 hours    Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant CB as Customer's bank participant Me as Merchant C-Mu: Selects Trustly at checkout Mu-C: Redirects to payment page to select their country and bank, then to online banking C-CB: Authenticates account and completes payment CB-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to their bank. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The customer cancelled the transaction at their bank. Cancelled Cancelled   The customer didn\u0026rsquo;t complete payment within 2 days. Expired Expired   In rare cases, the transaction is marked as Uncleared.      Trustly then informs MultiSafepay of the correct status, which may be Completed, Declined, or Expired.      Uncleared status automatically expires after 5 days. Uncleared Uncleared   Refunds     Refund initiated. Initialized Initialized   Refund complete. Completed Completed   Refund declined. Declined Declined      Activation and integration          Activation Enable in your dashboard   Checkout options Payment pages (current version only)   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; Trustly redirect      Ready-made integrations   Trustly (direct) is supported in:\n Craft Commerce CS-Cart Drupal 8 Magento 1, Magento 2 Odoo OpenCart PrestaShop 1.7 Shopware 5, Shopware 6 VirtueMart WooCommerce X-Cart    ","tags":null,"title":"Trustly","uri":"https://docs.multisafepay.com/payment-methods/trustly/"},{"categories":null,"content":"Giropay is the leading inter-bank payment method in Germany, connecting all major German retail banks. Customers pay from their own online banking environment. Settlement is instant and guaranteed.\nSee how Giropay can benefit your business!\nOverview           Countries Germany    Currencies EUR    Chargebacks No    Refunds Full and partial    Supports Second Chance     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant CB as Customer's bank participant Me as Merchant C-Mu: Selects Giropay at checkout Mu-C: Redirects to payment page to select their bank, then to online banking C-CB: Authenticates account and completes payment CB-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to their bank. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The customer cancelled the transaction. Void Void   The customer didn\u0026rsquo;t complete payment within 10 minutes. Expired Expired   Refunds     Refund initiated. Initialized Initialized   Refund complete. Completed Completed      Activation and integration          Activation Enable in your dashboard   Checkout options Payment pages (current and deprecated)   Testing Test payment details   API Create order \u0026gt; Banking order Examples \u0026gt; Giropay redirect   Ready-made integrations Supported in all ready-made integrations.    ","tags":null,"title":"Giropay","uri":"https://docs.multisafepay.com/payment-methods/giropay/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/developer/wrappers/django/"},{"categories":null,"content":"","tags":null,"title":"","uri":"https://docs.multisafepay.com/developer/wrappers/go/"},{"categories":null,"content":" Important: ING discontinued Home\u0026rsquo;Pay on December 6, 2021.\nWhat you need to do\nCheck your integration. If you use a:\n Direct integration, you need to remove ING Home’Pay from your checkout yourself. Redirect (hosted) integration, you don’t need to do anything. We’ll take care of this for you.  Alternative payment methods\nBancontact, Belgium’s leading payment method, is an excellent option to continue attracting Belgian customers. Other popular local alternatives are Belfius or CBC/KBC.\n  ","tags":null,"title":"ING Home'Pay","uri":"https://docs.multisafepay.com/payment-methods/ing-home-pay/"},{"categories":null,"content":"PayPal is a leading global payment method that lets customers pay by credit card or create a digital wallet linked to multiple payment methods.\nSee how PayPal can benefit your business!\nOverview          Countries Worldwide   Currencies Multiple   Chargebacks Yes   Refunds Full and partial (see guidance below)   Supports Second Chance   Transactions expire after 14 days    Refunds Refunds are only processed if there are enough funds in your PayPal business account. Otherwise, PayPal issues an eCheck.\nTo avoid PayPal cancelling the refund, in your PayPal account, authorize PayPal to withdraw funds from another bank account instead.\nFor support, contact PayPal – Help Center Home.\nPayPal Seller Protection PayPal Seller Protection covers you in the event of claims, chargebacks, or reversals due to unauthorized purchases or items the customer didn\u0026rsquo;t receive. You are covered for the full amount of all eligible transactions.\nTo be eligible, for specific countries, transaction requests must contain the correct state in the customer_address.\nFor:\n A list of the countries, see PayPal API – State codes More information, see PayPal – What is Seller Pretection  Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant P as PayPal\rparticipant Me as Merchant\rC-Mu: Selects PayPal at checkout\ralt Redirect flow\rMu-C: Redirects to payment page, then to their PayPal account\relse Direct flow\rMu-C: Redirects to PayPal account\rend\rC-P: Authenticates account, and completes payment P-Me: Settles funds in your PayPal business account\r Note: MultiSafepay does not collect funds for PayPal transactions.\n  Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to PayPal. Initialized Initialized   - Awaiting the customer to pay in their PayPal account or - PayPal is authorizing the transaction or - You may need to enable the currency and then authorize the payment in your PayPal business account. Uncleared Initialized   PayPal has collected payment. Completed Initialized   The customer cancelled the payment in PayPal. Void Void/Cancelled   The customer didn\u0026rsquo;t complete payment within 14 days. Expired Expired   Refunds     Refund initiated. Reserved Initialized   Refund complete. Completed Initialized   Refund declined. Declined Declined   - PayPal is authorizing the refund. Or - There are not enough funds in your PayPal business account to process the refund. For more information, see your PayPal business account. Uncleared Initialized      Activation and integration          Activation PayPal activation   Checkout options Payment components Payment pages (current and deprecated versions)   Testing Test payment details   API Create order \u0026gt; Wallet order Examples \u0026gt; PayPal direct/redirect   Ready-made integrations Supported in all ready-made integrations    Displaying your logo in the PayPal checkout   Displaying your logo in the PayPal checkout   To display your header or logo on the PayPal checkout page, follow these steps:\n Sign in to your MultiSafepay dashboard. Go to Settings \u0026gt; Files, and upload the relevant images. Go to Payment methods at the bottom right, and then select the relevant images from the Logo and Header list. Click Save.    ","tags":null,"title":"PayPal","uri":"https://docs.multisafepay.com/payment-methods/paypal/"},{"categories":null,"content":"Alipay is a leading global payment method that lets Chinese customers link their credit card or bank account to a digital wallet. It supports online, QR, and contactless POS payments, as well as international money transfers.\nFor Chinese customers, Alipay accounts are verified and linked to their Chinese bank account. Since 2021, non-Chinese customers can also pay with Alipay using the Tour Pass.\nSee how Alipay can benefit your business!\nOverview           Countries Worldwide    Currencies EUR, USD (currency conversion in EUR only)    Chargebacks No    Refunds Full and partial refunds, discounts, API refunds    Supports Second Chance    Transactions expire after 5 hours     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant A as Alipay\rparticipant Me as Merchant\rC-Mu: Selects Alipay at checkout\ralt Redirect flow\rMu-C: Redirects to payment page\relse Direct flow\rMu-A: Payment is processed with Alipay\rend\rA-Mu: Transfers funds Mu-Me: Settles funds\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to Alipay. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The customer didn\u0026rsquo;t complete payment within 5 hours, or it was cancelled. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Activation and integration          Activation Apply to MultiSafepay   Checkout options Payment pages (current version only)   Testing Test payment details   API Create order \u0026gt; Wallet order Examples \u0026gt; Alipay direct/redirect   Ready-made integrations Supported in all ready-made integrations (direct), except PrestaShop 1.6, OsCommerce, and Zen Cart.    ","tags":null,"title":"Alipay","uri":"https://docs.multisafepay.com/payment-methods/alipay/"},{"categories":null,"content":"Apple Pay is a leading global payment method that lets customers tokenize their payment details in a digital wallet. It supports Maestro, Mastercard, and Visa, and Dutch bank accounts. Customers can make both online and near-field communication (NFC) payments.\nAn additional layer of security is provided by 3D Secure, which requires customers to verify their identity.\nSee how Apple Pay can benefit your business!\nOverview           Countries Worldwide    Currencies Multiple    Chargebacks Yes    Refunds Full and partial Customers receive refunds in their Apple Pay account, and they appear on their credit card statement within the next business day.    Supports Second Chance    Transactions expire after 1 hour    Requirements Customers must use the Safari browser. An SSL secured connection (HTTPS) is required.    Payment gateways American Express, Maestro, Mastercard, and Visa gateways are supported.     For more information, see Apple – How to use Apple Pay.\nPayment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant A as Apple Pay participant CS as Card scheme participant Me as Merchant C-Mu: Selects Apple Pay at checkout alt Redirect flow Mu-C: Redirects to payment page, and then to Apple else Direct flow Mu-C: Redirects to Apple end C-A: Authorizes payment on an iOS device with Touch ID or Face ID alt Redirect integration A-Mu: Sends token else Direct integration A-Me: Sends the customer's payment details as an encrypted token Me-Mu: Sends token end Mu-CS: Decrypts token and processes payment Mu-Me: Runs fraud filter and provides risk report Me-Mu: Authorizes transaction CS-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected for 3D Secure authentication, or the card scheme is authorizing the transaction. Initialized Initialized   The card scheme authorized the transaction, but we\u0026rsquo;ve flagged it as potentially fraudulent.      Review it and then manually capture or decline. Uncleared Uncleared   MultiSafepay has collected payment. Completed Completed   Payment wasn\u0026rsquo;t captured manually or within 5 days. Void Void/Cancelled   The customer didn\u0026rsquo;t complete 3D Secure authentication. Expired Expired   The customer failed 3D Secure authentication or cancelled payment.      See Card errors. Declined Declined   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Activation and integration          Activation Apply to MultiSafepay   Checkout options Payment pages (current version only)   Testing Test payment details   Apple branding When integrating Apple Pay into your website, you must follow Apple\u0026rsquo;s branding guidelines.      Ready-made integrations   Supported in all ready-made integrations (redirect), except:\n OsCommerce VirtueMart X-Cart Zen Cart      Known errors   For most of our ready-made integrations, if the customer uses an incompatible device, Apple Pay doesn\u0026rsquo;t appear on the checkout page.\nFor our OpenCart plugin, Apple Pay does appear on the checkout page on incompatible devices, but throws an error when clicked and the payment button is disabled.\n  Apple Pay direct integration manual\nEmbed Apple Pay in your checkout page for the best user experience\n     Apple Pay redirect integration manual\nIntegrate Apple Pay using MultiSafepay payment pages\n     ","tags":null,"title":"Apple Pay","uri":"https://docs.multisafepay.com/payment-methods/apple-pay/"},{"categories":null,"content":"Gift cards are pre-loaded with a specific amount of credit that customers can use to make online or POS payments. Customers can use gift cards to pay for a transaction in full or in part, and make up the rest with another payment method. Gift card payments are processed by the card issuer.\nSee how gift cards can benefit your business!\nOverview           Countries Belgium, The Netherlands    Currencies EUR    Chargebacks No    Refunds Paid with gift card only: You can\u0026rsquo;t refund via MultiSafepay because we don\u0026rsquo;t receive any customer payment details to refund to. Refund in your own online banking. Paid with gift card and another payment method: Full refunds.    Transactions expire after Doesn\u0026rsquo;t apply       Supported gift cards            Baby Cadeaubon Kids' Cadeau   Beauty Cadeau Klus Cadeau   Wellness \u0026amp; Beauty Nationale Bioscoopbon   Biercheque Nationale Entertainment Card   Bloemen Cadeaukaart Nationale Tuinbon   Boekenbon Ohmygood Giftcard   Boeken Voordeel Speelgoedwinkel Cadeaukaart   Fashioncheque Sport \u0026amp; Fit   Fashion Giftcard Sports Gift Card   Gezondheidsbon VVV Cadeaukaart   Good4fun Wijn Cadeaukaart   Huis \u0026amp; Tuin Cadeau YourGift    Note: Webshop Giftcard no longer offers open-loop gift cards. To exchange existing open-loop cards for closed-loop cards, see Webshop Giftcard – Contact.   Closed-loop vs open-loop cards  Closed-loop: Redeem with 1 merchant only. No amount limits. Open-loop:  Redeem with multiple merchants Max credit: 150 EUR Max transaction amount: 50 EUR Amounts over 50 EUR must be paid with an additional payment method.    Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant G as Gift card issuer participant Me as Merchant C-Mu: Selects a gift card at checkout Mu-C: Redirects to payment page C-G: Enters gift card details and completes payment G-Mu: Processes payment and transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     For partial payment with another method: The customer has been redirected to their bank. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   For partial payment with another method: The customer didn\u0026rsquo;t complete payment. Expired Expired   Refunds     Refund initiated. Initialized Initialized   Refund complete. Completed Completed      Activation and integration          Activation Gift cards activation   Checkout options Payment pages (current and deprecated)   Testing Test payment details   API Create order \u0026gt; Prepaid card order Examples \u0026gt; Gift card redirect   Ready-made integrations We don’t support all open-loop gift cards in our ready-made integrations and no closed-loop gift cards. Therefore in some integrations, we use generic gateways to support custom gift cards. To check if a specific gift card is supported in your ready-made integration, email the Integration Team at integration@multisafepay.com    Pay later methods When paying with a gift card and a pay later method, customers must enter the gift card details before placing their order, i.e. on your checkout page.\nThis is because pay later methods collect and require precise order specifications. Our platform would interpret the gift card as a discount and generate incorrect order information, e.g. tax calculations.\nYou are solely responsible for this in your integration.\nCustom gift cards Contact MultiSafepay to develop your own custom gift card!\n  Creating custom gift cards    Email a request to sales@multisafepay.com MultiSafepay:  Checks the payment method rules Assesses the feasibility of developing the card and estimates the timeframe   Send us:  Whether you want a closed-loop or open-loop card The card name A high-resolution visual mockup of the gift card, preferably in .png or .jpg format, showing the logo as large as possible A test gift card with credit and a secure code A startup fee of 200 EUR   We develop the card and activate it for your MultiSafepay account. To integrate your card:  Using our API, see API reference – Create order \u0026gt; Prepaid card order. In a ready-made integration, add your gateway ID.    For support, email integration@multisafepay.com   Known errors   VVV Cadeaukaart   VVV Cadeaukaart cards can sometimes throw an error where the credit balance appears to be 0, but is then restored within 24 hours (potentially affected by weekends and holidays). This appears to be due to temporary failures in the card issuer\u0026rsquo;s system.\nIf a customer completes a payment and receives this error message, advise them to wait for 1 hour for a confirmation email before trying again to avoid placing two orders.\n  ","tags":null,"title":"Gift cards","uri":"https://docs.multisafepay.com/payment-methods/gift-cards/"},{"categories":null,"content":"Google Pay™ is a digital wallet for in-app and online payments. Customers can tokenize their payment details in their Google Pay account.\nSee how Google Pay can benefit your business!\nOverview           Countries Worldwide. See Google Pay – Countries or regions where you can use Google Pay.    Currencies Multiple    Chargebacks Yes    Refunds Full and partial Customers receive refunds in their Google Pay account, and they appear on their credit card statement within the next business day.    Supports Second Chance Recurring Payments    Transactions expire after 1 hour    Payment gateways Maestro, Mastercard, and Visa gateways are supported. American Express is not supported.    Terms and conditions By processing Google Pay payments, you agree to the Google API Terms of Service.       Supported browsers   Google Pay is supported in the following browsers:\n Apple Safari Google Chrome Microsoft Edge Mozilla Firefox Opera UCWeb UC Browser    For more information, see Google Pay – Overview.\nPayment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant G as Google Pay participant CS as Card scheme participant Me as Merchant participant CB as Customer's bank C-Mu: Selects Google Pay at checkout alt Redirect flow Mu-C: Redirects to payment page, then to Google account else Direct flow Mu-C: Redirects to Google account end C-G: Completes payment alt Redirect integration G-Mu: Sends token else Direct integration G-Me: Sends the customer's payment details as an encrypted token Me-Mu: Sends token end Mu-CS: Decrypts token and processes payment Mu-Me: Runs fraud filter and provides risk report Me-Mu: Authorizes (or declines) transaction CB-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected for 3D Secure authentication, or the card scheme is authorizing the transaction. Initialized Initialized   The card scheme authorized the transaction, but we\u0026rsquo;ve flagged it as potentially fraudulent.      Review it and then manually capture or decline. Uncleared Uncleared   MultiSafepay has collected payment. Completed Completed   Payment wasn\u0026rsquo;t captured manually or within 5 days. Void Void/Cancelled   The customer didn\u0026rsquo;t complete 3D Secure authentication. Expired Expired   The customer failed 3D Secure authentication or cancelled payment.      See Card errors. Declined Declined   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Activation and integration          Activation Apply to MultiSafepay   Checkout options Payment pages (current version only)   Testing Test payment details   Google branding When integrating Google Pay into your ecommerce platform, you must follow Google\u0026rsquo;s brand guidelines.   Ready-made integrations Supported in all ready-made integrations (redirect), except Magento 2 and WooCommerce. For these, you can use a generic gateway. See their manuals for further details.    Google Pay™ direct integration manual\nEmbed Google Pay in your checkout page for the best user experience.\n     Google Pay™ redirect integration manual\nEasily integrate Google Pay using MultiSafepay payment pages.\n     ","tags":null,"title":"Google Pay","uri":"https://docs.multisafepay.com/payment-methods/google-pay/"},{"categories":null,"content":"WeChat Pay is a leading global payment method that lets Chinese customers link their credit card or bank account to a digital wallet. It supports online and QR payments.\nSee how WeChat Pay can benefit your business!\nOverview          Countries Worldwide   Currencies EUR To request support for more currencies, email sales@multisafepay.com   Chargebacks No   Refunds Full and partial   Transactions expire after 2 hours    Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram\rautonumber\rparticipant C as Customer\rparticipant Mu as MultiSafepay\rparticipant W as WeChat Pay\rparticipant Me as Merchant\rC-Mu: Selects WeChat Pay at checkout\ralt Redirect flow\rMu-C: Redirects to payment page with WeChat QR code\relse Direct flow\rMu-C: Displays WeChat QR code\rend\rC-W: Scans code with WeChat app to complete payment W-Mu: Transfers funds Mu-Me: Settles funds\r   Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     A QR code has been generated. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The customer cancelled the payment. Void Void   The customer didn\u0026rsquo;t complete payment within 2 hours. Expired Expired   Refunds     Refund initiated. Reserved Reserved   Refund complete. Completed Completed      Activation and integration          Activation Apply to MultiSafepay   Checkout options Payment pages (current version only)   Testing Test payment details   API Create order \u0026gt; Wallet order Examples \u0026gt; WeChat Pay direct/redirect   Ready-made integrations Supported in our PrestaShop 1.7 plugin.    Displaying QR codes To display WeChat Pay QR codes, you can use:\n  Redirect orders to payment pages, where the QR code is displayed under Payment methods.\n  Direct orders, retrieve the qr_url, and render the QR code in your system to display it to the customer.\n  ","tags":null,"title":"WeChat Pay","uri":"https://docs.multisafepay.com/payment-methods/wechat-pay/"},{"categories":null,"content":"Paysafecard lets customers make online payments using secure prepaid vouchers, available for purchase locally. The customer chooses a fixed voucher amount: 10, 25, 50 or 100 EUR. The funds are available immediately.\nCustomers enter the voucher code, without providing any personal payment details. Vouchers for different amounts are available in the local currency in 46 countries.\nThe card balance remains available for 12 months free of charge. After 12 months, customers are charged a monthly administration fee of 3 EUR, which is deducted from the balance.\nOverview           Countries Worldwide – Go to paysafecard.com, and click the globe icon in the banner.    Currencies EUR, GBP, USD    Chargebacks No    Refunds Paid with Paysafecard only: You can\u0026rsquo;t refund via MultiSafepay because we don\u0026rsquo;t receive any customer payment details to refund to. Refund in your own online banking. Paid with Paysafecard and another payment method: Full refunds.    Transactions expire after 3 hours     Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant P as Paysafecard participant Me as Merchant C-Mu: Selects Paysafecard at checkout Mu-C: Redirects to payment page C-P: Enters 16-digit card PIN and completes payment P-Mu: Transfers funds Mu-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Payments Order status Transaction status     The customer has been redirected to Paysafecard. Initialized Initialized   MultiSafepay has collected payment. Completed Completed   The customer cancelled the transaction at Paysafecard. Void Void   The customer didn\u0026rsquo;t complete payment within 3 hours. Expired Expired   Refunds     Refund initiated. Initialized Initialized   Refund complete. Completed Completed      Activation and integration          Activation Paysafecard doesn\u0026rsquo;t require activation. Search for outlets that sell Paysafecard: - Find sales outlets - Verkooppunten zoeken For any questions, email sales@multisafepay.com   Checkout options Payment pages (current version only)   Testing You can’t test Paysafecard in your MultiSafepay test account. You can only make test payments in your MultiSafepay live account. For any questions, email integration@multisafepay.com   API Create order \u0026gt; Prepaid card order Examples \u0026gt; Gift card redirect      Ready-made integrations   Supported in:\n OsCommerce Magento 1 VirtueMart X-Cart Zen Cart    ","tags":null,"title":"Paysafecard","uri":"https://docs.multisafepay.com/payment-methods/paysafecard/"},{"categories":null,"content":"Edenred lets employers provide their employees with a prepaid card loaded with Edenred vouchers:\n Ticket Restaurant Ticket EcoCheques Ticket Compliments Ticket Sport \u0026amp; Culture  Overview           Countries Belgium    Currencies EUR    Chargebacks No    Refunds No    Supports Second Chance     How it works  You must sign a contract with Edenred. For each voucher, you must comply with Edenred\u0026rsquo;s rules regarding permitted products and services. An Edenred prepaid card can contain multiple Edenred vouchers. Edenred vouchers can be used for partial payments in combination with another payment method. View all the Edenred transactions for your website in My Edenred.  Payment flow This diagram shows the flow for a successful transaction. Click to magnify.\nsequenceDiagram autonumber participant C as Customer participant Mu as MultiSafepay participant E as Edenred participant Me as Merchant C-Mu: Selects Edenred at checkout Mu-C: Redirects to payment page to select the relevant voucher, then to their Edenred account C-E: Authenticates account, and authorizes MultiSafepay access E-Mu: Confirms authorization and sufficient funds on voucher E-Me: Settles funds    Payment statuses   Order status: Changes as the customer\u0026rsquo;s order with you progresses towards shipment (independent of payment)\nTransaction status: Changes as the funds progress towards settlement in your MultiSafepay balance\nFor more information, see Payment statuses.\n   Description Order status Transaction status     For partial payment with another method: The customer has been redirected to their bank. Initialized Initialized   MultiSafepay has collected payment. Completed Completed      Activation and integration          Activation Edenred activation   Checkout options Payment pages (current and deprecated)   Testing Test payment details   API Create order \u0026gt; Prepaid card order Examples \u0026gt; Edenred redirect By default, all activated Edenred vouchers display at checkout, but you can also specify which Edenred vouchers to display per transaction.   Ready-made integrations Only supported in our Magento 2 integration.    ","tags":null,"title":"Edenred","uri":"https://docs.multisafepay.com/payment-methods/edenred/"},{"categories":null,"content":"Use the following API requests to manage the bank account details of affiliated merchant accounts:\nAdd and retrieve bank accounts:\n Add bank account: Add a bank account to a merchant account. List bank accounts: Retrieve a list of all bank accounts. Get bank account: Retrieve a specific bank account.  Verify bank accounts by payment link or bank statement:\n Create payment link: Create a payment link to verify a bank account. Add bank statement: Add a bank statement to verify a bank account. List bank statements: Retrieve a list of all bank statements. Get bank statement: Retrieve a specific bank statement.  Authentication All the bank account requests require a partner account API key. This is not the same as a site API key. For more information, email your partner manager.\nAll URLs on this page are directed to our test API. To use the live API, change the subdomain testapi to api and use the corresponding API key.\nAdd bank account POST https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/bank-accounts?api_key={your-account-api-key}\nAdd a new bank account to a merchant account.\nPath parameters    Parameter Description     account_id\nstring The affiliated merchant ID.\nFormat: 8 character string, e.g. 12345678. Required.    Request body parameters    Parameter Description     currency string The currency of the bank account. Format: ISO-4217, e.g. EUR. Required.   holder_name string The full name of the bank account holder. This can be a natural person, company, or other legal entity. Format: Max 40 characters. Required.   iban string The IBAN of the bank account. Format: Alphanumeric string of up to 34 characters. Required.     Response body parameters The following are in addition to the request body parameters.\n   Parameter Description     id\nstring The unique identifier of the bank account. Referred to as bankaccount_id.     Sample request curl -X POST \u0026quot;https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/bank-accounts?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ --header \u0026quot;Content-Type: application/json\u0026quot; \\ --data-raw '{ \u0026quot;currency\u0026quot; :\u0026quot;EUR\u0026quot;, \u0026quot;holder_name\u0026quot; :\u0026quot;{affiliate-company-name}\u0026quot;, \u0026quot;iban\u0026quot; :\u0026quot;NL02ABNA0123456789\u0026quot; }'   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;currency\u0026quot; :\u0026quot;EUR\u0026quot;, \u0026quot;holder_name\u0026quot; :\u0026quot;{affiliate-company-name}\u0026quot;, \u0026quot;iban\u0026quot; :\u0026quot;NL02ABNA0123456789\u0026quot;, \u0026quot;id\u0026quot; :\u0026quot;t4xwvomi45heq\u0026quot; }, \u0026quot;success\u0026quot;: true }    List bank accounts GET https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/bank-accounts?api_key={your-account-api-key}\nRetrieve a list of all bank accounts linked to an affiliated merchant account.\nPath parameters    Parameter Description     account_id\nstring The affiliated merchant ID.\nFormat: 8 character string, e.g. 12345678. Required.    Response body parameters    Parameter Description     currency string The currency of the bank account. Format: ISO-4217, e.g. EUR.   holder_name string The full name of the bank account holder. This can be a natural person, company, or other legal entity. Format: Max 40 characters.   iban string The IBAN of the bank account. Format: Alphanumeric string of up to 34 characters.   id string The unique identifier of the bank account. Referred to as bankaccount_id.   status string The screening status of the bank account.     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/bank-accounts?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: [ { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;holder_name\u0026quot;: \u0026quot;{affiliate-company-name}\u0026quot;, \u0026quot;iban\u0026quot;: \u0026quot;NL02ABNA0123456789\u0026quot;, \u0026quot;id\u0026quot; :\u0026quot;t4xwvomi45heq\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;pending\u0026quot; }, { \u0026quot;currency\u0026quot;: \u0026quot;USD\u0026quot;, \u0026quot;holder_name\u0026quot;: \u0026quot;{affiliate-company-name}\u0026quot;, \u0026quot;iban\u0026quot;: \u0026quot;NL02ABNA0123456789\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;ytipdsfs746os\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;pending\u0026quot; } ], \u0026quot;success\u0026quot;: true }    Get bank account GET https://testapi.multisafepay.com/v1/json/bank-accounts/{bankaccount_id}?api_key={your-account-api-key}\nRetrieve a specific bank account by its identifier.\nPath parameters    Parameter Description     bankaccount_id The unique identifier of the bank account. Format: String, e.g. upp6ogjqret36. Required.\nThe bankaccount_id is returned as id in the add bank account and list bank accounts requests.    Response body parameters    Parameter Description     currency string The currency of the bank account. Format: ISO-4217, e.g. EUR.   holder_name string The full name of the bank account holder. This can be a natural person, company or other legal entity. Format: Max 40 characters.   iban string The IBAN of the bank account. Format: Alphanumeric string of up to 34 characters.   id string The unique identifier of the bank account. Referred to as bankaccount_id.   status string The screening status of the bank account.     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/bank-accounts/{bankaccount_id}?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;holder_name\u0026quot;: \u0026quot;{affiliate-company-name}\u0026quot;, \u0026quot;iban\u0026quot;: \u0026quot;NL02ABNA0123456789\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;{bankaccount_id}\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;pending\u0026quot; }, \u0026quot;success\u0026quot;: true }    Create payment link POST https://testapi.multisafepay.com/v1/json/bank-accounts/{bankaccount_id}/payment-links?api_key={your-account-api-key}\nCreate a payment link for a refundable 1 EUR payment. This payment is used to verify the ownership of the associated bank account. Alternatively, supply a copy of a bank statement through the bank-statements request.\nPath parameters    Parameter Description     bankaccount_id The unique identifier of the bank account. Format: String, e.g. upp6ogjqret36. Required.\nThe bankaccount_id is returned as id in the add bank account and list bank accounts requests.    Request body parameters No parameters are sent in this request.  Response body parameters    Parameter Description     bankaccount_id string The unique identifier of the bank account.   payment_link string The URL where you can make the refundable 1 EUR payment.     Sample request curl -X POST \u0026quot;https://testapi.multisafepay.com/v1/json/bank-accounts/{bankaccount_id}/payment-links?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;bankaccount_id\u0026quot;: \u0026quot;{bankaccount_id}\u0026quot;, \u0026quot;payment_link\u0026quot;: \u0026quot;https://paymentlink.com/link\u0026quot; }, \u0026quot;success\u0026quot;: true }    Add bank statement POST https://testapi.multisafepay.com/v1/json/bank-accounts/{bankaccount_id}/bank-statements?api_key={your-account-api-key}\nUpload a bank statement to verify the ownership of the bank account. Alternatively, create a payment link using the payment-links request.\nPath parameters    Parameter Description     bankaccount_id The unique identifier of the bank account. Format: String, e.g., upp6ogjqret36. Required.\nThe bankaccount_id is returned as id in the add bank account and list bank accounts requests.    Request body parameters    Parameter Value     encoded_content\nstring Base64 encoded content. Required.   filename string The bank statement filename. Format: Max 250 characters. Required.   mime_type string The media type of the bank statement file . Options: application/pdf image/jpeg     Response body parameters    Parameter Value     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   bankaccount_id string The unique identifier of the bank account. Format: String, e.g. upp6ogjwpot36.   document_type string The document type of the file.   filename string The bank statement filename. Format: Max 250 characters.   id string The unique identifier of the bank statement. Referred to as bankstatement_id.   mime_type string The media type of the bank statement file . Options: application/pdf image/jpeg     Sample request curl -X POST \u0026quot;https://testapi.multisafepay.com/v1/json/bank-accounts/{bankaccount_id}/bank-statements?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ --header \u0026quot;Content-Type: application/json\u0026quot; \\ --data-raw '{ \u0026quot;encoded_content\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;bank-statement.pdf\u0026quot;, \u0026quot;mime_type\u0026quot;: \u0026quot;application/pdf\u0026quot; }'   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account_id\u0026quot;: \u0026quot;{affiliate_account_id}\u0026quot;, \u0026quot;bankaccount_id\u0026quot;: \u0026quot;{bankaccount_id}\u0026quot;, \u0026quot;document_type\u0026quot;: null, \u0026quot;filename\u0026quot;: \u0026quot;bank-statement.pdf\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;4jrp7krwlrafq\u0026quot;, \u0026quot;mime_type\u0026quot;: \u0026quot;application/pdf\u0026quot; }, \u0026quot;success\u0026quot;: \u0026quot;true\u0026quot; }    List bank statements GET https://testapi.multisafepay.com/v1/json/bank-accounts/{bankaccount_id}/bank-statements?api_key={your-account-api-key}\nRetrieve a list of all bank statements associated with a bank account.\nPath parameters    Parameter Description     bankaccount_id The unique identifier of the bank account. Format: String, e.g., upp6ogjqret36. Required.\nThe bankaccount_id is returned as id in the add bank account and list bank accounts requests.    Response body parameters    Parameter Value     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   bankaccount_id string The unique identifier of the bank account. Format: String, e.g. upp6ogjwpot36.   document_type string The document type of the file.   filename string The name of the bank statement file. Format: Max 250 characters.   id string The unique identifier of the bank statement. Referred to as bankstatement_id.   mime_type string The media type of the bank statement file . Options: application/pdf image/jpeg     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/bank-accounts/{bankaccount_id}/bank-statements?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account_id\u0026quot;: \u0026quot;{affiliate_account_id}\u0026quot;, \u0026quot;bankaccount_id\u0026quot;: \u0026quot;{bankaccount_id}\u0026quot;, \u0026quot;document_type\u0026quot;: \u0026quot;bankstatement\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;bank-statement.pdf\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;4jrp7krwlrafq\u0026quot;, \u0026quot;mime_type\u0026quot;: \u0026quot;application/pdf\u0026quot; }, \u0026quot;success\u0026quot;: \u0026quot;true\u0026quot; }    Get bank statement GET https://testapi.multisafepay.com/v1/json/bank-statements/{bankstatement_id}?api_key={your-account-api-key}\nRetrieve a specific bank statement by its identifier.\nPath parameters    Parameter Description     bankstatement_id The unique identifier of the bank statement Format: String, e.g. it613jfo4psde. Required. The bankstatement_id is returned as id in the add bank statement and list bank statements requests.    Response body parameters    Parameter Value     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   bankaccount_id string The unique identifier of the bank account. Format: String, e.g. upp6ogjwpot36.   document_type string The document type of the file.   filename string The name of the bank statement file. Format: Max 250 characters.   id string The unique identifier of the bank statement. Referred to as bankstatement_id.   mime_type string The media type of the bank statement file . Options: application/pdf image/jpeg     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/bank-statements/{bankstatement_id}?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account_id\u0026quot;: \u0026quot;{affiliate_account_id}\u0026quot;, \u0026quot;bankaccount_id\u0026quot;: \u0026quot;{bankaccount_id}\u0026quot;, \u0026quot;document_type\u0026quot;: \u0026quot;bankstatement\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;bank-statement.pdf\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;{bankstatement_id}, \u0026quot;mime_type\u0026quot;: \u0026quot;application/pdf\u0026quot; }, \u0026quot;success\u0026quot;: true }    Next steps You have added one or multiple bank accounts to a merchant account. Next, you can add UBOs and websites using the unique affiliated merchant ID.\n Previous\nCreate a merchant account\n  Next\nAdd UBO details\n     ","tags":null,"title":"Add bank accounts","uri":"https://docs.multisafepay.com/api-onboarding/add-bank-accounts/"},{"categories":null,"content":"Use the following requests to add, retrieve or update ultimate beneficial owner (UBO) details for an affiliated merchant account:\nAdd, retrieve, and update UBOs:\n Create a UBO: Add a UBO to a merchant account. List UBOs: Retrieve all UBOs for a merchant account. Get UBO: Retrieve a specific UBO by its identifier. Update UBO: Update a UBO.  Add and retrieve UBO identification documents:\n Add identity document: Add an identity document to an existing UBO. List identity documents: Retrieve all identity documents for a UBO. Get identity document: Retrieve a specific identity document for a UBO.  Authentication All the UBO requests require a partner account API key. This is not the same as a site API key. For more information, email your partner manager.\nAll URLs on this page are directed to our test API. To use the live API, change the subdomain in the URL from testapi to api and use the corresponding API key.\n Create a UBO POST https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/ubos?api_key={your-account-api-key}\nAdd a new UBO to a merchant account.\nPath parameters    Parameter Description     affiliate_account_id\nstring The affiliated merchant ID.\nFormat: 8 character string, e.g. 12345678. Required.    Request body parameters    Parameter Description     name string The UBO\u0026rsquo;s full name. Format: Max 200 characters. Required.   title string The UBO\u0026rsquo;s title. Options: mr or mrs. Required.   address string The UBO\u0026rsquo;s address. Format: Max 100 characters. Optional.   address_apartment string The UBO\u0026rsquo;s apartment number. Format: Max 15 characters. Optional.   city string The UBO\u0026rsquo;s city of residence. Format: Max 100 characters. Optional.   state string The UBO\u0026rsquo;s province or state of residence. Format: Max 100 characters. Optional.   country string The UBO\u0026rsquo;s country of residence. Format: ISO 3166-1 alpha-2, e.g. NL. Required.   zipcode string The UBO\u0026rsquo;s ZIP code. Format: max 20 characters. Optional.   birthday string The UBO\u0026rsquo;s date of birth. Format: yyyy-mm-dd, e.g. 1980-01-31. Required.   country_of_birth string The UBO\u0026rsquo;s country of birth. Format: ISO 3166-1 alpha-2, e.g. NL. Required.   email string The UBO\u0026rsquo;s email address. Format: Max 100 characters. Required.   mobile_phone string The UBO\u0026rsquo;s mobile phone number. Format: Max 25 characters. Optional.   office_phone string The UBO\u0026rsquo;s office phone number. Format: Max 25 characters. Optional.   job_title string The UBO\u0026rsquo;s job title. Format: Max 100 characters. Required.   percentage integer The UBO\u0026rsquo;s percentage of equity. Format: Non-fractional number from 25 to 100. Required.   type string The UBO\u0026rsquo;s type of equity. Options: control_rights, shareholder, voting_rights or other. Required.     Response body parameters The following are in addition to the request body parameters.\n   Parameter Description     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   id string The unique identifier of the UBO. Referred to as ubo_id.     Sample request curl -X POST \u0026quot;https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/ubos?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ --header \u0026quot;Content-Type: application/json\u0026quot; \\ --data-raw '{ \u0026quot;name\u0026quot;: \u0026quot;Firstname Lastname\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;mrs\u0026quot;, \u0026quot;address\u0026quot;: \u0026quot;Mainstreet 123\u0026quot;, \u0026quot;address_apartment\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Funtown\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;Noord-Holland\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;1234 ZP\u0026quot;, \u0026quot;birthday\u0026quot;: \u0026quot;1980-01-31\u0026quot;, \u0026quot;country_of_birth\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;email@address.com\u0026quot;, \u0026quot;mobile_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;office_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;job_title\u0026quot;: \u0026quot;CEO\u0026quot;, \u0026quot;percentage\u0026quot;: 100, \u0026quot;type\u0026quot;: \u0026quot;control_rights\u0026quot; }'   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account_id\u0026quot;: {affiliate_account_id}, \u0026quot;address\u0026quot;: \u0026quot;Mainstreet 123\u0026quot;, \u0026quot;address_apartment\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;birthday\u0026quot;: \u0026quot;1980-01-31\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Funtown\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;country_of_birth\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;email@address.com\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;glmqo15bces6n\u0026quot;, \u0026quot;job_title\u0026quot;: \u0026quot;CEO\u0026quot;, \u0026quot;mobile_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Firstname Lastname\u0026quot;, \u0026quot;office_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;percentage\u0026quot;: 100, \u0026quot;state\u0026quot;: \u0026quot;Noord-Holland\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;mrs\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;control_rights\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;1234 ZP\u0026quot; }, \u0026quot;success\u0026quot;: true }    List UBOs GET https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/ubos\nRetrieve an array of all UBOs linked to a merchant account.\nPath parameters    Parameter Description     affiliate_account_id\nstring The affiliated merchant ID.\nFormat: 8 character string, e.g. 12345678. Required.    Response body parameters    Parameter Description     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   address string The UBO\u0026rsquo;s address. Format: Max 100 characters.   address_apartment string The UBO\u0026rsquo;s apartment number. Format: Max 15 characters.   birthday string The UBO\u0026rsquo;s date of birth. Format: yyyy-mm-dd (e.g., 1980-01-31).   city string The UBO\u0026rsquo;s city of residence. Format: Max 100 characters.   country string The UBO\u0026rsquo;s country of residence. Format: ISO 3166-1 alpha-2, e.g. NL.   country_of_birth string The UBO\u0026rsquo;s country of birth. Format: ISO 3166-1 alpha-2, e.g. NL.   email string The UBO\u0026rsquo;s email address. Format: Max 100 characters.   id string The unique identifier of the UBO. Referred to as ubo_id.   job_title string The UBO\u0026rsquo;s job title. Format: Max 100 characters.   mobile_phone string The UBO\u0026rsquo;s mobile phone number. Format: Max 25 characters.   name string The UBO\u0026rsquo;s full name. Format: Max 200 characters.   office_phone string The UBO\u0026rsquo;s office phone number. Format: Max 25 characters.   percentage integer The UBO\u0026rsquo;s percentage of equity. Format: Non-fractional number from 25 to 100.   state string The UBO\u0026rsquo;s province or state of residence. Format: Max 100 characters.   title string The UBO\u0026rsquo;s title. Options: mr or mrs.   type string The UBO\u0026rsquo;s type of equity. Options: control_rights, shareholder, voting_rights or other.   zipcode string The UBO\u0026rsquo;s ZIP code. Format: Max 20 characters.     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/ubos?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: [ { \u0026quot;account_id\u0026quot;: {affiliate_account_id}, \u0026quot;address\u0026quot;: \u0026quot;Mainstreet 123\u0026quot;, \u0026quot;address_apartment\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;birthday\u0026quot;: \u0026quot;1980-01-31\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Funtown\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;country_of_birth\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;email@address.com\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;glmqo15bces6n\u0026quot;, \u0026quot;job_title\u0026quot;: \u0026quot;CEO\u0026quot;, \u0026quot;mobile_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Firstname Lastname\u0026quot;, \u0026quot;office_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;percentage\u0026quot;: 100, \u0026quot;state\u0026quot;: \u0026quot;Noord-Holland\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;mrs\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;control_rights\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;1234 ZP\u0026quot; } ], \u0026quot;page\u0026quot;: { \u0026quot;total\u0026quot;: 1 }, \u0026quot;success\u0026quot;: true }    Get a UBO GET https://testapi.multisafepay.com/v1/json/ubos/{ubo_id}?api_key={your-account-api-key}\nRetrieve a specific UBO.\nPath parameters    Parameter Description     ubo_id string The unique identifier of the UBO you want to retrieve. The ubo_id is returned as id in the create a UBO and list UBOs requests.    Response body parameters    Parameter Description     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   address string The UBO\u0026rsquo;s address. Format: Max 100 characters.   address_apartment string The UBO\u0026rsquo;s apartment number. Format: Max 15 characters.   birthday string The UBO\u0026rsquo;s date of birth. Format: yyyy-mm-dd, e.g. 1980-01-31.   city string The UBO\u0026rsquo;s city of residence. Format: Max 100 characters.   country string The UBO\u0026rsquo;s country of residence. Format: ISO 3166-1 alpha-2, e.g. NL.   country_of_birth string The UBO\u0026rsquo;s country of birth. Format: ISO 3166-1 alpha-2, e.g. NL.   email string The UBO\u0026rsquo;s email address. Format: Max 100 characters.   id string The unique identifier of the UBO. Referred to as ubo_id.   job_title string The UBO\u0026rsquo;s job title. Format: Max 100 characters.   mobile_phone string The UBO\u0026rsquo;s mobile phone number. Format: Max 25 characters.   name string The UBO\u0026rsquo;s full name. Format: Max 200 characters.   office_phone string The UBO\u0026rsquo;s office phone number. Format: Max 25 characters.   percentage integer The UBO\u0026rsquo;s percentage of equity. Format: Non-fractional number from 25 to 100.   state string The UBO\u0026rsquo;s province or state of residence. Format: Max 100 characters.   title string The UBO\u0026rsquo;s title. Options: mr or mrs.   type string The UBO\u0026rsquo;s type of equity. Options: control_rights, shareholder, voting_rights or other.   zipcode string The UBO\u0026rsquo;s ZIP code. Format: Max 20 characters.     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/ubos/{ubo_id}?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account_id\u0026quot;: {affiliate_account_id}, \u0026quot;address\u0026quot;: \u0026quot;Mainstreet 123\u0026quot;, \u0026quot;address_apartment\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;birthday\u0026quot;: \u0026quot;1980-01-31\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Funtown\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;country_of_birth\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;email@address.com\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;{ubo_id}\u0026quot;, \u0026quot;job_title\u0026quot;: \u0026quot;CEO\u0026quot;, \u0026quot;mobile_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Firstname Lastname\u0026quot;, \u0026quot;office_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;percentage\u0026quot;: 100, \u0026quot;state\u0026quot;: \u0026quot;Noord-Holland\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;mrs\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;control_rights\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;1234 ZP\u0026quot; }, \u0026quot;success\u0026quot;: true }    Update a UBO PATCH https://testapi.multisafepay.com/v1/json/ubos/{ubo_id}?api_key={your-account-api-key}\nUpdate information about an existing UBO.\nPath parameters    Parameter Description     ubo_id string The unique identifier of the UBO you want to update. The ubo_id is returned as id in the create a UBO and list UBOs requests.    Request body parameters    Parameter Description     name string The UBO\u0026rsquo;s full name. Format: Max 200 characters. Optional.   title string The UBO\u0026rsquo;s title. Options: mr or mrs. Optional.   address string The UBO\u0026rsquo;s address. Format: Max 100 characters. Optional.   address_apartment string The UBO\u0026rsquo;s apartment number. Format: Max 15 characters. Optional.   city string The UBO\u0026rsquo;s city of residence. Format: Max 100 characters. Optional.   state string The UBO\u0026rsquo;s province or state of residence. Format: Max 100 characters. Optional.   country string The UBO\u0026rsquo;s country of residence. Format: ISO 3166-1 alpha-2, e.g. NL. Optional.   zipcode string The UBO\u0026rsquo;s ZIP code. Format: Max 20 characters. Optional.   birthday string The UBO\u0026rsquo;s date of birth. Format: yyyy-mm-dd, e.g. 1980-01-31. Optional.   country_of_birth string The UBO\u0026rsquo;s country of birth. Format: ISO 3166-1 alpha-2, e.g. NL. Optional.   email string The UBO\u0026rsquo;s email address. Format: Max 100 characters. Optional.   mobile_phone string The UBO\u0026rsquo;s mobile phone number. Format: Max 25 characters. Optional.   office_phone string The UBO\u0026rsquo;s office phone number. Format: Max 25 characters. Optional.   job_title string The UBO\u0026rsquo;s job title. Format: Max 100 characters. Optional.   percentage integer The UBO\u0026rsquo;s percentage of equity. Format: Non-fractional number from 25 to 100. Optional.   type string The UBO\u0026rsquo;s type of equity. Options: control_rights, shareholder, voting_rights or other. Optional.     Response body parameters The following are in addition to the request body parameters.\n   Parameter Description     account_id string The affiliated merchant ID. Format: 8 character string, e.g., 12345678.   id string The unique identifier of the UBO. Referred to as ubo_id.     Sample request curl -X PATCH \u0026quot;https://testapi.multisafepay.com/v1/json/ubos/glmqo15bces6n?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ --header \u0026quot;Content-Type: application/json\u0026quot; \\ --data-raw '{ \u0026quot;email\u0026quot;: \u0026quot;newemail@address.com\u0026quot; }'   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account_id\u0026quot;: {affiliate_account_id}, \u0026quot;address\u0026quot;: \u0026quot;Mainstreet 123\u0026quot;, \u0026quot;address_apartment\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;birthday\u0026quot;: \u0026quot;1980-01-31\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Funtown\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;country_of_birth\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;newemail@address.com\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;{ubo_id}\u0026quot;, \u0026quot;job_title\u0026quot;: \u0026quot;CEO\u0026quot;, \u0026quot;mobile_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Firstname Lastname\u0026quot;, \u0026quot;office_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;percentage\u0026quot;: 100, \u0026quot;state\u0026quot;: \u0026quot;Noord-Holland\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;mrs\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;control_rights\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;1234 ZP\u0026quot; }, \u0026quot;success\u0026quot;: true }    Add identity document POST https://testapi.multisafepay.com/v1/json/ubos/{ubo_id}/identitydocs?api_key={your-account-api-key}\nUpload an identity document to verify a UBO.\nPath parameters    Parameter Description     ubo_id string The unique identifier of the UBO you want to verify. The ubo_id is returned as id in the create a UBO and list UBOs requests.    Request body parameters    Parameter Description     document_type string The type of identity document. Options: id, passport, driverslicense, proof_of_address   encoded_content string Base64 encoded content. Required.   filename string The identity document filename. Format: Max 250 characters. Required.   mime_type string The media type of the identity document file. Options: application/pdf,image/jpeg     Response body parameters The following are in addition to the request body parameters.\n   Parameter Description     id string The unique identifier of the identity document. Referred to as identitydoc_id.   ubo_id string The unique identifier of a UBO.     Sample request  curl -X POST \u0026quot;https://testapi.multisafepay.com/v1/json/ubos/{ubo_id}/identitydocs?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ --header \u0026quot;Content-Type: application/json\u0026quot; \\ --data-raw '{ \u0026quot;document_type\u0026quot;:\u0026quot;id\u0026quot;, \u0026quot;encoded_content\u0026quot;:\u0026quot;string\u0026quot;, \u0026quot;filename\u0026quot;:\u0026quot;identity-of-ubo.pdf\u0026quot;, \u0026quot;mime_type\u0026quot;:\u0026quot;application/pdf\u0026quot; }'   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;document_type\u0026quot;: \u0026quot;id\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;identity-of-ubo.pdf\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;agi6ehoreex6a\u0026quot;, \u0026quot;merchant_id\u0026quot;: {affiliate_account_id}, \u0026quot;mime_type\u0026quot;: \u0026quot;application/pdf\u0026quot;, \u0026quot;ubo_id\u0026quot;: \u0026quot;{ubo_id}\u0026quot; }, \u0026quot;success\u0026quot;: true }    List identity documents GET https://testapi.multisafepay.com/v1/json/ubos/{ubo_id}/identitydocs?api_key={your-account-api-key}\nRetrieve an array of all identity documents for a UBO.\nPath parameters    Parameter Description     ubo_id string The unique identifier of the UBO you want to retrieve identity documents for. The ubo_id is returned as id in the create a UBO and list UBOs requests.    Response body parameters    Parameter Description     document_type string The type of identity document. Options: id, passport, driverslicense, proof_of_address   filename string The identity document filename. Format: Max 250 characters.   id string The unique identifier of the identity document. Referred to as identitydoc_id.   merchant_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   mime_type string The media type of the identity document file. Options: application/pdf,image/jpeg   ubo_id string The unique identifier of a UBO.     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/ubos/{ubo_id}/identitydocs?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: [ { \u0026quot;document_type\u0026quot;: \u0026quot;identity\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;identity-of-ubo.pdf\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;agi6ehoreex6a\u0026quot;, \u0026quot;merchant_id\u0026quot;: {affiliate_account_id}, \u0026quot;mime_type\u0026quot;: \u0026quot;application/pdf\u0026quot;, \u0026quot;ubo_id\u0026quot;: \u0026quot;{ubo_id}\u0026quot; } ], \u0026quot;page\u0026quot;: { \u0026quot;total\u0026quot;: 1 }, \u0026quot;success\u0026quot;: true }    Get identity document GET https://testapi.multisafepay.com/v1/json/identitydocs/{identitydoc_id}?api_key={your-account-api-key}\nRetrieve a specific identity document.\nPath parameters    Parameter Description     identitydoc_id\nstring The unique identifier of the identity document you want to retrieve.\nThe identitydoc_id is returned as id in the add identity document and list identity documents requests.    Response body parameters    Parameter Description     document_type string The type of identity document. Options: id, passport, driverslicense, proof_of_address   filename string The identity document filename. Format: Max 250 characters.   id string The unique identifier of the identity document. Referred to as identitydoc_id.   merchant_id string The affiliated merchant ID. Format: 8 character string (e.g., 12345678).   mime_type string The media type of the identity document file. Options: application/pdf,image/jpeg   ubo_id string The unique identifier of the UBO the identity document is for.     Sample request curl -X GET https://testapi.multisafepay.com/v1/json/identitydocs/{identitydoc_id}?api_key={your-account-api-key} --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;document_type\u0026quot;: \u0026quot;identity\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;identity-of-ubo.pdf\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;{identitydoc_id}\u0026quot;, \u0026quot;merchant_id\u0026quot;: {affiliate_merchant_id}, \u0026quot;mime_type\u0026quot;: \u0026quot;application/pdf\u0026quot;, \u0026quot;ubo_id\u0026quot;: \u0026quot;{ubo_id}\u0026quot; }, \u0026quot;success\u0026quot;: true }    Next steps Now that you have created an affiliated merchant account and added one or multiple bank account and UBOs, complete the onboarding by adding one or multiple websites using the unique affiliated merchant id .\n Previous\nAdd bank accounts\n  Next\nAdd websites\n     ","tags":null,"title":"Add UBOs","uri":"https://docs.multisafepay.com/api-onboarding/add-ubos/"},{"categories":null,"content":"Use the following requests to add, retrieve, or update websites linked to an affiliated merchant account:\n Add a website: Add a website to a merchant account. List websites: Retrieve all websites for a merchant account. Get website: Retrieve a specific website. Update website: Update a website.  Authentication All of the website requests require a partner account API key. For more information, email your partner manager.\nAll URLs on this page are directed to our test API. To use the live API, change the subdomain in the URL from testapi to api and use the corresponding API key.\n Add a website POST https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/sites\nAdd a website to an affiliated merchant account.\nPath parameters    Parameter Description     affiliate_account_id\nstring The affiliated merchant ID.\nFormat: 8 character string, e.g. 12345678. Required.    Request body parameters    Parameter Description     name string Name of the website. Format: Max 120 characters. Required.   notification_url string The webhook endpoint for the website. Format: URL (max 150 characters). Optional.   price_from integer The expected minimum order value for credit card transactions. Format: Unsigned integer. Optional.   price_till integer The expected maximum order value for credit card transactions. Format: Unsigned integer. Optional.   support_email string The website\u0026rsquo;s customer support email address. Format: Email address (max 100 characters). Optional.   support_phone string The customer support phone number for the website. Format: Phone number (max 100 characters). Optional.   URL string The URL of the website. Format: URL (max 150 characters). Required.     Response body parameters The following are in addition to the request body parameters.\n   Parameter Description     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   api_key string The API key for the website. Format: 40 character string, e.g. 4192937dffd72a34bcaef4e4f589beb74188d0fa.   id integer The unique identifier of the website. Format: 5-digit integer, e.g. 12345.     Sample request curl -X POST \u0026quot;https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/sites?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; --header \u0026quot;Content-Type: application/json\u0026quot; \\ --data-raw '{ \u0026quot;name\u0026quot;:\u0026quot;Funcompany\u0026quot;, \u0026quot;notification_url\u0026quot;:\u0026quot;https://funcompany.com/transactionhook\u0026quot;, \u0026quot;price_from\u0026quot;:50, \u0026quot;price_till\u0026quot;:500, \u0026quot;support_email\u0026quot;:\u0026quot;support@funcompany.nl\u0026quot;, \u0026quot;support_phone\u0026quot;:\u0026quot;0123456789\u0026quot;, \u0026quot;url\u0026quot;:\u0026quot;https://funcompany.com\u0026quot; }'   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account_id\u0026quot;: {affiliate_account_id}, \u0026quot;api_key\u0026quot;: \u0026quot;4192937dffd72a34bcaef4e4f589beb74188d0fa\u0026quot;, \u0026quot;id\u0026quot;: 12345, \u0026quot;name\u0026quot;: \u0026quot;Funcompany\u0026quot;, \u0026quot;notification_url\u0026quot;: \u0026quot;https://funcompany.com/transactionhook\u0026quot;, \u0026quot;price_from\u0026quot;: 50, \u0026quot;price_till\u0026quot;: 500, \u0026quot;support_email\u0026quot;: \u0026quot;support@funcompany.nl\u0026quot;, \u0026quot;support_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://funcompany.com\u0026quot; }, \u0026quot;success\u0026quot;: true }    List websites GET https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/sites?api_key={your-account-api-key}\nRetrieve an array of all websites linked to a merchant account.\nPath parameters    Parameter Description     affiliate_account_id\nstring The affiliated merchant ID.\nFormat: 8 character string, e.g. 12345678. Required.    Response body parameters    Parameter Description     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   api_key string The API key for the website. Format: 40 character string, e.g. 4192937dffd72a34bcaef4e4f589beb74188d0fa.   id integer The unique identifier of the website. Referred to as site_id. Format: 5-digit integer, e.g. 12345.   name string The name of the website. Format: Max 120 characters.   notification_url string The webhook endpoint for the website. Format: URL (max 150 characters).   price_from integer The expected minimum order value for credit card transactions. Format: Unsigned integer.   price_till integer The expected maximum order value for credit card transactions. Format: Unsigned integer.   support_email string The website\u0026rsquo;s customer support email address. Format: Email address (max 100 characters).   support_phone string The customer support phone number for the website. Format: Phone number (max 100 characters).   URL string The URL of the website. Format: URL (max 150 characters).     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}/sites?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: [ { \u0026quot;account_id\u0026quot;: {affiliate_account_id}, \u0026quot;api_key\u0026quot;: \u0026quot;4192937dffd72a34bcaef4e4f589beb74188d0fa\u0026quot;, \u0026quot;id\u0026quot;: 12345, \u0026quot;name\u0026quot;: \u0026quot;Funcompany\u0026quot;, \u0026quot;notification_url\u0026quot;: \u0026quot;https://funcompany.com/transactionhook\u0026quot;, \u0026quot;price_from\u0026quot;: 50, \u0026quot;price_till\u0026quot;: 500, \u0026quot;support_email\u0026quot;: \u0026quot;support@funcompany.nl\u0026quot;, \u0026quot;support_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://funcompany.com\u0026quot; } ], \u0026quot;page\u0026quot;: { \u0026quot;total\u0026quot;: 1 }, \u0026quot;success\u0026quot;: true }    Get website GET https://testapi.multisafepay.com/v1/json/sites/{site_id}?api_key={your-account-api-key}\nRetrieve information about a specific website.\nPath parameters    Parameter Description     site_id\ninteger The unique identifier of the website.\nFormat: 5-digit integer, e.g. 12345. Required.\nThe site_id is returned as id in the add a website and list websites requests.    Response body parameters    Parameter Description     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   api_key string The API key for the website. Format: 40 character string, e.g. 4192937dffd72a34bcaef4e4f589beb74188d0fa.   id integer The unique identifier of the website. Referred to as site_id. Format: 5-digit integer, e.g. 12345.   name string Name of the website. Format: Max 120 characters.   notification_url string The webhook endpoint for the website. Format: URL (max 150 characters).   price_from integer The expected minimum order value for credit card transactions. Format: Unsigned integer.   price_till integer The expected maximum order value for credit card transactions. Format: Unsigned integer.   support_email string The website\u0026rsquo;s customer support email address. Format: Email address (max 100 characters).   support_phone string The customer support phone number for the website. Format: Phone number (max 100 characters).   URL string The URL of the website. Format: URL (max 150 characters).     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/accounts/sites/{site_id}?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account_id\u0026quot;: {affiliate_account_id}, \u0026quot;api_key\u0026quot;: \u0026quot;4192937dffd72a34bcaef4e4f589beb74188d0fa\u0026quot;, \u0026quot;id\u0026quot;: {site_id}, \u0026quot;name\u0026quot;: \u0026quot;Funcompany\u0026quot;, \u0026quot;notification_url\u0026quot;: \u0026quot;https://funcompany.com/transactionhook\u0026quot;, \u0026quot;price_from\u0026quot;: 50, \u0026quot;price_till\u0026quot;: 500, \u0026quot;support_email\u0026quot;: \u0026quot;support@funcompany.nl\u0026quot;, \u0026quot;support_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://funcompany.com\u0026quot; }, \u0026quot;success\u0026quot;: true }    Update website PATCH https://testapi.multisafepay.com/v1/json/sites/{site_id}?api_key={your-account-api-key}\nUpdate information about an existing website.\nPath parameters    Parameter Description     site_id\ninteger The unique identifier of the website.\nFormat: 5-digit integer, e.g. 12345. Required.\nThe site_id is returned as id in the add a website and list websites requests.    Request body parameters    Parameter Description     name string The name of the website. Format: Max 120 characters. Optional.   notification_url string The webhook endpoint for the website. Format: URL (max 150 characters). Optional.   price_from integer The expected minimum order value for credit card transactions. Format: Unsigned integer. Optional.   price_till integer The expected maximum order value for credit card transactions. Format: Unsigned integer. Optional.   support_email string The website\u0026rsquo;s customer support email address. Format: Email address (max 100 characters). Optional.   support_phone string The customer support phone number for the website. Format: Phone number (max 100 characters). Optional.   URL string The URL of the website. Format: URL (max 150 characters). Optional.     Response body parameters    Parameter Description     account_id string The affiliated merchant ID. Format: 8 character string, e.g. 12345678.   api_key string The API key for the website. Format: 40 character string, e.g. 4192937dffd72a34bcaef4e4f589beb74188d0fa.   id integer The unique identifier of the website. Referred to as site_id. Format: 5-digit integer, e.g. 12345.   name string The name of the website. Format: max 120 characters.   notification_url string The webhook endpoint for the website. Format: URL (max 150 characters).   price_from integer The expected minimum order value for credit card transactions. Format: Unsigned integer.   price_till integer The expected maximum order value for credit card transactions. Format: Unsigned integer.   support_email string The website\u0026rsquo;s customer support email address. Format: Email address (max 100 characters).   support_phone string The customer support phone number for the website. Format: Phone number (max 100 characters).   URL string The URL of the website. Format: URL (max 150 characters).     Sample request curl -X PATCH \u0026quot;https://testapi.multisafepay.com/v1/json/sites/{site_id}?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ --header \u0026quot;Content-Type: application/json\u0026quot; \\ --data-raw '{ \u0026quot;notification_url\u0026quot;: \u0026quot;https://funcompany.com/newhook\u0026quot; }'   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account_id\u0026quot;: {affiliate_account_id}, \u0026quot;api_key\u0026quot;: \u0026quot;4192937dffd72a34bcaef4e4f589beb74188d0fa\u0026quot;, \u0026quot;id\u0026quot;: {site_id}, \u0026quot;name\u0026quot;: \u0026quot;Funcompany\u0026quot;, \u0026quot;notification_url\u0026quot;: \u0026quot;https://funcompany.com/newhook\u0026quot;, \u0026quot;price_from\u0026quot;: 50, \u0026quot;price_till\u0026quot;: 500, \u0026quot;support_email\u0026quot;: \u0026quot;support@funcompany.nl\u0026quot;, \u0026quot;support_phone\u0026quot;: \u0026quot;0123456789\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://funcompany.com\u0026quot; }, \u0026quot;success\u0026quot;: true }    That\u0026rsquo;s it! You\u0026rsquo;ve successfully created an affiliated merchant account and added the associated bank accounts, UBOs, and websites. Next, we will perform checks on the provided information. Once those checks have passed successfully, the newly created account is ready to process payments.\n Previous\nAdd UBOs\n     Overview\nOnboarding using our API\n    ","tags":null,"title":"Add websites","uri":"https://docs.multisafepay.com/api-onboarding/add-websites/"},{"categories":null,"content":"","tags":null,"title":"Categories","uri":"https://docs.multisafepay.com/categories/"},{"categories":null,"content":"Corporate purchasing cards Unlike regular credit cards, corporate purchasing cards allow for a much more detailed level of information regarding transactions and drastically reduce the need for paper-based purchase orders and invoice processing. Corporate purchasing card transaction statements contain all the information you would expect in an invoice, such as description of the items in an order, quantity, corresponding tax rates, etc.\nMultiSafepay supports integrations with purchasing cards. For more information, email integration@multisafepay.com\n","tags":null,"title":"Corporate purchasing cards","uri":"https://docs.multisafepay.com/payments/methods/credit-and-debit-cards/corporate-purchasing-cards/corporate-purchasing-cards/"},{"categories":null,"content":"Use the following requests to create, retrieve or update affiliated merchant accounts:\n Sign up account: Create a new merchant account. List accounts: Retrieve a list of all merchant accounts. Get account: Retrieve a specific merchant account. Update account: Update a merchant account.  Authentication All of the account requests require a partner account API key. This is not the same as a site API key. For more information, email your partner manager.\nAll URLs on this page are directed to our test API. To use the live API, change the subdomain testapi to api and use the corresponding API key.\n Sign up account POST https://testapi.multisafepay.com/v1/json/signup-account?api_key={your-account-api-key}\nCreate a new affiliated merchant account.\nRequest body parameters    Parameter Description     account object Contains company information.   account.address1 string The first line of the company address. Format: Max 64 characters. Optional.   account.address2\nstring The second line of the company address.\nFormat: Max 64 characters. Optional.   account.address3\nstring The third line of the company address. Format: Max 64 characters. Optional.   account.apartment\nstring The apartment number of the company address.\nFormat: Max 9 characters. Optional.   account.city\nstring The city of the company address.\nFormat: Max 50 characters Optional.   account.coc_number\nstring The company\u0026rsquo;s chamber of commerce number. Format: Max 50 characters. Optional.   account.company_name\nstring The unique company name. Format: Max 200 characters. Required.   account.country\nstring The country code of the company Format: ISO 3166-1 alpha-2, e.g. NL. Required.   account.email\nstring The unique company email address to which transaction updates are sent. Format: Max 100 characters. Required.   account.fax\nstring The company\u0026rsquo;s fax number.\nFormat: Max 15 characters. Optional.   account.phone\nstring The company\u0026rsquo;s phone number.\nFormat: Max 15 characters. Optional.   account.vat_number\nstring The company\u0026rsquo;s VAT number.\nFormat: Max 50 characters. Optional.   account.zipcode\nstring The company\u0026rsquo;s ZIP code.\nFormat: Max 30 characters. Optional.   user\nobject Contains user information.   user.name\nstring The full name of the primary user (can be modified later). Required.   user.email\nstring The primary user\u0026rsquo;s unique email address to which the welcome email containing the secure code is sent. Required.   user.password\nstring The primary user\u0026rsquo;s password. Required.   currencies\narray The list of currencies the company wants to process.\nFormat: Array of strings in ISO-4217 format, e.g. [EUR,USD]. Required.     Response body parameters The following are in addition to the request body parameters.\n   Parameter Description     id\nstring The affiliated merchant ID. Referred to as {account_id}.     Sample request curl -X POST \u0026quot;https://testapi.multisafepay.com/v1/json/signup-account?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ --header \u0026quot;Content-Type: application/json\u0026quot; \\ --data-raw '{ \u0026quot;account\u0026quot;: { \u0026quot;address1\u0026quot;: \u0026quot;Flowerstreet 123\u0026quot;, \u0026quot;address2\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;address3\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;apartment\u0026quot;: \u0026quot;5A\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Amsterdam\u0026quot;, \u0026quot;coc_number\u0026quot;: \u0026quot;123456\u0026quot;, \u0026quot;company_name\u0026quot;: \u0026quot;{affiliate-company-name}\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;{affiliate-email-address}\u0026quot;, \u0026quot;fax\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;phone\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;vat_number\u0026quot;: \u0026quot;NL999999999B99\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;1234 ZP\u0026quot; }, \u0026quot;user\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Ad Admin\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;{affiliate-email-address}\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;password\u0026quot; }, \u0026quot;currencies\u0026quot;: [ \u0026quot;EUR\u0026quot; ] }'   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;account\u0026quot;: { \u0026quot;address1\u0026quot;: \u0026quot;Flowerstreet 123\u0026quot;, \u0026quot;address2\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;address3\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;apartment\u0026quot;: \u0026quot;5A\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Amsterdam\u0026quot;, \u0026quot;coc_number\u0026quot;: \u0026quot;123456\u0026quot;, \u0026quot;company_name\u0026quot;: \u0026quot;{affiliate-company-name}, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;{affiliate-email-address}\u0026quot;, \u0026quot;fax\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;id\u0026quot;: 12345678, \u0026quot;phone\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;vat_number\u0026quot;: \u0026quot;NL999999999B99\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;1234 ZP\u0026quot; }, \u0026quot;user\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Ad Admin\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;{affiliate-email-address}\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;***\u0026quot; }, \u0026quot;currencies\u0026quot;: [ \u0026quot;EUR\u0026quot; ] }, \u0026quot;success\u0026quot;: true }    List accounts GET https://testapi.multisafepay.com/v1/json/accounts?api_key={your-account-api-key}\nRetrieve an array of all affiliated merchant accounts.\nResponse body parameters    Parameter Description     address1 string The first line of the company address. Format: Max 64 characters.   address2\nstring The second line of the company address.\nFormat: Max 64 characters.   address3\nstring The third line of the company address. Format: Max 64 characters.   apartment\nstring The apartment number of the company address.\nFormat: Max 9 characters.   city\nstring The city of the company address.\nFormat: Max 50 characters.   coc_number\nstring The company\u0026rsquo;s chamber of commerce number. Format: Max 50 characters.   company_name\nstring The unique company name. Format: Max 200 characters.   country\nstring The country code of the company Format: ISO 3166-1 alpha-2, e.g. NL.   email\nstring The unique company email address to which transaction updates are sent. Format: Max 100 characters.   fax\nstring The company\u0026rsquo;s fax number.\nFormat: Max 15 characters.   id string The affiliated merchant ID. Referred to as {account_id}.   phone\nstring The company\u0026rsquo;s phone number.\nFormat: Max 15 characters.   vat_number\nstring The company\u0026rsquo;s VAT number.\nFormat: Max 50 characters.   zipcode\nstring The company\u0026rsquo;s ZIP code.\nFormat: Max 30 characters.     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/accounts?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ \n Sample response { \u0026quot;data\u0026quot;: [ { \u0026quot;address1\u0026quot;: \u0026quot;Flowerstreet 123\u0026quot;, \u0026quot;address2\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;address3\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;apartment\u0026quot;: \u0026quot;5A\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Funtown\u0026quot;, \u0026quot;coc_number\u0026quot;: \u0026quot;123456\u0026quot;, \u0026quot;company_name\u0026quot;: \u0026quot;{affiliate-company-name}\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;{affiliate-email-address}\u0026quot;, \u0026quot;fax\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;12345678\u0026quot;, \u0026quot;phone\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;vat_number\u0026quot;: \u0026quot;NL999999999B99\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;1234 ZP\u0026quot; } ], \u0026quot;success\u0026quot;: true }    Get account GET https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}?api_key={your-account-api-key}\nRetrieve the account details of a specific affiliated merchant account.\nPath parameters    Parameter Description     account_id\nstring The affiliated merchant ID.\nFormat: 8 character string, e.g. 12345678. Required.    Response body parameters    Parameter Description     address1 string The first line of the company address. Format: Max 64 characters.   address2\nstring The second line of the company address.\nFormat: Max 64 characters.   address3\nstring The third line of the company address. Format: Max 64 characters.   apartment\nstring The apartment number of the company address.\nFormat: Max 9 characters.   city\nstring The city of the company address.\nFormat: Max 50 characters.   coc_number\nstring The company\u0026rsquo;s chamber of commerce number. Format: Max 50 characters.   company_name\nstring The unique company name. Format: Max 200 characters.   country\nstring The country code of the company Format: ISO 3166-1 alpha-2, e.g. NL.   email\nstring The unique company email address to which transaction updates are sent. Format: Max 100 characters.   fax\nstring The company\u0026rsquo;s fax number.\nFormat: Max 15 characters.   id string The affiliated merchant ID. Referred to as {account_id}.   phone\nstring The company\u0026rsquo;s phone number.\nFormat: Max 15 characters.   vat_number\nstring The company\u0026rsquo;s VAT number.\nFormat: Max 50 characters.   zipcode\nstring The company\u0026rsquo;s ZIP code.\nFormat: Max 30 characters.     Sample request curl -X GET \u0026quot;https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ \n Sample response { \u0026quot;data\u0026quot;: { \u0026quot;address1\u0026quot;: \u0026quot;Flowerstreet 123\u0026quot;, \u0026quot;address2\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;address3\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;apartment\u0026quot;: \u0026quot;5A\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Funtown\u0026quot;, \u0026quot;coc_number\u0026quot;: \u0026quot;123456\u0026quot;, \u0026quot;company_name\u0026quot;: \u0026quot;{affiliate-company-name}\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;{affiliate-email-address}\u0026quot;, \u0026quot;fax\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;12345678\u0026quot;, \u0026quot;phone\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;vat_number\u0026quot;: \u0026quot;NL999999999B99\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;1234 ZP\u0026quot; }, \u0026quot;success\u0026quot;: true }    Update account PATCH https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}?api_key={your-account-api-key}\nUpdate the account details of an affiliated merchant account.\nPath parameters    Parameter Description     account_id\nstring The affiliated merchant ID.\nFormat: 8 character string (e.g., 12345678). Required.    Request body parameters    Parameter Description     address1 string The first line of the company address. Format: Max 64 characters. Optional.   address2\nstring The second line of the company address.\nFormat: Max 64 characters. Optional.   address3\nstring The third line of the company address. Format: Max 64 characters. Optional.   apartment\nstring The apartment number of the company address.\nFormat: Max 9 characters. Optional.   city\nstring The city of the company address.\nFormat: Max 50 characters. Optional.   coc_number\nstring The company\u0026rsquo;s chamber of commerce number. Format: Max 50 characters. Optional.   company_name\nstring The unique company name. Format: Max 200 characters. Optional.   country\nstring The country code of the company Format: ISO 3166-1 alpha-2, e.g. NL. Optional.   email\nstring The unique company email address to which transaction updates are sent. Format: Max 100 characters. Optional.   fax\nstring The company\u0026rsquo;s fax number.\nFormat: Max 15 characters. Optional.   phone\nstring The company\u0026rsquo;s phone number.\nFormat: Max 15 characters. Optional.   vat_number\nstring The company\u0026rsquo;s VAT number.\nFormat: Max 50 characters. Optional.   zipcode\nstring The company\u0026rsquo;s ZIP code.\nFormat: Max 30 characters. Optional.     Response body parameters    Parameter Description     address1 string The first line of the company address. Format: Max 64 characters.   address2\nstring The second line of the company address.\nFormat: Max 64 characters.   address3\nstring The third line of the company address. Format: Max 64 characters.   apartment\nstring The apartment number of the company address.\nFormat: Max 9 characters.   city\nstring The city of the company address.\nFormat: Max 50 characters.   coc_number\nstring The company\u0026rsquo;s chamber of commerce number. Format: Max 50 characters.   company_name\nstring The unique company name. Format: Max 200 characters.   country\nstring The country code of the company Format: ISO 3166-1 alpha-2, e.g. NL.   email\nstring The unique company email address to which transaction updates are sent. Format: Max 100 characters.   fax\nstring The company\u0026rsquo;s fax number.\nFormat: Max 15 characters.   id string The affiliated merchant ID. Referred to as {account_id}.   phone\nstring The company\u0026rsquo;s phone number.\nFormat: Max 15 characters.   vat_number\nstring The company\u0026rsquo;s VAT number.\nFormat: Max 50 characters.   zipcode\nstring The company\u0026rsquo;s ZIP code.\nFormat: Max 30 characters.     Sample request curl -X PATCH \u0026quot;https://testapi.multisafepay.com/v1/json/accounts/{affiliate_account_id}?api_key={your-account-api-key}\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ --header \u0026quot;Content-Type: application/json\u0026quot; \\ --data-raw '{ \u0026quot;email\u0026quot; :\u0026quot;newemail@funcompany.com\u0026quot;, \u0026quot;zipcode\u0026quot; :\u0026quot;5678 NW\u0026quot; }'   Sample response { \u0026quot;data\u0026quot;: { \u0026quot;address1\u0026quot;: \u0026quot;Flowerstreet 123\u0026quot;, \u0026quot;address2\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;address3\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;apartment\u0026quot;: \u0026quot;5A\u0026quot;, \u0026quot;city\u0026quot;: \u0026quot;Funtown\u0026quot;, \u0026quot;coc_number\u0026quot;: \u0026quot;123456\u0026quot;, \u0026quot;company_name\u0026quot;: \u0026quot;{affiliate-company-name}\u0026quot;, \u0026quot;country\u0026quot;: \u0026quot;NL\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;newemail@funcompany.com\u0026quot;, \u0026quot;fax\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;12345678\u0026quot;, \u0026quot;phone\u0026quot;: \u0026quot;00311234567890\u0026quot;, \u0026quot;vat_number\u0026quot;: \u0026quot;NL999999999B99\u0026quot;, \u0026quot;zipcode\u0026quot;: \u0026quot;5678 NW\u0026quot; }, \u0026quot;success\u0026quot;: true }    Next steps You have successfully created a merchant account. Now, you can add bank accounts, UBOs, and websites, using the affiliated merchant account ID.\n Overview\nRead introduction\n  Next\nAdd bank accounts      ","tags":null,"title":"Create a merchant account","uri":"https://docs.multisafepay.com/api-onboarding/create-account/"},{"categories":null,"content":"As an integrator, you only need to provide a valid MSP transaction identifier or create a transaction. The FastCheckout SDK leverages the checkout process for you, providing notifications for all possible outcomes (success, pending, cancelled, etc.) once it completes a transaction. The checkout process flow includes:\n Shipping details:  Preferred shipping details Add shipping details   Payment methods:  Preferred payment methods Add payment methods Gift cards   Confirmation details  Features The FastCheckout SDK provides the following additional features:\n Secure sign up and sign in functionality Open seamless support tickets to related orders List and edit users' stored payment details List, add, and edit shipping information  For more information, see the documentation in the SDK, which contains all classes, methods, and troubleshooting.\nTo learn more about creating, updating and retrieving orders, see the API reference.\nAdvanced setup The SDK operates in two environments: live (default) and test (no real transactions processed). We recommend testing your integration before releasing your app.\nFor how to set up each environment, see the example below.\nRequirements  Android Studio version 3 or higher Android version 4.4 or higher Java or Kotlin  Installation   Copy your site API key to get the SDK from our GitHub repository.\n  Add the msp-android-sdk-release.aar as an embedded framework into your project.\n  Add the msp-android-sdk-release.aar into your library’s /lib folder.\n  In your build.gradle (Module.app) in the dependencies script, add the following:\nimplementation(name: \u0026#39;msp-android-sdk-release\u0026#39;, ext: \u0026#39;aar\u0026#39;) repositories { flatDir { dirs \u0026#39;libs\u0026#39; } }   Sync Gradle.\n  You can now start using the Android SDK in your app.\nDemo To integrate the Fastcheckout Android SDK into your app, follow these steps:\n To set up the Android SDK, add the following to your MainActivity or Class:  import com.multisafepay.sdk.FastCheckoutSDK; //declare the FastCheckoutSDK as a member variable: private static FastCheckoutSDK SDK = FastCheckoutSDK.getInstance(); //you must implement this interface and then set the listener: Public class MainActivity extends AppCompatActivity implements ISDKCommunicator.sdkStatus { //in your onCreate method initialize the SDK: SDK.setApiKey(API_KEY); … … } The SDK is thread safe, but you cannot access the main UI elements from background threads. Creating and accessing UI controls from background thread is not thread safe.\n** Updating the UI from a background thread in Android** (Note: Check Android developers’ official site on Threads (https://developer.android.com/guide/components/processes-and-threads) for proper integration based on JAVA/Android versioning).\n… … YourActivity.this.runOnUiThread(new Runnable() { public void run() { //UI update here...  } }); … … To change the running environment from LIVE to TEST, add the following line of code after SDK.setApiKey(API_KEY):\n… … SDK.setApiKey(API_KEY); //changing the environment to TEST SDK.setEnvironment(FastCheckoutSDK.ENV_TEST) … … Remember to comment out or delete this line of code before you release your app.\n… … //setting the environemnt to the default value (LIVE) //SDK.setEnvironment(FastCheckoutSDK.ENV_TEST) … … Custom settings:\n… … //to set anonymous checkout: true (enabled) / false (dissable) //with anonymous checkout there is no login SDK.setAnonymous(boolean); //skip checkout initial view (list of items): true (enabled) / false (dissable) SDK.skipCheckoutInit(boolean); … … Start checkout and add callback interface to your Activity:  //your class should implement the FastCheckoutSDK.Callback interface FastCheckoutSDK.Callback //add registration to your onCreate method: sdk.registerCallback(this); //then, start your checkout: sdk.startCheckout(transaction_id, this); //get results in your callback method: @Override public void callback(FastCheckoutSDK.Result result) { if (result.getResult() == FastCheckoutSDK.Result.FCO_RESULT_UNCLEARED) { } if (result.getResult() == FastCheckoutSDK.Result.FCO_RESULT_OK) { } if (result.getResult() == FastCheckoutSDK.Result.FCO_RESULT_CANCELLED) { } } Set up styles in your Application class (can be changed to suit your theme):  Fonts The fonts used in this demo are not part of the code provided, but are part of your application.\n Download the fonts you want to use. Put them in SRC folder \u0026gt; Main folder (created for you by Android Studio when you create a project) \u0026gt; Assets folder (if you don\u0026rsquo;t have an assets folder already, create one). Add the fonts as Typeface to your code as shown in the demo.  Styles.Builder builder = new Styles.Builder(); builder.set(\u0026#34;mainColor\u0026#34;, \u0026#34;#FF7E03\u0026#34;); builder.set(\u0026#34;mainFontSize\u0026#34;, 30); { Typeface typeface = Typeface.createFromAsset(this.getAssets(), \u0026#34;fonts/nunito/Nunito-Medium.ttf\u0026#34;); Styles.Font font = new Styles.Font(\u0026#34;#000000\u0026#34;, typeface, null); builder.setObject(\u0026#34;labelFont\u0026#34;, font); } { Typeface typeface = Typeface.createFromAsset(this.getAssets(), \u0026#34;fonts/nunito/Nunito-Medium.ttf\u0026#34;); Styles.Font font = new Styles.Font(\u0026#34;#FFFFFF\u0026#34;, typeface, null); builder.setObject(\u0026#34;buttonFont\u0026#34;, font); } { Typeface typeface = Typeface.createFromAsset(this.getAssets(), \u0026#34;fonts/nunito/Nunito-ExtraLight.ttf\u0026#34;); Styles.Font font = new Styles.Font(\u0026#34;#000000\u0026#34;, typeface, null); builder.setObject(\u0026#34;editFont\u0026#34;, font); } { Typeface typeface = Typeface.createFromAsset(this.getAssets(), \u0026#34;fonts/galada_regular.ttf\u0026#34;); Styles.Font font = new Styles.Font(\u0026#34;#000000\u0026#34;, typeface, null); builder.setObject(\u0026#34;titleFont\u0026#34;, font); builder.set(\u0026#34;title\u0026#34;, \u0026#34;qwindo\u0026#34;); } Styles styles = builder.build(); FastCheckoutSDK sdk = FastCheckoutSDK.getInstance(); sdk.setStyles(styles); Complete example import com.multisafepay.sdk.FastCheckoutSDK; public class MainActivity extends AppCompatActivity implements FastCheckoutSDK.Callback{ private static FastCheckoutSDK SDK; private Button btnStartNewTransaction; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); btnStartNewTransaction = findViewById(R.id.btn_transaction); SDK = FastCheckoutSDK.getInstance(); SDK.setAnonymous(false); SDK.skipCheckoutInit(false); SDK.setApiKey(API_KEY); btnLogOut.setOnClickListener(view \u0026gt; SDK.startCheckout(transaction_id, this)); } @Override public void callback(FastCheckoutSDK.Result result) { if (result.getResult() == FastCheckoutSDK.Result.FCO_RESULT_UNCLEARED) { } if (result.getResult() == FastCheckoutSDK.Result.FCO_RESULT_OK) { } if (result.getResult() == FastCheckoutSDK.Result.FCO_RESULT_CANCELLED) { } } } import com.multisafepay.sdk.FastCheckoutSDK; public class YourApplicationClassName extends Application { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); Styles.Builder builder = new Styles.Builder(); builder.set(\u0026#34;mainColor\u0026#34;, \u0026#34;#FF7E03\u0026#34;); builder.set(\u0026#34;mainFontSize\u0026#34;, 30); { Typeface typeface = Typeface.createFromAsset(this.getAssets(), \u0026#34;fonts/nunito/Nunito-Medium.ttf\u0026#34;); Styles.Font font = new Styles.Font(\u0026#34;#000000\u0026#34;, typeface, null); builder.setObject(\u0026#34;labelFont\u0026#34;, font); } { Typeface typeface = Typeface.createFromAsset(this.getAssets(), \u0026#34;fonts/nunito/Nunito-Medium.ttf\u0026#34;); Styles.Font font = new Styles.Font(\u0026#34;#FFFFFF\u0026#34;, typeface, null); builder.setObject(\u0026#34;buttonFont\u0026#34;, font); } { Typeface typeface = Typeface.createFromAsset(this.getAssets(), \u0026#34;fonts/nunito/Nunito-ExtraLight.ttf\u0026#34;); Styles.Font font = new Styles.Font(\u0026#34;#000000\u0026#34;, typeface, null); builder.setObject(\u0026#34;editFont\u0026#34;, font); } { Typeface typeface = Typeface.createFromAsset(this.getAssets(), \u0026#34;fonts/galada_regular.ttf\u0026#34;); Styles.Font font = new Styles.Font(\u0026#34;#000000\u0026#34;, typeface, null); builder.setObject(\u0026#34;titleFont\u0026#34;, font); builder.set(\u0026#34;title\u0026#34;, \u0026#34;qwindo\u0026#34;); } Styles styles = builder.build(); FastCheckoutSDK sdk = FastCheckoutSDK.getInstance(); sdk.setStyles(styles); } } SDK snapshots  The following snapshots walk you through some of the features offered by the Fastcheckout Android/iOS SDK.   Logging in with a registered email:\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   Logging in with an unregistered email automatically takes the customer to the Register screen:\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   If the customer is registered and resets their email account, the SDK automatically sends a new security code to the new email provided:\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   Once the customer enters the security code received by email (if the security code is received via SMS it is automatically added to the appropriate field, and the SDK moves into the following state) the SDK asks for a new security PIN. Having entered the PIN, the SDK provides biometric options (iOS also supports face recognition):\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   The checkout process follows. From the webshop checkout, the SDK enters into the checkout process. The first screen is the Delivery screen, with shipping options (if available). When the customer clicks Continue, the SDK moves to the Payment screen and the payment logic follows.\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   Once the payment process is completed, the SDK proceeds to the Transaction complete screen. The SDK callback notifies the client app of the transaction status, e.g. Uncleared, Cancelled. Clicking Back to shop redirect the customer back to the webshop.\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t     ","tags":null,"title":"FastCheckout Android SDK manual","uri":"https://docs.multisafepay.com/developer/wrappers/fastcheckout-android/manual/"},{"categories":null,"content":"Introduction As an integrator, you only need to provide a valid MSP transaction identifier or create a transaction. The FastCheckout SDK leverages the checkout process for you, providing notifications for all possible outcomes (success, pending, cancelled, etc.) once it completes a transaction. The checkout process flow includes:\n Shipping details:  Preferred shipping details Add shipping details   Payment methods:  Preferred payment methods Add payment methods Gift cards   Confirmation details  Features The FastCheckout SDK provides the following additional features:\n Secure sign up and sign in functionality Open seamless support tickets to related orders List and edit users' stored payment details List, add, and edit shipping information  For more information, see the documentation in the SDK, which contains all classes, methods, and troubleshooting.\nTo learn more about creating, updating and retrieving orders, see the API reference.\nRequirements  Xcode 12.0 and iOS 15 SDK iOS 9+ target Swift 5.3 or Objective-C  Installation  Copy your site API key to get the SDK from our GitHub repository. Add the FastCheckoutKit.xcframework as an embedded framework into your project. In Finder, open the folder where you downloaded FastCheckoutKit.framework to, and then drag it into the Project Navigator of your application’s Xcode project. If you haven\u0026rsquo;t already copied the framework into your project folder, click Copy items. In the Project navigator (blue project icon), select your application project to navigate to target configuration window, and then under Targets in the sidebar, select the application target. In the tab bar at the top of that window, open the General panel. Under Embedded binaries,click +. Select FastCheckoutKit.xcframework.  You can now start using the FastCheckoutKit SDK in your app.\nDemo To integrate the FastCheckout iOS SDK into your app, follow these steps:\n Set up the iOS SDK:  import FastcheckoutKit let manager = FastcheckoutManager(client: FastcheckoutClient(apiKey: \u0026#34;API_KEY\u0026#34;)) Start checkout with completion callback:  manager.startCheckout(transactionId: \u0026#34;ID\u0026#34;, host: self, onCompletion: { status, error in if let status = status { print(status) } else { print(error?.localizedDescription) } }) And that’s it! Now you can start a checkout and retrieve the transaction status once it completes.\nComplete example import UIKit import FastcheckoutKit class ViewController: UIViewController { private let manager = FastcheckoutManager(client: FastcheckoutClient(apiKey: \u0026#34;API_KEY\u0026#34;)) override func viewDidLoad() { super.viewDidLoad() // Add a button to the navigationBar let startButton = UIBarButtonItem(title: \u0026#34;Start\u0026#34;, style: .done, target: self, action: #selector(self.startCheckout)) navigationItem.rightBarButtonItem = startButton } // MARK:Actions @objc func startCheckout() { manager.startCheckout(transactionId: \u0026#34;id\u0026#34;, host: self, onCompletion: { status, error in if let status = status { print(status) switch status.state { case .cancelled: break case .completed: break case .declined: break case .pending: break case .uncleared: break @unknown default: break } } else { print(error?.localizedDescription) } }) } } Advanced setup The SDK operates in two environments: LIVE (default) and TEST (no real transactions processed). We recommend testing your integration before release. Check out the example below to see how you can select which environment to use.\nTo customize the SDK, you need to inject properties into it.\n// Build `Settings` object to customize FCO SDK let settings = Settings.build() settings.environmentKey = FastcheckoutTestEnvironment settings.debug = true settings.biometricAuthenticationEnabled = true settings.skipShowCartAtBeginning = true settings.pinning = false let client = FastcheckoutClient(apiKey: apiKey, settings: settings) self.manager = FastcheckoutManager(client: client) SDK snapshots  The following snapshots walk you through some of features offered by the FastCheckout iOS SDK.   Logging in with a registered email:\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   Logging in with an unregistered email automatically takes the customer to the Register screen:\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   If the customer is registered and resets their email account, the SDK automatically sends a new security code to new email provided:\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   Once the customer enters the security code received by email (if the security code is received via SMS it is automatically added to the appropriate field, and the SDK moves to the following state), the SDK asks for a new security PIN. Having entered the PIN, the SDK provides biometric options, including face recognition:\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   The checkout process follows. From the webshop checkout, the SDK enters into the checkout process. The first screen is the Delivery screen, with shipping options (if available). When the customer clicks Continue, the SDK moves to the Payment screen and the payment logic follows.\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t  function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t   Once payment is completed, the SDK proceeds to the Transaction complete screen. The SDK callback notifies the client app of the transaction status, e.g. Uncleared, Cancelled. When the customer clicks Back to shop, they are redirected back to the webshop.\n function selectImgZoom(item) { if($(window).width() 640) { if($(item).hasClass('selected')){ $(item).toggleClass('selected'); } else{ $('.img-zoomable').removeClass('selected'); $(item).addClass('selected') } } $(window).scroll(function(){ $('.img-zoomable').removeClass('selected'); }); }\t     ","tags":null,"title":"FastCheckout iOS SDK manual","uri":"https://docs.multisafepay.com/developer/wrappers/fastcheckout-ios/manual/"},{"categories":null,"content":"","tags":null,"title":"hidden","uri":"https://docs.multisafepay.com/tags/hidden/"},{"categories":null,"content":"Step 1: Add the elements Add the following elements to your checkout page:\n1. Add the component\u0026rsquo;s CSS to the \u0026lt;head\u0026gt; of your checkout page:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://testpay.multisafepay.com/sdk/components/v2/components.css\u0026quot;\u0026gt; 2. Add the component\u0026rsquo;s script to the bottom of the \u0026lt;body\u0026gt; of your checkout page:\n\u0026lt;script src=\u0026quot;https://testpay.multisafepay.com/sdk/components/v2/components.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; 3. Add the DOM element for the component\u0026rsquo;s UI in the \u0026lt;body\u0026gt; of your checkout page:\n\u0026lt;div id=\u0026quot;MultiSafepayPayment\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; Next steps  Step 2: Initialize the component Step 3: Create an order Step 4: Go live   Back\nPayment Components\n  Next\nStep 2: Initialize the component\n     ","tags":null,"title":"Integrating a single payment method","uri":"https://docs.multisafepay.com/payment-components/single/"},{"categories":null,"content":"Step 2: Initialize the component Generate an API token Payment Components require a MultiSafepay API token. See API reference – Generate an API token.\n Note: To keep your API key private, request the token from your own server.   Construct the component object 1. Initialize an orderData object, containing information about the customer\u0026rsquo;s order collected during the checkout process:\nconst orderData = { currency: 'EUR', amount: 10000, customer: { locale: 'en', country: 'NL', reference: 'Customer123' }, template : { settings: { embed_mode: true } } };   View properties      Key Value     currency The currency of the order. Format: ISO-4217, e.g. EUR. Required.   amount The value of the order. Format: Number without decimal points, e.g. 100 euro is formatted as 10000. Required.   customer.country The customer\u0026rsquo;s country code. Checks the availability of the payment method. Format: ISO-3166-1 alpha-2, e.g. NL. Optional.   customer.locale The customer\u0026rsquo;s language. Sets the language of the payment component UI. Format: ISO-3166-1 alpha-2, e.g. NL. Supported languages: EN, ES, FR, IT, NL. Optional.   customer.reference Your unique customer reference. Required for recurring payments.   recurring.model The tokenization model. Required for recurring payments.   template.settings.embed_mode A template designed to blend in seamlessly with your ecommerce platform. Format: Boolean. Optional.        Processing recurring payments   Recurring Payments is a feature that lets you store a customer’s payment details as a secure, encrypted token.\nFor subsequent payments, customers can select their stored payment details and pay with a single click.\nTo process recurring payments in your payment component:\n Add the cardOnFile recurring model Provide the relevant customer.reference  const orderData = { currency: 'EUR', amount: 10000, customer: { locale: 'en', country: 'NL', reference: 'Customer123' }, recurring: { model: 'cardOnFile' } }; Recurring Payments are supported for all credit card payments.\nNote: For test credit card details, see Test payment details – Credit and debit cards.\nTo use recurring payments in your payment component, you need to enable recurring payments for your account. If you haven\u0026rsquo;t already, email sales@multisafepay.com\n  Note: We use the orderData object to ensure the payment method is enabled and the currency, country, and transaction amount are supported.\n2. Construct a PaymentComponent object in the test environment using the orderData object and your API token:\nPaymentComponent = new MultiSafepay({ env: 'test', apiToken: apiToken, order: orderData }); Initialize the component 1. Call the PaymentComponent.init() method with the following arguments:\nPaymentComponent.init('payment', { container: '#MultiSafepayPayment', gateway: '\u0026lt;GATEWAY\u0026gt;', onLoad: state =\u0026gt; { console.log('onLoad', state); }, onError: state =\u0026gt; { console.log('onError', state); } }); 2. Replace the \u0026lt;GATEWAY\u0026gt; placeholder with the relevant payment gateway identifier.   View gateway IDs      Payment method Gateway ID     Bank Transfer BANKTRANS   Bancontact MISTERCASH   Credit cards CREDITCARD   iDEAL IDEAL   PayPal PAYPAL   SEPA Direct Debit DIRDEB   Sofort DIRECTBANK      3. Create event handlers for the following events:\n  View events      Event Event handler     onError Called when an error occurs in the payment component   onLoad Called when the payment component UI is rendered   onSelect Occurs when the customer selects an issuer with iDEAL.   onSubmit Occurs when the customer clicks the payment button (when using the button generated by the component).   onValidation Occurs when form validation changes. Can be used to disable the payment button until all fields are validated.      Note: The PaymentComponent uses the following methods:\n  View methods      Method Description     getErrors Returns error details, e.g. error messages or codes   hasErrors Returns a boolean value depending on whether errors have been registered   getPaymentData Returns a payment_data object with a payload containing the customer\u0026rsquo;s payment details, used to create orders, and the gateway.   getOrderData Returns an object containing a payment_data object and the full order configuration.       Back\nStep 1: Add the elements\n  Next\nStep 3: Create an order\n     ","tags":null,"title":"Integrating a single payment method","uri":"https://docs.multisafepay.com/payment-components/single/step-2/"},{"categories":null,"content":"Step 3: Create an order Collect payment data 1. To collect the customer\u0026rsquo;s payment details from the payment component UI, call the PaymentComponent.getPaymentData() method:\nPaymentComponent.getPaymentData() 2. Pass the payment_data to your server.\nCreate an order Create an order from your server, appending the payment_data collected from the payment component UI to the order data.\nSee API reference – Create order \u0026gt; Payment component.\nRedirect the customer 1. From your server, pass the response to the create order request to the customer\u0026rsquo;s device.\n2. Check that response.success is true.\n3. Handle the response:\n  Bank Transfer payments   In the gateway_info object, you receive the bank account details for the customer to wire the funds to.\nRender the account details in the interface for the customer with clear instructions. (MultiSafepay also emails these details to the customer.)\nExample gateway_info object\n{ \u0026quot;gateway_info\u0026quot;:{ \u0026quot;mtpinfo\u0026quot;:\u0026quot;NL25DEUT7351811717\u0026quot;, \u0026quot;reference\u0026quot;:\u0026quot;9202124254788300\u0026quot;, \u0026quot;issuer_name\u0026quot;:\u0026quot;Sofortbank\u0026quot;, \u0026quot;destination_account_id\u0026quot;:\u0026quot;003001380000\u0026quot;, \u0026quot;destination_holder_name\u0026quot;:\u0026quot;MultiSafepay\u0026quot;, \u0026quot;destination_holder_city\u0026quot;:\u0026quot;Zurich\u0026quot;, \u0026quot;destination_holder_country\u0026quot;:\u0026quot;CH\u0026quot;, \u0026quot;destination_holder_iban\u0026quot;:\u0026quot;NL25DEUT7351811717\u0026quot;, \u0026quot;destination_holder_swift\u0026quot;:\u0026quot;DEUTCHZZ\u0026quot;, \u0026quot;account_holder_name\u0026quot;:\u0026quot;testperson-nl approved\u0026quot;, \u0026quot;account_holder_city\u0026quot;:\u0026quot;gravenhage\u0026quot;, \u0026quot;account_holder_coutry\u0026quot;:\u0026quot;NL\u0026quot; } }      Other payment methods   Call the PaymentComponent.init() method using the following arguments:\nPaymentComponent.init('redirection', { order: response.data }); If 3D Secure verification is:\n Required, the customer is first directed to 3D Secure. If successful, the customer is then redirected to the redirect_url. Not required, the customer is redirected to the redirect_url.     Back\nStep 2: Initialize the component\n  Next\nStep 4: Go live\n     ","tags":null,"title":"Integrating a single payment method","uri":"https://docs.multisafepay.com/payment-components/single/step-3/"},{"categories":null,"content":"Step 4: Go live To test the payment method, use our Test payment details.\nWhen you\u0026rsquo;re ready to process real payments, make the following changes:\n1. In Step 1: Add the elements, replace test JavaScript library with the live JavaScript library:\n\u0026lt;script src=\u0026quot;https://pay.multisafepay.com/sdk/components/v2/components.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; Next, replace the test CSS file with the live CSS file:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://pay.multisafepay.com/sdk/components/v2/components.css\u0026quot;\u0026gt; 2. In Step 2: Construct the component object, change the environment from test to live:\nPaymentComponent = new MultiSafepay({ env: 'live', apiToken: apiToken, order: orderData }); 3. In Step 3: Create an order, change the test endpoint to the live endpoint:\nhttps://api.multisafepay.com/v1/json/orders\n Back\nStep 3: Create an order\n  Next\nCustomizing Payment Components\n     ","tags":null,"title":"Integrating a single payment method","uri":"https://docs.multisafepay.com/payment-components/single/step-4/"},{"categories":null,"content":"Step 1: Add the elements 1. Add the component\u0026rsquo;s CSS to the \u0026lt;head\u0026gt; of your checkout page:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://testpay.multisafepay.com/sdk/components/v2/components.css\u0026quot;\u0026gt; 2. Add the component\u0026rsquo;s script to the bottom of the \u0026lt;body\u0026gt; of your checkout page:\n\u0026lt;script src=\u0026quot;https://testpay.multisafepay.com/sdk/components/v2/components.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; 3. Add the DOM element for the component\u0026rsquo;s UI in the \u0026lt;body\u0026gt; of your checkout page:\n\u0026lt;div id=\u0026quot;MultiSafepayPayment\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; Choose your payment button Decide if you want to:\n Generate a button with the component (see Step 2). Recommended. Use an existing button, e.g. if your checkout already includes one. Create your own button:  \u0026lt;button id=\u0026quot;payment-button\u0026quot;\u0026gt;\u0026lt;/button\u0026gt; Next steps  Step 2: Initialize the component Step 3: Create an order Step 4: Go live   Back\nPayment Components\n  Next\nStep 2: Initialize the component\n     ","tags":null,"title":"Integrating multiple payment components","uri":"https://docs.multisafepay.com/payment-components/multiple/"},{"categories":null,"content":"Step 2: Initialize the component Generate an API token Payment Components require a MultiSafepay API token. See API reference – Generate an API token.\n Note: To keep your API key private, request the token from your own server.   Construct the component object 1. Initialize an orderData object containing information about the customer\u0026rsquo;s order collected during the checkout process:\nconst orderData = { currency: 'EUR', amount: 10000, customer: { locale: 'en', country: 'NL', reference: 'Customer123' }, payment_options: { settings: { connect: { group_cards: true } } }, template : { settings: { embed_mode: true } } };   View properties      Key Value     currency The currency of the order. Format: ISO-4217, e.g. EUR. Required.   amount The value of the order. Format: Number without decimal points, e.g. 100 euro is formatted as 10000. Required.   customer.country The customer\u0026rsquo;s country code. Used to validate the availability of the payment method. Format: ISO-3166-1 alpha-2, e.g. NL. Optional.   customer.locale The customer\u0026rsquo;s language. Sets the language of the payment component UI. Format: ISO-3166-1 alpha-2, e.g. NL. Supported languages: EN, ES, FR, IT, NL. Optional.   customer.reference Your unique customer reference. Required for recurring payments.   recurring.model The recurring model. Required for recurring payments.   template.settings.embed_mode A template designed to blend in seamlessly with your ecommerce platform. Format: Boolean. Optional.   payment_options.settings.connect.group_cards Groups all credit card payment methods as a single option in the list of payment methods. Format: Boolean. Optional. Default: false.        Processing recurring payments   Recurring Payments is a feature that lets you store a customer’s payment details as a secure, encrypted token.\nUpon subsequent payments, customers can select their stored payment details and pay with a single click.\nTo process recurring payments in your payment component:\n Add the cardOnFile recurring model Provide the relevant customer.reference  const orderData = { currency: 'EUR', amount: 10000, customer: { locale: 'en', country: 'NL', reference: 'Customer123' }, recurring: { model: 'cardOnFile' } }; Recurring Payments are supported for all credit card payments.\nNote: For test credit card details, see Test payment details – Credit and debit cards.\nTo use recurring payments in your payment component, you need to enable recurring payments for your account. If you haven\u0026rsquo;t already, email sales@multisafepay.com\n  Note: We use the orderData object to ensure the payment methods are enabled, e.g. for the currency, country, and transaction value.\n2. Construct a PaymentComponent object in the test environment using the orderData object and your API token:\nPaymentComponent = new MultiSafepay({ env: 'test', apiToken: apiToken, order: orderData }); Initialize the component Initialize the component using:\n  Payment component button   PaymentComponent.init('dropin', { container : '#MultiSafepayPayment', onSelect : state =\u0026gt; { console.log('onSelect', state); }, onError : state =\u0026gt; { console.log('onError', state); }, onLoad : state =\u0026gt; { console.log('onLoad', state); }, onSubmit : state =\u0026gt; { if(PaymentComponent.hasErrors()) { let errors = PaymentComponent.getErrors(); console.log(errors); return; } // Send state.paymentData to your server (createOrder) // Create an order from your server // Return the response from your server to the client-side // With the response, redirect the customer or log an error createOrder(PaymentComponent.getPaymentData()).then(response =\u0026gt; { console.log(response); if(response.success) { PaymentComponent.init('redirection', { order: response.data }); } }); } });      Own or existing button   PaymentComponent.init('dropin', { container : '#MultiSafepayPayment', onSelect : state =\u0026gt; { console.log('onSelect', state); }, onError : state =\u0026gt; { console.log('onError', state); }, onLoad : state =\u0026gt; { console.log('onLoad', state); } });    In the method call, create event handlers for the following events:   Events      Event Event handler     onLoad Occurs when the payment component UI is rendered.   onError Occurs when an error occurs in the payment component.   onSelect Occurs when the customer selects an issuer with iDEAL.   onSubmit Occurs when the customer clicks the payment button (when using the button generated by the component).   onValidation Occurs when form validation changes. Can be used to disable the payment button until all fields are validated.      The PaymentComponent has the following methods:\n  View methods      Method Description     getErrors Returns error messages or codes   hasErrors Returns a boolean value about whether errors were registered   getPaymentData Returns a payment_data object with a payload containing the customer\u0026rsquo;s payment details, used to create orders, and the gateway.   getOrderData Returns an object containing a payment_data object and the full order configuration.       Back\nStep 1: Add the elements\n  Next\nStep 3: Create an order\n     ","tags":null,"title":"Integrating multiple payment components","uri":"https://docs.multisafepay.com/payment-components/multiple/step-2/"},{"categories":null,"content":"Step 3: Create an order Handle the interaction  Note: This step only applies if using your own or an existing payment button.   1. Assign the button element to a variable:\nconst paymentButton = document.querySelector('#payment-button'); 2. Create an event handler for the payment button:\n When the customer clicks the payment button, call the getPaymentData() method. Send the response to your server and create an order. Return the reponse from your server to the client-side to redirect the customer.  paymentButton.addEventListener('click', e =\u0026gt; { paymentButton.addAttribute('disabled'); if (PaymentComponent.hasErrors()) { let errors = PaymentComponent.getErrors(); console.log(errors); return false; } createOrder(PaymentComponent.getPaymentData()).then(response =\u0026gt; { if(!response || !response.success) { paymentButton.removeAttribute('disabled'); console.log(response); } else { PaymentComponent.init('redirection', { order: response.data }); } }); });  Avoid duplicate orders When using your own payment button, if the customer clicks it again during the latency before redirection, this creates duplicate orders.\nTo avoid duplicate orders, disable the button until you have attempted to create an order. Then, check response.success:\n If true, don\u0026rsquo;t re-enable the button and proceed to the redirect. If false, re-enable the button for the customer to try again.    Redirect to 3D verification   The init('redirection') method redirects customers paying by credit card to the relevant page.\nIf 3D Secure verification is:\n  Required, the customer is first directed to 3D Secure. If successful, they are then redirected to the redirect_url.\n  Not required, the customer is redirected to the redirect_url.\n      Redirect bank transfer payments   In the gateway_info object, you receive the bank account details for the customer to wire the funds to.\nRender the account details in the interface for the customer with clear instructions. (MultiSafepay also emails these details to the customer.)\nExample gateway_info object\n{ \u0026quot;gateway_info\u0026quot;:{ \u0026quot;mtpinfo\u0026quot;:\u0026quot;NL25DEUT7351811717\u0026quot;, \u0026quot;reference\u0026quot;:\u0026quot;9202124254788300\u0026quot;, \u0026quot;issuer_name\u0026quot;:\u0026quot;Sofortbank\u0026quot;, \u0026quot;destination_account_id\u0026quot;:\u0026quot;003001380000\u0026quot;, \u0026quot;destination_holder_name\u0026quot;:\u0026quot;MultiSafepay\u0026quot;, \u0026quot;destination_holder_city\u0026quot;:\u0026quot;Zurich\u0026quot;, \u0026quot;destination_holder_country\u0026quot;:\u0026quot;CH\u0026quot;, \u0026quot;destination_holder_iban\u0026quot;:\u0026quot;NL25DEUT7351811717\u0026quot;, \u0026quot;destination_holder_swift\u0026quot;:\u0026quot;DEUTCHZZ\u0026quot;, \u0026quot;account_holder_name\u0026quot;:\u0026quot;testperson-nl approved\u0026quot;, \u0026quot;account_holder_city\u0026quot;:\u0026quot;gravenhage\u0026quot;, \u0026quot;account_holder_coutry\u0026quot;:\u0026quot;NL\u0026quot; } }    Create an order Create an order from your server, appending the payment_data collected from the payment component UI to the order data.\nSee API reference – Create order \u0026gt; Payment component.\n Back\nStep 2: Initialize the component\n  Next\nStep 4: Go live\n     ","tags":null,"title":"Integrating multiple payment components","uri":"https://docs.multisafepay.com/payment-components/multiple/step-3/"},{"categories":null,"content":"Step 4: Go live To test the payment methods, use our Test payment details.\nWhen you\u0026rsquo;re ready to process real payments, make the following changes:\n1. In Step 1: Add the elements, replace test JavaScript library with the live JavaScript library:\n\u0026lt;script src=\u0026quot;https://pay.multisafepay.com/sdk/components/v2/components.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; Next, replace the test CSS file with the live CSS file:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://pay.multisafepay.com/sdk/components/v2/components.css\u0026quot;\u0026gt; 2. In Step 2: Construct the component object, change the environment from test to live:\nPaymentComponent = new MultiSafepay({ env: 'live', apiToken: apiToken, order: orderData }); 3. In Step 3: Create an order, change the test endpoint to the live endpoint:\nhttps://api.multisafepay.com/v1/json/orders\n Back\nStep 3: Create an order\n  Next\nCustomizing Payment Components\n     ","tags":null,"title":"Integrating multiple payment components","uri":"https://docs.multisafepay.com/payment-components/multiple/step-4/"},{"categories":null,"content":"Step 1: Add the elements 1. Add the component\u0026rsquo;s CSS to the \u0026lt;head\u0026gt; of your checkout page:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://pay.multisafepay.com/sdk/components/v1/components.css\u0026quot;\u0026gt; 2. Add the component\u0026rsquo;s script tothe bottom of the \u0026lt;body\u0026gt; of your checkout page:\n\u0026lt;script src=\u0026quot;https://pay.multisafepay.com/sdk/components/v1/components.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; 3. Add the DOM element for the component\u0026rsquo;s UI in the \u0026lt;body\u0026gt; of your checkout page:\n\u0026lt;div id=\u0026quot;MultiSafepayPayment\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; Next steps  Step 2: Initialize the component Step 3: Create an order Step 4: Go live   Back\nPayment Components\n  Next\nStep 2: Initialize the component\n     ","tags":null,"title":"Integrating the previous release","uri":"https://docs.multisafepay.com/payment-components/previous-release/"},{"categories":null,"content":"Step 2: Initialize the component Generate an API token Payment Components require a MultiSafepay API token. See API reference – Generate an API token.\n Note: To keep your API key private, request the token from your own server.   Construct the component object 1. Initialize an orderData object, containing information about the customer\u0026rsquo;s order collected during the checkout process:\nconst orderData = { currency: 'EUR', amount: 10000, customer: { locale: 'en', country: 'NL', reference: 'Customer123' }, template : { settings: { embed_mode: true } } };   View properties      Key Value     currency The currency of the order. Format: ISO-4217, e.g. EUR. Required.   amount The value of the order. Format: Number without decimal points, e.g. 100 euro is formatted as 10000. Required.   customer.country The customer\u0026rsquo;s country code. Checks the availability of the payment method. Format: ISO-3166-1 alpha-2, e.g. NL. Required.   customer.locale The customer\u0026rsquo;s language. Sets the language of the payment component UI. Format: ISO-3166-1 alpha-2, e.g. NL. Supported languages: EN, ES, FR, IT, NL. Optional.   template.settings.embed_mode A template designed to blend in seamlessly with your ecommerce platform. Format: Boolean. Optional.      Note: We use the orderData object to ensure the payment method is enabled and the currency, country, and transaction amount are supported.\n2. Construct a PaymentComponent object in the test environment using the orderData object and your API token:\nPaymentComponent = new MultiSafepay({ env: 'test', apiToken: apiToken, order: orderData }); Initialize the component 1. Call the PaymentComponent.init() method with the following arguments:\nPaymentComponent.init('payment', { container: '#MultiSafepayPayment', gateway: '\u0026lt;GATEWAY\u0026gt;', onLoad: state =\u0026gt; { console.log('onLoad', state); }, onError: state =\u0026gt; { console.log('onError', state); } }); 2. Replace the \u0026lt;GATEWAY\u0026gt; placeholder with the relevant payment gateway identifier.   View gateway IDs      Payment method Gateway IDs     Credit card CREDITCARD   iDEAL IDEAL      3. Create event handlers for the following events:\n  View events      Event Event handler     onError Called when an error occurs in the payment component   onLoad Called when the payment component UI is rendered      Note: The PaymentComponent uses the following methods:\n  View methods      Method Description     getErrors Returns error details, e.g. error messages or codes.   hasErrors Returns a boolean value depending on whether errors have been registered.   getPaymentData Creates a payload object with the customer\u0026rsquo;s payment details, used to create orders       Back\nStep 1: Add the elements\n  Next\nStep 3: Create an order\n     ","tags":null,"title":"Integrating the previous release","uri":"https://docs.multisafepay.com/payment-components/previous-release/step-2/"},{"categories":null,"content":"Step 3: Create an order Collect payment data 1. To collect the customer\u0026rsquo;s payment details from the payment component UI, call the PaymentComponent.getPaymentData() method:\nPaymentComponent.getPaymentData() 2. Pass the payment_data to your server.\nCreate an order Make a Create order \u0026gt; Payment component request from your server:\n Append the payment_data collected from the payment component UI to the orderData collected during the checkout process. Replace the \u0026lt;GATEWAY\u0026gt; placeholder with the relevant gateway identifier, see Step 2: Initialize the component.  curl -X POST \u0026quot;https://testapi.multisafepay.com/v1/json/orders\u0026quot; \\ --header \u0026quot;accept: application/json\u0026quot; \\ --header \u0026quot;Content-Type: application/json\u0026quot; \\ --header \u0026quot;api_key: \u0026lt;your-website-API-key\u0026gt;\u0026quot; \\ --data-raw '{ \u0026quot;type\u0026quot;: \u0026quot;direct\u0026quot;, \u0026quot;order_id\u0026quot;: \u0026quot;my-order-id-1\u0026quot;, \u0026quot;gateway\u0026quot;: \u0026quot;\u0026lt;GATEWAY\u0026gt;\u0026quot;, \u0026quot;currency\u0026quot;: \u0026quot;EUR\u0026quot;, \u0026quot;amount\u0026quot;: 100, \u0026quot;description\u0026quot;: \u0026quot;Test order description\u0026quot;, ... \u0026quot;payment_data\u0026quot;: { \u0026quot;payload\u0026quot;: \u0026quot;{secure_payload}\u0026quot; }, }' Redirect the customer 1. From your server, pass the response to the create order request to the customer\u0026rsquo;s device.\n2. Check that response.success is true.\n3. Call the PaymentComponent.init() method using the following arguments:\nPaymentComponent.init('redirection', { order: response.data }); If the customer needs to perform additional actions, they are redirected to the relevant page, e.g. the payment_url or 3D Secure. Then, if successful, they are redirected to the redirect_url.\nIf no further action is required, the customer is redirected to the redirect_url.\n Back\nStep 2: Initialize the component\n  Next\nStep 4: Go live\n     ","tags":null,"title":"Integrating the previous release","uri":"https://docs.multisafepay.com/payment-components/previous-release/step-3/"},{"categories":null,"content":"Step 4: Go live When you\u0026rsquo;re ready to process real payments, make the following changes:\n1. In Step 2: Construct the component object, change the environment from test to live:\nPaymentComponent = new MultiSafepay({ env: 'live', apiToken: apiToken, order: orderData }); 2. In Step 3: Create an order, change the test endpoint to the live endpoint:\nhttps://api.multisafepay.com/v1/json/orders\n Back\nStep 3: Create an order\n  Next\nCustomizing Payment Components\n     ","tags":null,"title":"Integrating the previous release","uri":"https://docs.multisafepay.com/payment-components/previous-release/step-4/"},{"categories":null,"content":"Recently our Integration Team helped you with a technical issue. How did we do?\nCould you leave us a review?\nHow we help you Every day, we work hard to support our merchants. Due to the complexity of ecommerce platforms, it can be quite a challenge!\nWe test our ecommerce integrations extensively before release, but there is always the chance of a conflict with third-party plugins, customization, or server configurations.\nSometimes technical issues fall outside our scope, but we will always try to support and assist you to the best of our ability.\nHow you can help us We stand by our service and need your help to spread the word. Please consider writing an honest review on a platform of your choice.\nWe would greatly appreciate it!\nReview our service  TrustPilot Google review - click on the stars Google Play  Review our ecommerce integrations  Magento 2 Opencart Shopware 5 Shopware 6 WooCommerce  View our LinkedIn profiles  Alex Carletto Daniel Civit Dennis Dijkstra Francesca Cook Jasper Nadi Jelle Sprangers Joris Steenmans Kris Stallenberg Mike de Decker Qadira Ibrahim Robert Au Solaiman el Bacha Vinod Sowdagar  Check out our social media pages  LinkedIn Twitter Facebook Stackshare Instagram  ","tags":null,"title":"Integration Team review","uri":"https://docs.multisafepay.com/integration-team/integration-review-eng/"},{"categories":null,"content":"Afgelopen periode hebben wij u op weg geholpen met een technisch vraagstuk. Dit keer vragen wij uw hulp. Wil je ons helpen met een eerlijke review?\nWaarom is een review nodig? Elke dag werkt ons Integratie Team hard om merchants te helpen. Door de complexiteit van de ecommerce platformen is dit een flinke uitdaging. Wij testen onze ecommerce integrations goed, maar conflicten met derde partij plugins, maatwerk of server configuraties zijn niet uit te sluiten. Wij vergelijken het werk wel eens met de brandweer. Wij komen aan bij een brand maar de exacte situatie is onbekend en altijd anders. Toch moeten wij zorgen dat aan het eind de situatie onder controle is.\nOndanks dat technische vraagstukken vaak buiten onze scope liggen proberen wij ze toch op te lossen. Dit willen wij graag als MultiSafepay ook naar buiten toe uitstralen en daar kunnen we uw hulp bij gebruiken.\nHoe kun je ons helpen? Door het schrijven van een eerlijke review of beoordeling, op het platform van uw keuze. Wij waarderen dat enorm en zullen u niet vergeten.\nWebsites  TrustPilot Google review - Click on the stars Google Play  Ecommerce integrations  Magento MarketPlace - Magento 2 Shopware Store - Shopware 5 Shopware Store - Shopware 6 WooCommerce plugins  LinkedIn profielen  Alex Carletto Daniel Civit Dennis Dijkstra Francesca Cook Jasper Nadi Jelle Sprangers Joris Steenmans Kris Stallenberg Mike de Decker Qadira Ibrahim Robert Au Solaiman el Bacha Vinod Sowdagar  Sociale media  LinkedIn Twitter Facebook Stackshare Instagram  ","tags":null,"title":"Integration Team review","uri":"https://docs.multisafepay.com/integration-team/integration-review-nl/"},{"categories":null,"content":"We test all our ready-made integrations before release, but your integration may still encounter configuration issues or a bug, especially if you built your own.\nWe are best able to support issues that are reproducible in a standard website environment. But we always try to offer support, even for issues outside our scope.\nBasics When we start trying to reproduce an issue, we always begin with the basics.\nHelp us by answering the following questions:\n Does the issue occur in the plugin core? Does it occur in the payment method core? When did the issue start occuring? Has there been a recent plugin or system update? Can you reproduce the issue? Do you have any examples?  Integration Team rules   We conduct our investigations in a staging or test environment of your ecommerce platform. Create a temporary username and a strong password to give us access. Always delete the temporary account after we finish the investigation.\n  We only ask for the credentials for your live ecommerce platform account in extraordinary circumstances. In such cases, we recommended making a backup beforehand - just in case.\n  Note: MultiSafepay assumes no responsibility for mistakes in your live environment.\n  If we require server access, we work exclusively with SFTP and SSH, using Port 22. For security reasons, we no longer support the FTP protocol.\n  If we cannot reproduce an issue in a standard staging or test environment, we consider it a time-box project. This means we allocate a limited period of time to work on it further. We cannot guarantee a solution.\n  ","tags":null,"title":"Integration Team: Help us help you","uri":"https://docs.multisafepay.com/integration-team/webshop-access/"},{"categories":null,"content":"3.1.3 Release date: Nov. 24th, 2021\nFixed  PLGMAGONE-736: Fix invalid method backendOrdersAllowed on backend orders   3.1.2 Release date: Nov. 23rd, 2021\nFixed  PLGMAGONE-734: Fix unable to create backend orders (items not showing) PLGMAGONE-735: Fix conflict with service cost and non MultiSafepay plugins   3.1.1 Release date: Sep 16, 2021\nFixed  PLGMAGONE-730: Use correct invoice id when order is being updated to shipped PLGMAGONE-731: Remove unused tax tables which could generate wrong taxes   3.1.0 Release date: Jun 15, 2021\nAdded  PLGMAGONE-710: Add support for Generic Gateways which can be used for branded giftcards PLGMAGONE-627: Add order number variable support to custom refund description  Fixed  PLGMAGONE-719: Prevent a zero amount refund leading to a full refund PLGMAGONE-706: Show payment instructions for giftcards too  Changed  DAVAMS-344: Update Trustly logo   3.0.0 Release date: Oct 21, 2020\nAdded  DAVAMS-234: Add in3 DAVAMS-262: Add CBC payment method PLGMAGONE-699: Add Good4fun Giftcard  Fixed  PLGMAGONE-678: Fix bug in calculating correct price and tax for Fooman surcharge PLGMAGONE-671: Fix maximum nesting level error with Idev OneStepCheckout PLGMAGONE-668: Fix non working days/seconds_active for backend orders  Changed  PLGMAGONE-634: Switch from XML API to JSON API (Only API key is needed) PLGMAGONE-472: Set order to status shipped for all payment methods PLGMAGONE-674: Always set redirect_url DAVAMS-28: Rebrand Santander Betaalplan to Pay per Month DAVAMS-295: Rebrand Direct Bank Transfer to Request to Pay DAVAMS-308: Rebrand Klarna to Klarna - buy now, pay later Update payment method names  KBC ING Home\u0026rsquo;Pay Credit card Pay After Delivery E-Invoicing     2.6.0 Release date: Apr 2, 2020\nAdded  PLGMAGONE-617: Add Apple Pay PLGMAGONE-656: Add Direct Bank Transfer (Request to Pay) PLGMAGONE-485: Add support for Fooman Surcharge PLGMAGONE-562: Added support for PostNL pickup points for AfterPay.  Fixed  PLGMAGONE-654: Fix incorrect character set for translations PLGMAGONE-621: Fix layout issue when OneStepCheckout is used PLGMAGONE-588: Fix missing site secure code in refund request PLGMAGONE-572: Fixed payment fee description not being set PLGMAGONE-526: Fixed undefined variable recurring on E_STRICT mode PLGMAGONE-458: Count gives warning when PHP 7.2 is used  Changed  PLGMAGONE-599: Hide Pay After Delivery when shipping address differs PLGMAGONE-574: Prevent orders to be cancelled when set to processing Update translations for \u0026ldquo;select your credit card\u0026rdquo;   2.5.1 Release date: Mar 25, 2019\nAdded  PLGMAGONE-457: Added Handelsbanken iDEAL issuer logo PLGMAGONE-406: Added support for Modman  Changed  PLGMAGONE-344: Enable refund shipping amount when shipping includes tax  Fixed  PLGMAGONE-465: Fixed service costs not showing with some third-party modules PLGMAGONE-456: Fixed service costs not working on clean installation PLGMAGONE-448: Fixed Qwindo does not work in compiled mode PLGMAGONE-431: Fixed notice \u0026ldquo;undefined index\u0026rdquo; on invoice creation   2.5.0 Release date: Sept 21, 2018\nFeatures  PLGMAGONE-339: Add Tokenization PLGMAGONE-411: Added support for E-Invoice gateway for manually created orders  Fixes PLGMAGONE-429: Corrected Paysafecard gateway for manually created orders\n 2.4.2 Release date: Jun 15, 2018\nFixed  PLGMAGONE-384: Log refund errors to order notes PLGMAGONE-391: Fix undefined variable in error log when refund exception occurs PLGMAGONE-374: Update Dutch translations   2.4.1 Release date: May 25, 2018\nAdded  PLGMAGONE-378: Add support for Santander Betaal per Maand PLGMAGONE-379: Add support for AfterPay PLGMAGONE-380: Add support for Trustly PLGMAGONE-381: Add Moneyou iDEAL issuer logo  Fixed  PLGMAGONE-377: Uncaught error when saving empty grouped product while Qwindo was active PLGMAGONE-382: Gateway ING not changed everywhere to INGHOME   2.4.0 Release date: Mar 12, 2018\nFixes  Add support for Qwindo PLGMAGONE-370: Updated Dutch translations PLGMAGONE-369: Update Klarna payment method logo PLGMAGONE-368: Add keep cart alive for ING Home\u0026rsquo;Pay, Belfius, KBC and iDEAL QR PLGMAGONE-346: Add support for prefilled gender/dob fields in Klarna/Pay After Delivery PLGMAGONE-195: Housenumber extension added when Onestepcheckout is used PLGMAGONE-356: Support direct transactions for ING/KBC PLGMAGONE-362: Update ING Home\u0026rsquo;Pay name within backend configuration PLGMAGONE-341: Don\u0026rsquo;t add payment fee twice to credit memo PLGMAGONE-331: Add handling of chargeback status PLGMAGONE-354: Add iDEAL QR gateway PLGMAGONE-343: Don\u0026rsquo;t update an order when it\u0026rsquo;s closed (due to offline refund) PLGMAGONE-337: Add check to only update order status when order exists PLGMAGONE-338: Undefined index error on expired orders PLGMAGONE-357: Update ING gateway to INGHOME PLGMAGONE-340: Prevent cancel on api error when order has already been paid PLGMAGONE-342: Fixes headers already send error when credit card gateway is used PLGMAGONE-336: Undefined index custom_refund_desc   2.3.6 Release date: Nov 7, 2017\nFixes  PLGMAGONE-326: add daysactive/secondsactive for Klarna/Pay After Delivery PLGMAGONE-327: Removed Klarna quote loading to prevent infinite loop PLGMAGONE-159: Removed unused reverted status configurations PLGMAGONE-323: Allow different billing/shipping addresses, reverted PLGMAG-304 PLGMAGONE-329: Fixed sorting on min/max amounts PLGMAGONE-96: Restricted currencies used are now loaded from the correct store PLGMAGONE-313: selecteer uw credit card is now translatable PLGMAGONE-33: Added support for AliPay PLGMAGONE-96: Improvements to currency restriction in cards/gateways PLGMAGONE-96: Restricted currencies used are now loaded from the correct store   2.3.5 Release date: Oct 23, 2017\nFixes  Fixed an issue causing a double iDEAL issuer selection.   2.3.4 Release date: Aug 3, 2017\nFixes  Fixed issue trying to get property of non-object payment_data. Fixed issue where manual orders could be placed with decimals. Fixed PLGMAGONE-132. Some undefined index notices got fixed. Fixes PLGMAG-304. Only allow Klarna when billing and shipping address are the same (Klarna regulation). Fixed issues with the Givacard gateway. Fixed PLGMAGONE-105: getShippingAmount zero leads to NAN tax table. Fixes an issue with de credit card gateway not processing the brand.  Improvements  Added missing logo used for the credit card payment method option. Updated the install script. Updated Bancontact logo and title. Removed Thumbs.db from the package. Added delivery info to Pay After Delivery/Klarna requests. Fixes PLGMAGONE-311 and PLGMAGONE-312. Added gateway codes for Paysafecard and American Express.  Features  Added support for Paysafecard. Added support for Belfius. Added support for KBC/CBC. Added support for ING Home\u0026rsquo;Pay. Add customizable description to refund request. Support for Seconds Active PLGMAGONE-259.   2.3.3 Release date: Feb 16, 2017\nFixes  Resolved PHP7 deprecated warnings occuring in the MultiSafepay class file.   2.3.2 Release date: Jan 25, 2017\nFixes  Removed whitespace which resulted in the PHP error \u0026ldquo;headers already sent\u0026rdquo; being triggered when selecting the credit card gateway Resolved an issue when used with OneStepCheckout causing the wrong gateway to be used.   2.3.0 Release date: Oct 12, 2016\nImprovements  Added EPS and FerBuy as payment methods. iDEAL issuerlist alignment improved. Added official support for the FastCheckout productfeed v1.0 Added some missing German translations for Klarna.  Fixes  Fixed an issue related product quantity when partially refunding Klarna payments.  Changes  Changed the YourGift logo.   2.2.9 Release date: Aug 10, 2016\nImprovements  Status requests are now logged in multisafepay.log when debug option is enabled.  Fixes  Resolved an issue where invoices aren\u0026rsquo;t being generated.   2.2.8 Release date: June 21, 2016\nImprovements  Added E-Invoicing. Payment links are now only requested when creating new orders in the Magento backend, not when editing an order, resulting in a new order.  Fixes  Fixed an undefined notice within the logs. Resolved an issue resulting in the transactional data not being set, such as; parent_id and additional_information  Changes  Updated Bancontact image Changed the iDEAL issuer selection from dropdown to radio buttons with the bank\u0026rsquo;s logo.   2.2.7 Release date: May 26, 2016\nImprovements  Added logging of refund requests. The currency is now retrieved from the order when creating a credit memo and refunding, rather than from the store. Added support for Fast Checkout product feed. Improvements were made to the confirmation page URL. Added improvements for the refunding of foreign currencies.  Fixes  Resolved undefined notices. Resolved issues when refunding orders that have discounts. Resolved a bug when using webshop gift card. Resolved the doubled shippingtax bug causing incorrect invoice and/or credit memo amounts.  Changes  Removed the refunding of fees.   2.2.6 Release date: March 10, 2016\nFixes  Resolved incorrect tax amount visible in the invoice when using a fee.   2.2.5 Release date: March 4, 2016\nNew features  Added Dotpay as payment method.  Improvements  Invoices now show the correct payment method.  Fixes  Resolved issues preventing orders from being opened once paid with PayPal or Bank transfer. Resolved error code 1035 occurring when refunding. Resolved credit memo issues. The total order amount of orders paid with Fast Checkout now include the shipping costs.   2.2.2 Release date: Dec 28, 2015\nImprovements  If paid amount difference from total order amount. A note is added with extra info. No invoice is created. Added (incl Tax) to totals line to make it more clear as other lines can be set in tax totals settings. Also added this for the frontend. Added configurable FastCheckout field for phone number.  Fixes  Fixes undefined configMain notice. Added missing klarna.phtml In case an order is paid by Second Chance and an other payment method is used as the initial, the order will be updated with the correct payment method. Fixes bug with directdebit using a wrong gateway code Fixes for wrong credit memo amounts that are processed. Fixes Store id is now used to get the correct store URL\u0026rsquo;s to redirect to Fixes cancelled status for Pay After Delivery and Klarna notifications are now ignored as the order was already set to Paid. If set to cancelled then a credit memo can\u0026rsquo;t be created anymore. Fixes bug causing the order status set to \u0026ldquo;payment review\u0026rdquo; instead of \u0026ldquo;processing\u0026rdquo;. This was caused because the order grandtotal had to be rounded to two so it matches the paid amount in the transaction.  2.2.1 Release date: Nov 12, 2015\nNew features  Payment fee can now be refunded Added min/max amount restrictions for all gateways.  Improvements  Added Klarna to the language file.  Fixes  Fixed undefined variable isAllowConvert notice. Fixed undefined variable Currencies notice. Fixed issue using wrong StoreConfig. Fixed issue when selecting all the available currencies in the configuration. Fixed issue using the wrong account credentials for FastCheckout. Fixed issue causing shipping method not to be correct for Klarna and Pay After Delivery. Fixed issue which prevented accepting gender, bank account and date of birth twice when using Klarna. Fixed issue which resulted in 1 cent mismatch when using Klarna on older Magento installations.   2.2.0 Release date: Aug 20, 2015\nNew features  Added Klarna as payment method. gift card now have their own API key config. Refunds now work for Klarna, Coupons and Pay After Delivery. Success page now visible when using a payment link or pay using Second Chance. FCO button now also language based. Fallback to configured gateway code if gateway is not available within the quote. Fallback if issuer is set but no gateway, then somehow we lost the gateway although iDEAL was selected. We now default to iDEAL. Added Beauty and Wellness gift card. Added Sport\u0026amp;Fit gift card. Added VVV gift card. Added PODIUM gift card. Added missing Gifcard logos. All available currencies can be selected when configuring the gateway. Added option to remove all buttons to the normal checkout for when only FCO is enabled.  Improvements  Updated order of FastCheckout in menu. MultiSafepay menu added. Separated some configurations.  Changes  Disabled gift card Ebon. Return-URL\u0026rsquo;s are now always ending with only /success/ for better support for GUA module. Disabled FastCheckout payment method in normal checkout as this is causing confusion for merchants. Don\u0026rsquo;t set state to cancelled when partial refunded as it still has to be processed partially. Disabled some gift cards that are for one merchant. Added FCO button on login/register page. Redirect URL always added for Pay After Delivery. Check for stock settings before processing stock. Now use current selected currency to recalculate fee. Fee is always configured in EUR. Removed old package file. Removed unused code. Set checkout session to be used instead of core for storing issuer data. Update xmlescape function.  Fixes  Fixed Store name from order is used for manual paylink, not the admin site. Fixed some undefined fields causing a Notice error when PHP use a STRICT error logging. Fixed success URL for Direct Bank transfer (Request to Pay). Fixed some issues with the customer groups selected in the configuration of the gateways. Fixed prices including tax (Solved error 1027). Fixed some encoding issue. Fixed When sending the order confirmation after a payment, then this is ignored for a Bank transfer. Fixed fee now displayed correctly when using multi-currency. Fixed bug with gift card data and delivery data.   2.1.2 Release date: May 7th, 2015\nImprovements  Paymentlinks generated in the Magento Admin for manually created orders now use the \u0026lsquo;Daysactive\u0026rsquo; setting in the main plugin configuration. The transaction status \u0026lsquo;Expired\u0026rsquo; no longer triggers the plugin to cancel orders with an invoice.  Changes  The \u0026lsquo;Keep Cart Alive\u0026rsquo; plugin setting has been enabled by default. The \u0026lsquo;Keep Cart Alive\u0026rsquo; plugin setting now only works for MultiSafepay payment methods. Fast Checkout no longer creates an order for an expired order  Fixes  \u0026lsquo;Allowed currencies\u0026rsquo; for the MultiSafepay Gateways were not requested correctly. Added delivery address data to orders for PayPal\u0026rsquo;s Sellers Protection. Call to undefined method error occuring with the Pay After Delivery object Paymentlinks generated in the Magento backend for manually created orders always used the test environment Fixed double payment method titles Resolved DIRECTebanking gateway code bug Magento didn\u0026rsquo;t always update and store the amount correctly when converting from USD to EUR resulting in the wrong amount paid after the plugin conversion. The Pay After Delivery (MultiFactor) rejection message has been added to the language files. The Pay After Delivery (MultiFactor) rejection message has been altered to only show relevant information to customers. Available payment methods are no longer shown when the visibility has been limited to specified user groups. The plugin processes the refund status and closes the order if the credit memo option isn\u0026rsquo;t enabled when creating a credit memo   2.1.1 Release date: Mar 20, 2015\nFixes  Fixed bug for outline gateway images   2.1.0 Release date: Mar 19, 2015\nNew features  Coupons now use their own gateway settings so that multiple + MultiSafepay accounts can be used to support multiple MultiSafepay coupons Add a refund transaction to the Magento transactions order overview on refund or partial refund Support for partial refunds Special status for initialized Bank transfer transactions Added support for fixed fee and/or percentage fee for each gateway Show Pay After Delivery rejection notice within the store when transaction is rejected Added enable/disable config value for FCO product feed Feed action. Feed can be requested at /msp/standard/feed/ Enable/disable config option check is now added. Check is also added for API key to check if the given key matches the configured key Order now using translation files Added updateInvoice function. Send Magento invoice ID to MultiSafepay, this will be added to the accountant export Added daysactive to connect When creating an order we now use the selected payment method for the manual transaction request Payment link added to a manually created order by an admin. When an admin creates an order manually, we will create a transaction request for it and add the payment link to the order. The merchant now doesn\u0026rsquo;t need to Sign in to the Ewallet and manually create a payment link for the order  Improvements  If there is an invoice, the order can\u0026rsquo;t be cancelled anymore Added more language files Better support for Keep Cart alive, so it is compatible with Onestepcheckout Added check for - phone number for BNO trans. Compatibility with some Onestepcheckout modules that add - when phone number is empty or not available as custom field Check if payment is object, if not, default to standard gateway model This will solve the 1016 error message Manual payment link process has changed. Updated the observer. The payment link is now only added when the order is being created from the Magento Admin and no longer on every save action within the Magento Admin If title isn\u0026rsquo;t added then fallback tot main gateway title Updated upgrade script Updated bno.phtml for better layout in OneStepCheckout Better support for gateway images. Works with default, onestepcheckout.com and Apptha checkout Removed disable option for text titles Disabled check for active table rates config. This was old code from when this was configured within the FCO configuration Transaction errors for normal transaction request now also result in a closed order Added extra check for enabled fee for the payment method After transaction error with DIRECT Pay After Delivery transactions we will close the order because replacing using another payment method will create a new order When status is refunded just return ok and exit. The Magento plugin can process partial refunds so we should ignore refunded status because this can update the order wrong with partial refunds. Status updates are done by creating the credit memo Added fallback for refund status for when new base.php is used with older releases Added transaction details to the transaction record that is created when creating an invoice automatically Added default config to the plugin that sets the fee after the shipping cost in the totals overviews Rewrite of the refund API integration. The implementation was wrong and causing every MultiSafepay refunded to be processed online. This supposed to be a choice by order to refund online. Merchants can now refund online when it\u0026rsquo;s enabled within the configuration and by going to the invoice, click credit memo and then refund. Then can choose to refund, or refund offline where the refund offline won\u0026rsquo;t submit the refund to MultiSafepay  Changes  Removed fijncadeau references  Fixes  Fixed bug for coupon settings Fixed bug for ordering same pages with different options results in an error 1027 Pay After Delivery option for sending invoice email. When enabled resulted in NOT sending and vice-versa Fixed bug Maintransaction ID errors when auto redirect is enabled with direct iDEAL Reset fee before trying to set it. Solves issue with some installations not reseting, resulting in fee from other selected payment method Added extra setQuote to solve issues reported by one merchant where Magento didn\u0026rsquo;t add the quote correctly to the order. To solve this bug with Magento, we set the quote manually within the order Fixed bug with payment details to be added to the transaction record. Payment details are now stored again within the transaction record Fixed bug with unpaid invoices when completed Fixed issue to treat order status cancelled or cancelled (American vs English) the same correct way Fixed bug that caused product from a manually created order to be in the cart for the customer that the order was created for when the customer returns to the store and logs in Fixed bug with paid status When creating an invoice, Magento gets the totalpaid value and add it to the total invoiced value. When we don\u0026rsquo;t create an invoice automatically, we set the totalpaid to inform the merchant that the order was paid. This resulted in a double totalPaid value because Magento added the invoiced total to the totalPaid when manually creating the invoice. This is now changed so that we reset the Total Paid in this situation just before the invoice is created and Magento updates the totalPaid again   2.0.2 Release date: Oct 10, 2014\nImprovements  Added an option to set the daysactive for an Pay After Delivery transaction. When not payed in time, the transaction will expired and the webshop will be notified Added extra line to set the order total to paid if it hasn\u0026rsquo;t been done Now use the fee price formatter so it includes the selected currency Force ordertotal set to paid when transaction is completed and invoice creation is disabled. Only show creation of transaction note once. Added version number to config title line. Textual improvements. Better check on order confirmation email sending. Rrecalculate the product price without tax as Magento round at 2 decimals by default and we use 4. This resulted in a amount mismatch when ordering larger quantities of the same product. Better support for special chars. Enabled locking again but return false instead of showing error and exit. This should avoid duplicate invoices when callback is called while before the redirect_url set the order status.  Changes  FEE base is rewritten. Upgrade the php dependence to 5.5.12. Now get the selected gateway from the quote instead of the gateway model. This adds better compatibility with third-party onestepcheckout plugins.  Fixes  Fixed bug for error #1016 on the Return-URL. Fixed bug with gateway title not being visible in checkout. Fixed bug with missing house number on connect transactions. Fixed bug with order email not being sent after transaction complete. Fixed bug with double totalPaid amount.   2.0.0 Release date: May 20, 2014\nImprovements  Added support for refunds from out of the backend of the webshop Fast Checkout now use the Magento Shipping methods When the order status of an Pay After Delivery order in the webshop is set to \u0026lsquo;Shipped\u0026rsquo;, the status of the transaction is also changed in the MultiSafepay backend. Currency not supported by MultiSafepay can now be converted to euro\u0026rsquo;s. Programm structure of the plugin changed to the standard Magento convention. added support for Fashion-cheque. added support for Lief cadeaukaart. added support in the configuration for minimal order amount for iDEAL. added (limited) support for Magento Connect package (Only for new installations, not for an update from an older version of plugin).  Changes  The \u0026lsquo;Solve fee bug\u0026rsquo; setting has been removed from the configuration. This is fixed in the software. The gateway \u0026lsquo;Fijncadeau\u0026rsquo; is deleted because it is no longer available. Transaction-ID is added to the redirect URL, for the case that our system doesn\u0026rsquo;t. disable log for status-request to avoid large log files. lockfile systeem disabled.  Fixes  Fixed bug in the American Express config. Fixed 500 error when developers mode is enabled and iDEAL is selected without bank preselection. Fixed bug with images in checkout. Fixed bug with currency for separate gateway\u0026rsquo;s. Fixed bug with the language. The additional fee is removed by normal operation.(Bug reported in v1.4.4). Fixed memory limit bug cause by recursion in the Payafter.php model. Fixed undefined index notices.   1.4.4 Release date: Apr 28, 2014\nImprovements  Better support for OneStepCheckout. Better support for Apptha OneStepCheckout.  Fixes  fixed bug with total amount when using conversion. Fixed bug with autocreate invoice. Fixed bug with double fee calculation. Fixed bug with fee by payments other than Pay After Delivery.   1.4.3 Release date: Apr 8, 2014\nImprovements  Filtering for special characters in XML. Added option to show the Pay After Delivery fee incl or excl tax during checkout, without changing calculations. Added Pay After Delivery template for direct Pay After Delivery transaction request. Added American Express as payment method. Added max amount for some gateways.  Changes  Always get first IP address for customer IP and forwarded IP that it finds within the given value. Create invoice after payment has been completed, Magento changed things, if invoice isn\u0026rsquo;t created then the order is processing with unpaid status. Changed default/template/msp/default.phtml files. This provides gateway html for other gateways other then MultiSafepay. Removed house number feature. If house number isn\u0026rsquo;t available after parse the address then we use street2. Changed the way how discounts are processed. Change store name for connect transactions. No more redirect to checkoutcontroller for FCO transactions. All is done from within the standardcontroller. This solves 302 and 307 offline action errors.  Fixes  Google checkout bug fix. Fixed bug with configurable product only show the correct pages and don\u0026rsquo;t show up twice in pages listing. Fixed bug with order data. Fixed return to empty cart page when offline actions are slow. fixed issue on error 503 in offline actions. No need to fill in account details in 3 different places. Fixed bug with directdebit and SOFORT Banking. Fixed bug with empty return-url.   1.4.2 Release date: Feb 4, 2014\nFixes  Invoice emails are now send correctly when using Magento 1.8.1 Better support for Pay After Delivery   1.4.1 Release date: Sep 19, 2013\nImprovements  Support for free shipping method Fee configurable option for the amount. HTML instructions support for connect Gateway Support for the onestepcheckout house number feature. This function seperates the address and house number, with this option enabled Pay After Delivery would fail on missing data. Amount validation check. If the quote amount is not equal to the order amount the transaction creation will stoped to prevent an underpaid order. Currency selection support for each separate gateway. Now you can select the currencies that are supported, the gateway will only be visible with the selected currencies. Degrotespeelgoedwinkel coupon as supported gateway Support for gateway descriptions per gateway. You can also use html within the description field to add nice gateway descriptions. Configurable \u0026lsquo;multisafepay servicekosten\u0026rsquo; label for Pay After Delivery. This label can now be changed Support for gateway images. Option to select only an image, the title, or both. Support for void, declined and expire status codes in combination with CANCELLED STATE.  Changes  Direct e-banking is now SOFORT Banking Moved the fee line within the order totals table to above the tax The Fee tax description so it uses the configured label Disabled discontinued Fijncadeau coupon card Fooman surcharge fix no longer applies. To avoid confusion this is removed from the package.  Fixes  Wrong fee percentage for BNO Tax Disable visibility for the (old) notification URL Language was missing by use of Fast Checkout Bank selection was alway visible with iDEAL, even when the option was disabled. Parfumcadeaukaart coupon is now working correctly \u0026lsquo;The cart is not equal\u0026rsquo; is now solved for normal checkout as the one step checkout. When no fee is active the service cost\u0026rsquo;s won\u0026rsquo;t be visible.   1.3.3 Release date: Mar 26, 2013\nImprovements  Added an \u0026lsquo;send order status update email\u0026rsquo; option Added an option to keep the cart active Added override for the order submit function. Now we can keep the cart active when a customer cancelled the order. Added the Fast Checkout method to the normal checkout process Added creation of an account within the store when a customer uses Fast Checkout. Better UTF-8 compatibility for Fast Checkout to prevent error 1000 messages.   1.3.2 Release date: Mar 10, 2013\nImprovements  Added Pay After Delivery support Added an extra check to that an invoice won\u0026rsquo;t be created twice Added bank_id check Better one step checkout compatibility with iDEAL issuer selection  Changes  Updated Gateway template for direct banking. Removed the Invoice observer to avoid problems with invoice creation. The observer activated an update function that isn\u0026rsquo;t needed. Updated the default Fast Checkout logo  Fixes  Fixed bug iDEAL issuers list with production environment. Fixed bug registered bank_id bug, now we have a select your bank option to avoid errors when customers forget to select a bank. Fixed bug for empty order status when an order was cancelled. Fixed bug that caused a duplicate transaction request Fixed store_id bug. Fixed bug that cause useless Notification notices within the error logs.   1.3.1 Release date: Jan 10, 2013\nImprovements  DirectXML for Bank transfer.   1.3.0 Release date: Dec 10, 2012\nImprovements  DirectXML for iDEAL.   1.2.9 Release date: Jan 12, 2011\nImprovements  New order email option is active, you can now set when you want to send the order emails. New feature added that allows for reopening cancelled orders. If a cancelled order got paid by using Second Chance etc, the order will be processed again and an invoice is created etc. Added gateways for ebon, baby gift card, boekenbon, erotiekbon, fijncadeau, webshop  card, parfumnl, parfumcadeaukaart.\nFixes  Quantity didn\u0026rsquo;t got updated correct when some statusses got processed. Fix bug that allowed the processing of the same status multiple times. Check added so that a status will only be processed once.   1.2.8 Improvements  STATE_CANCELED changed to STATE_PENDING due to Second Chance.  Fixes  Cancelled Orders will now actually be cancelled.   1.2.7 Improvements  Better handling of manual invoice creation. Extra lock check that if an error occurs the status message is Not OK. use_shipping_notification set to false to overcome issue with \u0026ldquo;Cannot send order to ##Specified## country.  Fixes  Cancelled Orders will now actually be cancelled.   1.2.6 Improvements  Send email on Processing (instead of initial). Manual create invoices for orders. Payment Overview Cancelled status for: Void, Declined \u0026amp; Expired.  ","tags":null,"title":"Magento 1 plugin changelog","uri":"https://docs.multisafepay.com/integration/ready-made/magento1/changelog/"},{"categories":null,"content":"   ","tags":null,"title":"Never Gonna Give You Up","uri":"https://docs.multisafepay.com/integration-team/shirt-2/"},{"categories":null,"content":"   function sleep(ms) { return new Promise(resolve = setTimeout(resolve, ms)); } var tag = document.createElement('script'); tag.src = \"https://www.youtube.com/iframe_api\"; var firstScriptTag = document.getElementsByTagName('script')[0]; firstScriptTag.parentNode.insertBefore(tag, firstScriptTag); var player; function onYouTubeIframeAPIReady() { player = new YT.Player('player', { height: '390', width: '640', videoId: 'dQw4w9WgXcQ', events: { 'onReady': onPlayerReady, } }); } function onPlayerReady(event) { event.target.playVideo(); jumpstart_player(); } async function jumpstart_player() { for (let i = 0; i Join in on the fun! Are you a developer interested in working at MultiSafepay? View our job openings and feel free to get in touch with us.\n","tags":null,"title":"Never Gonna Give You Up","uri":"https://docs.multisafepay.com/integration-team/shirt/"},{"categories":null,"content":"3.0.0 Release date: May 9, 2017\nChanges  This plugin now uses the JSON API, rather than the XML API. Added all available payment methods as separate gateways Added all available gift card methods   2.0.3 Release date: Oct 12, 2016\nImprovements  Added Klarna as a payment method.  Changes  Changed MisterCash to Bancontact and replaced the payment method logo.   2.0.2 Release date: Jun 18, 2015\nImprovements  Add check for completed transactions so that the confirmation is only sent once for paid transactions Added iDEAL selection to the payment selection page instead before the order confirmation Added javascript that will auto select iDEAL as payment method when an issuer is selected  Fixes  On extra offline action the status of the order was reset to initialized. This has now been solved Zone restriction is now working correct again Added extra check for Fee tax. This solves 1027 errors and invalid tax rate for shipping   2.0.1 Release date: Mar 28, 2014\nImprovements  Now compatible with OsCommerce 2.2 Added NL images Added order total language files, untranslated Added Multi-Currency support Added OSC input validation Added American Express Support to the OsCommerce plugin Added SOFORT Banking support  Changes  Changed language files. Added option to show only the gateway title, and no images. On request Changed default order status to selected initial status Updated curl combined files Updated Pay After Delivery default order status to the init status Disabled updating customer info as this is saved before the transaction  Fixes  Fixed bug with weight-based shipping Fixed amount bug Fixed bug that caused a Pay After Delivery order not to show before a finished transaction Fixed bug for cancel URL, use hardcoded method like nurl script Fixed bug with single quotes  ","tags":null,"title":"OsCommerce plugin changelog","uri":"https://docs.multisafepay.com/integration/ready-made/oscommerce/changelog/"},{"categories":null,"content":"Manual\nSingle payment method\n     Manual\nMultiple payment methods\n      See the manual to integrate the previous release.\n","tags":null,"title":"Payment component integration manuals","uri":"https://docs.multisafepay.com/payment-components/integration/"},{"categories":null,"content":"3.7.1 Release date: Jan 7th, 2022\nChanged PLGPRSS-423: Rename Client class to MultiSafepayClient to avoid conflict with third party modules\n 3.7.0 Release date: Nov 25th, 2021\nAdded  DAVAMS-232: Add support for in3 payment method PLGPRSS-420: Add payment component support for Credit Card payment method PLGPRSS-409: Add support for gift products within the Shopping Cart object PLGPRSS-406: Add support for Good4fun gift card  Fixed  PLGPRSS-414: Fix locale code when submit the Order Request, which was generating errors in case payment address code of the customer is different from the language selected  Changed  PLGPRSS-408: When a payment is cancelled, the shopping cart will not be emptied DAVAMS-314: Rebrand Klarna with new logo DAVAMS-298: Rebrand Direct Bank Transfer as Request to Pay   3.6.0 Release date: Jul 21, 2020\nAdded  DAVAMS-269: Add CBC payment method  Changed  DAVAMS-213: Add track \u0026amp; trace to shipment request PLGPRSS-404: Set order to status shipped for all payment methods   3.5.0 Release date: Apr 9, 2020\nAdded  PLGPRSS-344: Add AfterPay  Fixed  PLGPRSS-396: Correct spelling of ING Home\u0026rsquo;Pay PLGPRSS-397: Fix incorrect gateway code for ING Home\u0026rsquo;Pay   3.4.0 Release date: Apr 2, 2020\nAdded  PLGPRSS-400: Add Apple Pay PLGPRSS-399: Add Direct Bank Transfer (Request to Pay)   3.3.0 Release date: Feb 26, 2020\nFixed  PLGPRSS-309: Prevent multiple transactions being created for the same order PLGPRSS-391: Prevent duplicated orders by adding file locking PLGPRSS-267: Mobile presentation of payment methods is not fully responsive  Changed  PLGPRSS-190: Send shopping cart data for all payment methods PLGPRSS-352: Improve parsing of address into street and apartment   3.2.0 Release date: Nov 8, 2017\nImprovements  Add gift card Givacard. Error-messages are now showed according to the PrestaShop guidelines. Order Confirmation screen now also contains the order information. Changed the layout for gateways during checkout (iDEAL, Pay After Delivery, Klarna, E-Invoice, Bank transfer). Module descriptions are now uniform. Critical debug- and error messages are added to the PrestaShop-Logger, wether or not the debug function in the module is enabled. Tokenization is included. Some small ### Changes to the styling. Update translations. Changed the way and address is split into street and house number.  Fixes  In some situations, the cart was accidentally emptied. The order-confirmation screen was also showed for non-MultiSafepay payment methods.  Changes  Removed the configuration option for by-passing the order-confirmation screen. This because the order-confirmation screen is default PrestaShop behaviour and mandatory for some payment methods. Removed the configuration option for HTTP or HTTPS since this was added in the past for one merchant having some issues. Removed the lock mechanism in the offline-action script. Since this was unnecessary.   3.1.7 Release date: Sept 8, 2017\nImprovements  Add ING Home\u0026rsquo;Pay as payment method. Add BKC as payment method. Add Belfius as payment method. Update Dutch translation-files. Resized all payment logos. Removed underscore in the name of all gift cards. Adjust birthdate to correct layout for Klarna and Pay After Delivery. Removed own order-confirmation.tpl and use PrestaShop default.  Fixes  Customer is now correct redirected to the order-confirmation page. Check whether or not update order status failed sometimes. Confirmation-form for PaySafecard was not loaded due to a misspelled filename. When using the Connect gateway the button for \u0026lsquo;All payment methods\u0026rsquo; was not available. Shipping methods where selected based on language-code instead of country-code. When using the CreditCard gateway the customer wasn\u0026rsquo;t redirect to the correct payment-page. In exceptional cases no order was created due to an invalid security-key. FastCheckout failed in updating the order status. FastCheckout did not support Free shipping. Transaction-ID was not always included in the order. Free Shipping information was not included in the transaction.  Changes  Removed support for BVKPayment for FastCheckout. as this can configured within your MultiSafepay dashboard.   3.1.5 Release date: May 12, 2017\nImprovements  New logo for Mastercard. Add PaySafeCard as payment method.  Fixes  Order confirmation screen is now also showed when option \u0026lsquo;Moment of order creation\u0026rsquo; is set to \u0026lsquo;After order is paid in full\u0026rsquo; The system will try for maximal 10 seconds to check if transaction is paid. If failed (for example Bank transfer) the order history page is showed as fallback. Fixed issue for support of BVKPayment module.   3.1.4 Release date: Dec 20, 2016\nImprovements  MultiSafepay notices and error messages are now shown in the webshop (front-end). Added input field placeholders for the payment methods Klarna and Pay After Delivery.  Fixes  Added a lock mechanism to prevent the creation of duplicate orders due to multiple Notification URL calls taking place in quick succession.  Changes  Removed option \u0026lsquo;After checkout completed\u0026rsquo; under the \u0026lsquo;at what moment should the order be created\u0026rsquo; setting, as this option is identical to the \u0026lsquo;After order confirmation\u0026rsquo; option. Date of birth provide in the webshop for Klarna and/or E-Invoice is carried over to the Payment page. Resolved unnecessary debug message #1006 being logged when creating transactions.   3.1.2 Release date: Nov 23, 2016\nImprovements  Added full support for BVK payment fees module; percentages, fixed amounts and combinations are supported. Added bundled gift card payment method; the seperate gateways Visa, Mastercard, Maestro and American Express are not visible during checkout. Added some translational ### Improvements Add extra option in the configuration to select the HTTP / HTTPS protocol to use for Offline Actions. Added EPS. Added Ferbuy. Errors are now shown on the Prestashop storefront.  Fixes  Multiple free shipping methods are now shown correctly instead of just one. Fixed issue where the customer was redirected to the order history page instead of the order-confirmation page.  Changes  Removed option \u0026lsquo;After checkout completed\u0026rsquo; under the \u0026lsquo;at what moment should the order be created\u0026rsquo; setting, as this option is identical to the \u0026lsquo;After order confirmation\u0026rsquo; option. Checkout fields for Klarna are now mandatory. Pay After Delivery fields are now mandatory when using direct Pay After Delivery.   3.1.1 Release date: Oct 17, 2016\nImprovements  Resolved an issue resulting in the wrong calculations being applied for shipping and wrapping taxes. A check was added to see whether or not SSL has been enabled in the webshop. Resulting in HTTP301 not occurring when calling the Notification URL. A check was added to see if the current plugin version is the latest version available on our website. Added support for % fee when using BVKPayment module. Added new logo for YourGiftcard.  Fixes  Resolved a bug preventing order\u0026rsquo;s from being created using certain configurations.  Changes  Layout of the configuration screens now have standard PrestaShop design.   3.0.3 Release date: July 27, 2016\nFixes  Resolved a bug preventing order\u0026rsquo;s from being created using certain configurations.   3.0.2 Release date: July 12, 2016\nImprovements  Orders are now created for initialized Bank transfer payments and uncleared transactions when using the setting; \u0026ldquo;Only when an order was paid in full\u0026rdquo;. Added E-Invoicing as a payment method. The PSP ID is added to the order, so it can be used to find the corresponding transaction in your MultiSafepay dashboard.  Fixes  Fixed issue with crypt function were no \u0026lsquo;salt\u0026rsquo; was used. This resulted in a notice when using PHP 5.6 or above.  Changes  Textual ### Changes to the plugin configuration. Changed the name and logo \u0026ldquo;MisterCash\u0026rdquo; to \u0026ldquo;Bancontact\u0026rdquo;.   3.0.0 Release date: Apr 15, 2016\nImprovements  The payment method shown in the Fast Checkout orders are now updated to show the payment method eventually used. Added (limited) support for the BVK Additional Payment Fees module; payment fees can be applied per payment method. Added \u0026ldquo;daysactive\u0026rdquo; to the configuration. Orders are cancelled after X number of days when configured. An extra configuration option has been added for skipping the default extra confirmation screen before payment. Added Dotpay as a payment method. Added e-Invoice as a payment method. Added tooltips to the configuration options in the plugin. Improved the payment logos. Added a debug configuration option. Debug output are logged to: \u0026lsquo;prestashop_root_directory/log/MultiSafepay.log\u0026rsquo;. Added the following gift cards:   Beautyandwellness Brouwmarkt Fashiongiftcard Fietsenbon Gezondheidsbon Goodcard Jewelstore Kellygiftcard Liefcadeaukaart Nationaletuinbon Nationaleverwencadeaubon Parfumcadeaukaart Parfumnl Podium Sportenfit Webshopgiftcard Welness-gift card Wijncadeau Winkelcheque  Fixes  Order status was not updated in case of a partial refund. In specific situations there was still a Payment Error. Minor ### Improvements to the iDEAL gateway layout to match the other payment methods. Improved translations. Changs bank account input field from 10 to 34 characters.  Changes  Removed Babygiftcard. In specific situations there was still a Payment Error. Order status are no longer removed when uninstalling the core MultiSafepay module, resulting in existing orders maintaining the correct order status. This plugin has been rewritten from scratch and uses the JSON API rather than the XML API. Changed the Fast Checkout logo. The order history page is shown when redirected back to the webshop after a successful payment.   2.1.1 Nov 2, 2015 Improvements  Added support for gift card VVV-Bon. During installation of the plugin, the order states will not be removed anymore. So old orders remain their correct order status.  Fixes  Order status was not updated in case of a partial refund. In specific situations there was still a Payment Error.   2.1.0 Release date: Oct 8, 2015\nImprovements  Added support for the BVK Payments module for the payment method Pay After Delivery. MultiSafepay Transaction IDs are now added to, and visible within, the Prestashop order. Changed the Fast Checkout button. The payment method used to pay for an order is now shown within the order overview. The payment hook template now uses the default Prestashop style within the checkout and can be overruled by template overrides. Added Fashzoncheque.  Changes  The iDEAL bank list is now shown under the payment method iDEAL, rather than the next step. Removed the E-Bon gift card.  Fixes  Resolved double paid/invoice notices. Fixed bug to show payment method when the Min and Max amount in the config are equal. Fixed undefined index notice warnings. Fixed double payment method titles. Improved the support of shipping methods, coupons, taxes, free shipping and free products. Shipping prices were always handled by Fast Checkout as including tax.   2.0.0 Release date: Nov 11, 2014\nImprovements  Added special NL config files. Added Italian language files. Added Gateway image for Wallet. Added support for Prestashop 1.6.x. Added support for erotiekbon. Added support for e-bon. Added support for degrotespeelgoedwinkel. Added support for boekenbon. Added support for babygiftcard. Added Notification info field to FCO config for when only Fast Checkout is active. Added better support for IP6.  Changes  Make some ### Changes to the config screen. Updated language files. Updated local images. Updated lang files ES en FR.  Fixes  Fixed bug with wrong Shipping price calculation. Fixed bug to show payment method when the Min and Max amount in the config are equal.  ","tags":null,"title":"PrestaShop plugin changelog","uri":"https://docs.multisafepay.com/integration/ready-made/prestashop-1-6/changelog/"},{"categories":null,"content":"","tags":null,"title":"Release Notes PWA Studio plugin","uri":"https://docs.multisafepay.com/integration/ready-made/pwa-studio/changelog/"},{"categories":null,"content":"","tags":null,"title":"Release Notes Vue Storefront plugin","uri":"https://docs.multisafepay.com/integration/ready-made/vue-storefront/changelog/"},{"categories":null,"content":"","tags":null,"title":"Tags","uri":"https://docs.multisafepay.com/tags/"}]